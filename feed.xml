<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2017-05-18T21:09:05.000Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">The Great RS-232 Adventure</title>
    <link href="http://www.westerndevs.com/development/AndroidSerialPorts/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/AndroidSerialPorts/</id>
    <published>2017-05-11T23:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A few days back my buddy <a href="/bios/justin_self">Justin Self</a> found me a pretty good challenge. Although my memory isn't as good as it once was I have a high degree of confidence that the interaction went something like this.</p><p><strong>Scene:</strong> Simon has just walked out of the ocean after having swum between two adjacent tropical islands. As he strolls up to the beach Justin arrives.</p><p><img src="http://imgur.com/WQlOjce.png" alt="100% truthful representation of what it looked like"><em>Photo of expensive and highly accurate recreation of what happened</em></p><p><strong>Justin:</strong> We need somebody to figure out how to get this android tablet to talk over serial to a computer.</p><p><strong>Simon:</strong> You mean over USB?</p><p><strong>Justin:</strong> No, over RS-232 serial. And you need to be able to do it in Xamarin's MonoDroid or Mono for Android or whatever non-copyright infringing name they have for it now.</p><p><strong>Simon:</strong> Well Justin, I've never used Xamarin before, nor have I written an Android app, nor have I ever done communication over a serial port before. I actually know nothing about hardware either.</p><p><strong>Justin:</strong> You're almost overqualified for this...</p><p><strong>Simon:</strong> I'm as qualified as I am to do anything. I'll get right on it - ship me the tablet.</p><p>And that is a very accurate representation of just what happened. My first step was to get the cables I needed. Back in 1996 I had a serial mouse but that fellow is long since gone and I haven't a single serial cable in my house. So I headed over to a local electronics store and threw myself at the mercy of the clerk and elderly electrical engineering type. He soon had me kitted out with all the hardware I needed</p><ul><li>ATEN USB to Serial converter</li><li>6ft straight through serial cable</li><li>F/F gender changer</li><li>Null modem adapter</li></ul><p>My computer didn't have an RS-232 port and neither did anything else in my house so the USB-to-serial converter was key. It installed using built in Windows drivers which was fortunate because the manual that came with it only had instructions for installing on Windows 2000. For the serial cable I took a straight through because I wasn't sure how the tablet was wired. The gender changer was needed to hook things together and the null modem adapter was to switch around the wiring for computer to computer communication. See back in the day you'd actually use different wires to connect two computers than to connect a computer and a mouse or printer or something. Twisted pair Ethernet use to be like that too before the gigabit standard introduced auto-switching.</p><p>A couple of days later a box arrived for me containing the tablet</p><p><img src="http://i.imgur.com/co21I7x.jpg" alt="Image of IoT-800 from http://www.ruggedpcreview.com/3_panels_arbor_iot800.html"><em>Image from http://www.ruggedpcreview.com/3_panels_arbor_iot800.html</em></p><p>It was an Arbor IoT-800 running Android 4.4. As you can see in that picture there are two 9-pin serial ports on the bottom as well as USB ports and an Ethernet jack. A quick ProTip about those USB port: they aren't the sort you can use to hook the tablet up to your computer but rather for hooking up the tablet to external devices. You might be able to get them working for hooking up to a computer but you'd need a USB-crossover cable, which I didn't have and, honestly, I'd never heard of before this.</p><p>My first step was to write something on the Windows side that could talk over serial. I needed to find the COM port that was related to the serial port I had plugged in. To do this I called into the Windows Management Interface, WMI. You need to run as admin to do this*. I enumerated all the serial ports on my machine and picked the one whose name contained USB. I'm not sure what the other one is, possibly something built into the motherboard that doesn't have an external connector.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">"root\\WMI"</span>, <span class="string">"SELECT * FROM MSSerial_PortName"</span>);</div><div class="line"><span class="keyword">string</span> serialPortName = <span class="string">""</span>;</div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> searchResult <span class="keyword">in</span> searcher.Get())</div><div class="line">&#123;</div><div class="line">    Console.Write(<span class="string">$"<span class="subst">&#123;searchResult[<span class="string">"InstanceName"</span>]&#125;</span> - <span class="subst">&#123;searchResult[<span class="string">"PortName"</span>]&#125;</span>"</span>);</div><div class="line">    <span class="keyword">if</span> (searchResult[<span class="string">"InstanceName"</span>].ToString().Contains(<span class="string">"USB"</span>))</div><div class="line">    &#123;</div><div class="line">        Console.Write(<span class="string">" &lt;--- using this one"</span>);</div><div class="line">        serialPortName = searchResult[<span class="string">"PortName"</span>].ToString();</div><div class="line">    &#125;</div><div class="line">    Console.WriteLine();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>You can also look in the device manager to see which COM port the device is on but this way is more portable. On my machine I got this output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Starting</div><div class="line">ACPI\PNP0501\1_0 - COM1</div><div class="line">USB VID_0557&amp;PID_2008\6&amp;2c24ce2e&amp;0&amp;4_0 - COM4 --- using this one</div></pre></td></tr></table></figure><p>Next I needed to open up the port and write some data. Fortunately there is a built-in serial port library in .NET. Depending on which articles you read online the serial drivers might be terrible. I'm not overly concerned about performance on this line at this juncture so I just went with the built in class located in <code>System.IO.Ports</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> serialPort = <span class="keyword">new</span> SerialPort(serialPortName, <span class="number">9600</span>);<span class="comment">//COM4 and baud of 9600bit/s to start, ramp up later</span></div><div class="line">serialPort.Open();</div><div class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">  Console.WriteLine(counter);</div><div class="line">  <span class="keyword">var</span> sendBytes = System.Text.ASCIIEncoding.ASCII.GetBytes(<span class="string">$"hello from the C# program<span class="subst">&#123;counter++&#125;</span>\n"</span>);</div><div class="line">  serialPort.Write(sendBytes, <span class="number">0</span>, sendBytes.Length);</div><div class="line">  Thread.Sleep(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Here we just loop over the serial port and ask it to send data every second. I chose the most brutally simplistic things at first: a low baud rate and ASCII encoding.</p><p>Of course there really isn't a way to tell if this is working without having something on the other end to read it... So onto Android. My first stop was to install an SSH server on the machine. After all, this is UNIX system and I know that</p><p><img src="http://i.imgur.com/urrU3hU.jpg" alt="It's a UNIX system!"></p><p>One of the really cool things about Linux is the <code>/dev</code> directory. This directory contains all the devices on your system. So if you pop in there you might see devices like <code>sda0</code> which is actually a partition on your hard drive or <code>/dev/random</code> which is a fun device that just emits random numbers. Go on, try doing <code>cat /dev/random</code> or <code>cat /dev/urandom</code> depending on what your system has. On this IoT-800 there are a whole cluster of devices starting with <code>tty</code>. These are, comically, teletype devices. See back in the good old UNIX days we had dumb terminals for accessing a single computer and those devices showed up as <code>tty</code> devices. Guess how those terminals were connected. Serial. So after some experimentation I was able to figure out that the middle physical port on the device was mapped to <code>/dev/ttyS3</code>.</p><p>With the cables all hooked up I held my breath and ran <code>cat /dev/ttyS3</code> while the program on windows was running. Boom, there in my terminal was what was coming from Windows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u0_a74@rk3188:/ $ cat /dev/ttyS3</div><div class="line">hello from the C# program0</div></pre></td></tr></table></figure><p>Linux is awesome. So now all that is needed it to get this working from Xamarin.</p><p>The System.IO.Ports package is not part of the version of .NET which runs on Android so a different approach was necessary. Again Linux to the rescue: we can simply read from the device. Before we do that, however, we need to set the baud on the connection. Normally you'd do this by using stty(1) but this command isn't available on Android and we likely wouldn't have permission to call it anyway.</p><p>What is needed is a native OS call to set up the serial port. Xamarin.Android allows calling to native C functions so let's do that.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;termios.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SetUpSerialSocket</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Opening serial port\n"</span>);</div><div class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/dev/ttyS3"</span>, O_RDWR);</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">cfg</span>;</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Configuring serial port\n"</span>);</div><div class="line">    <span class="keyword">if</span> (tcgetattr(fd, &amp;cfg))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"tcgetattr() failed\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cfmakeraw(&amp;cfg);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Setting speed in structure\n"</span>);</div><div class="line">    cfsetispeed(&amp;cfg, B115200);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Saving structure\n"</span>);</div><div class="line">    <span class="keyword">if</span>(!tcsetattr(fd, TCSANOW, &amp;cfg))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Serial port configured, mate\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Uh oh\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Setting baud on serial port /dev/ttyS3\n"</span>);</div><div class="line">    <span class="keyword">return</span> SetUpSerialSocket();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>To actually call this function we'll need to compile it. For that we need the Android NDK. Instead of getting into how to do that I'll just link to Nick Desaulniers's <a href="http://nickdesaulniers.github.io/blog/2016/07/01/android-cli/" target="_blank" rel="external">excellent post</a>. I will say that I did the compilation using the Windows Subsystem for Linux which is boss.</p><p>The end result is a libSetBaud.so file, .so being the extension for shared objects. This file should be included in the Android application in Visual Studio. A couple of things seem to be important here: first the file should be in a hierarchy which indicates what sort of processor it runs on. If you need to support more than one processor then you'll need to compile a couple of different versions of the library. I knew that this particular device had an armeabi-v7a so into that folder went the compiled .so file. Second you'll need to set the type on the file to AndroidNativeLibrary.</p><p>Next came exposing the function the function for use in Xamarin. To do that we use the Platform Invocation Service (PInvoke). PInvoke allows calling into unmanaged code in an easy way. All that is needed is to</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">SerialMessaging.Android</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaudSetter</span></div><div class="line">    &#123;</div><div class="line">        [DllImport(<span class="string">"libSetBaud"</span>, ExactSpelling = <span class="literal">true</span>)]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">SetUpSerialSocket</span>(<span class="params"></span>)</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>I'd never had to do this before and it is actually surprisingly easy. Things obviously get way more complex if the function you're calling out to requires more complex types or pointers or file descriptors. I specifically kept the C code to a minimum because I don't trust in my ability to do things with C. If you're more adventurous then you can hook into the Android libraries and make use of things like their logging pipeline instead of <code>printf</code>.</p><p>With this all in place it was possible to spin up an Android application to see if we can get the message from the Windows side. Building on the idea of just reading from the device I started with</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> readHandle = File.Open(<span class="string">"/dev/ttyS3"</span>, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> readBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2000</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (readHandle.CanRead)</div><div class="line">        readHandle.Read(readBuffer, <span class="number">0</span>, <span class="number">2000</span>);</div><div class="line">    Android.Util.Log.Debug(<span class="string">"serial"</span>, readBuffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>This was able to retrieve bytes out of the device and print them to the Android debug console. Awesome! The problem was that when they came in they weren't all a contiguous block. If the windows side sent <code>hello from the C# program1\n</code> in a loop then we might get the output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hel</div><div class="line">lo from the C# </div><div class="line">program1\nh</div><div class="line">ello from the C# program1</div></pre></td></tr></table></figure><p>Uh oh. Guess we'll have to use a stop byte to indicate the end of messages. <code>0x00</code> won't work because the read buffer contains a bunch of those already. For now we can try using <code>0x01</code>. Looking at an ASCII table sending <code>0x03</code>, End of Text might be more appropriate. We add that to the send side with a WireFormatSerializer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WireFormatSerializer</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">Serialize</span>(<span class="params"><span class="keyword">string</span> toSerialize</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(toSerialize);</div><div class="line">        <span class="keyword">var</span> bytesWithSpaceForTerminatingCharacter = <span class="keyword">new</span> <span class="keyword">byte</span>[bytes.Length + <span class="number">1</span>];</div><div class="line">        Array.Copy(bytes, bytesWithSpaceForTerminatingCharacter, bytes.Length);</div><div class="line">        bytesWithSpaceForTerminatingCharacter[bytesWithSpaceForTerminatingCharacter.Length - <span class="number">1</span>] = <span class="number">0x1</span>;</div><div class="line">        <span class="keyword">return</span> bytesWithSpaceForTerminatingCharacter;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>On the receiving side we hook up a BufferedMessageReader whose responsibility it is to read bytes and assemble messages. I decided to push the boat out a bit here and implement an IObservable<string> which would rebuild the messages and emit them as events.</string></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class BufferedMessageReader : IObservable&lt;string&gt;</div><div class="line">&#123;</div><div class="line">    List&lt;IObserver&lt;string&gt;&gt; observers = new List&lt;IObserver&lt;string&gt;&gt;();</div><div class="line">    List&lt;byte&gt; freeBytes = new List&lt;byte&gt;();</div><div class="line"></div><div class="line">    public void AddBytes(byte[] bytes)</div><div class="line">    &#123;</div><div class="line">        foreach(var freeByte in bytes)</div><div class="line">        &#123;</div><div class="line">            if(freeByte == 0x01)</div><div class="line">            &#123;</div><div class="line">                EndOfMessageEncountered();</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                freeBytes.Add(freeByte);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public IDisposable Subscribe(IObserver&lt;string&gt; observer)</div><div class="line">    &#123;</div><div class="line">        if(!observers.Contains(observer))</div><div class="line">            observers.Add(observer);</div><div class="line">        return new Unsubscriber(observers, observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void EndOfMessageEncountered()</div><div class="line">    &#123;</div><div class="line">        var deserializer = new WireFormatDeserializer();</div><div class="line">        var message = deserializer.Deserialize(freeBytes.ToArray());</div><div class="line"></div><div class="line">        foreach (var observer in observers)</div><div class="line">            observer.OnNext(message);</div><div class="line">        freeBytes.Clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class Unsubscriber: IDisposable</div><div class="line">    &#123;</div><div class="line">        private List&lt;IObserver&lt;string&gt;&gt; _observers;</div><div class="line">        private IObserver&lt;string&gt; _observer;</div><div class="line"></div><div class="line">        public Unsubscriber(List&lt;IObserver&lt;string&gt;&gt; observers, IObserver&lt;string&gt; observer)</div><div class="line">        &#123;</div><div class="line">            this._observers = observers;</div><div class="line">            this._observer = observer;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void Dispose()</div><div class="line">        &#123;</div><div class="line">            if (_observer != null &amp;&amp; _observers.Contains(_observer))</div><div class="line">                _observers.Remove(_observer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Most of this class is boilerplate code for wiring up observers. The crux is that we read bytes into a buffer until we encounter the stop bit which we discard and deserialize the buffer before clearing it ready for the next message. This seemed to work pretty well. There could be some additional work done around the message formats for the wire for instance adding more complete checksums and a retry policy. I'd like to get some experimental data on how well the current set up works in the real world before going to that length.</p><p>On the Android side I wrapped this observable with a thing to actually read the file so it ended up looking like</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerialReader</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> _device &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> Starts a serial reader on the given device</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="device"&gt;</span>The device to start a reader on. Defaults to /dev/ttyS3<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SerialReader</span>(<span class="params"><span class="keyword">string</span> device = <span class="string">"/dev/ttyS3"</span></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!device.StartsWith(<span class="string">"/dev/"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Device must be /dev/tty&lt;something&gt;"</span>);</div><div class="line">        _device = device;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BufferedMessageReader reader = <span class="keyword">new</span> BufferedMessageReader();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IObservable&lt;<span class="keyword">string</span>&gt; <span class="title">GetMessageObservable</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> reader;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessBytes</span>(<span class="params"><span class="keyword">byte</span>[] bytes</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = bytes.Length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; bytes[i] == <span class="number">0</span>)</div><div class="line">            --i;</div><div class="line">        <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">var</span> trimmedBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[i + <span class="number">1</span>];</div><div class="line">        Array.Copy(bytes, trimmedBytes, i + <span class="number">1</span>);</div><div class="line">        reader.AddBytes(trimmedBytes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> readThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(StartThread));</div><div class="line">        readThread.Start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartThread</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> readHandle = File.Open(_device, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> readBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2000</span>];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (readHandle.CanRead)</div><div class="line">                readHandle.Read(readBuffer, <span class="number">0</span>, <span class="number">2000</span>);</div><div class="line">            ProcessBytes(readBuffer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Now listening for messages is as easy as doing</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BaudSetter.SetupUpSerialSocket(); <span class="comment">//sets up the baud rate</span></div><div class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> SerialReader(); <span class="comment">//create a new serial reader</span></div><div class="line">reader.GetMessageObservable().Subscribe((message) =&gt; Log(message));<span class="comment">//subscribe to new messages</span></div><div class="line">reader.Start();<span class="comment">//start the listener</span></div></pre></td></tr></table></figure><p>One way communication squared away. Now to get messages back from the tablet to the computer. First stop was writing to the file on Android. Again we can make use of the fact that the serial port is just a file</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerialWriter</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> _device &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SerialWriter</span>(<span class="params"><span class="keyword">string</span> device = <span class="string">"/dev/ttyS3"</span></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!device.StartsWith(<span class="string">"/dev/"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Device must be /dev/tty&lt;something&gt;"</span>);</div><div class="line">        _device = device;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> toWrite</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> writeHandle = File.Open(_device, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> bytes = <span class="keyword">new</span> WireFormatSerializer().Serialize(toWrite);</div><div class="line">        <span class="keyword">if</span> (writeHandle.CanWrite)</div><div class="line">        &#123;</div><div class="line">            writeHandle.Write(bytes, <span class="number">0</span>, bytes.Length);</div><div class="line">        &#125;</div><div class="line">        writeHandle.Close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Really no more than just writing to a file like normal. Closing the file descriptor after each write seemed to make things work better. On the Windows side the serial port already has a data received event built into it so we can just go and add an event handler.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serialPort.DataReceived += DataReceivedHandler;</div></pre></td></tr></table></figure><p>This can then be hooked up like so</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> BufferedMessageReader reader = <span class="keyword">new</span> BufferedMessageReader();</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DataReceivedHandler</span>(<span class="params"></span></span></div><div class="line">                <span class="keyword">object</span> sender,</div><div class="line">                SerialDataReceivedEventArgs e)</div><div class="line">&#123;</div><div class="line">    SerialPort sp = (SerialPort)sender;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> bytesToRead = sp.BytesToRead;<span class="comment">//need to create a variable for this because it can change between lines</span></div><div class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[bytesToRead];</div><div class="line">    sp.Read(bytes, <span class="number">0</span>, bytesToRead);</div><div class="line"></div><div class="line">    reader.AddBytes(bytes);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>And that is pretty much that. This code all put together allows sending and receiving messages on a serial port. You can check out the full example at https://github.com/ClearMeasure/AndroidSerialPort where we'll probably add any improvements we find necessary as we make use of the code.</p><p>*There is probably some way to grant your user account the ability to do this but I didn't look into it</p>]]></content>
    
    <summary type="html">
    
      Talking over the RS-232 serial protocol is a bit of a blast from the past but I needed to use in on an Android tablet from within Xamarin. This is the, painfully complete, story of my journey.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="c#" scheme="http://www.westerndevs.com/tags/c/"/>
    
      <category term="xamarin" scheme="http://www.westerndevs.com/tags/xamarin/"/>
    
  </entry>
  
  <entry>
    <title type="html">Transparency</title>
    <link href="http://www.westerndevs.com/podcasts/Transparency/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/podcasts/Transparency/</id>
    <published>2017-05-09T23:25:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
		  
	  <name>Western Devs</name>
	  <email>info@westerndevs.com</email>	  
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h3>Synopsis</h3><ul><li>University of Waterloo salary adjustment</li><li>Transparency as a means to resolve the gender gap</li><li>Problems that go away when salaries are publicized</li><li>How do you account for high performers who demand more?</li><li>Pros and cons of salary bands</li><li>The White House diversity pledge</li><li>Preparing for transparency</li><li>Why are North Americans so squeamish about discussing salary?</li><li>Advantages for companies not having to compete on salary</li><li>The effect of an information-based economy vs. a widget-based economy</li><li>&quot;All else being equal&quot;</li></ul>]]></content>
    
    <summary type="html">
    
      Wherein the Western Devs determine if, when, and how companies should publish salary and diversity numbers
    
    </summary>
    
      <category term="podcasts" scheme="http://www.westerndevs.com/categories/podcasts/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">JSON.net not just for serialization</title>
    <link href="http://www.westerndevs.com/json/Json.net-not-just-for-sereialization/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/json/Json.net-not-just-for-sereialization/</id>
    <published>2017-05-03T15:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you happen to head over to <a href="https://www.nuget.org/packages" target="_blank" rel="external">https://www.nuget.org/packages</a> and look at which package has been downloaded the most there is a clear winner: JSON.net. It is in everything, every where. JSON is so wildly ubiquitous that I play a little game with myself when I start a new project: how long can I go before I need to serialize or deserialize JSON and need to pull in JSON.net. I rarely last more than a couple of hours.</p><p>But it turns out that there is a lot more that JSON.net can do.</p><a id="more"></a><p>My good buddy <a href="https://ericflemingblog.wordpress.com/" target="_blank" rel="external">Eric Fleming</a> found this one and I'm really just stealing it from him(although <a href="http://jameschambers.com/" target="_blank" rel="external">James</a> claims he found it). The problem that we were trying to solve was that we wanted to patch together a new JSON object out of a bunch of C# objects. It could have been done by building a new DTO, mapping a number of objects to it and then serializing it to JSON. This was kind of a lot of work. Static languages are nice but chucking together ad hoc objects isn't a strong suit. In this case we used JObject to structure the new object</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Program</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> sock = <span class="keyword">new</span> Sock&#123;</div><div class="line">            Colour = <span class="string">"blue"</span>,</div><div class="line">            Size = <span class="string">"medium"</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> shoe = <span class="keyword">new</span> Shoe&#123;</div><div class="line">            Material = <span class="string">"leather"</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> ensemble = JObject.FromObject(sock);</div><div class="line">        ensemble.Merge(JObject.FromObject(shoe));</div><div class="line">        Console.WriteLine(ensemble.ToString());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Sock</span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Colour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Size &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Shoe</span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Material&#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The output looks like</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Colour"</span>: <span class="string">"blue"</span>,</div><div class="line">  <span class="attr">"Size"</span>: <span class="string">"medium"</span>,</div><div class="line">  <span class="attr">"Material"</span>: <span class="string">"leather"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>This approach can be useful in a number of scenarios</p><ul><li>Treating an object as a mixin and applying it to a bunch of differently shaped JSON</li><li>Merging existing JSON with C# objects</li></ul><p>The latter scenario can be achieved like so</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hatJObject = JObject.Parse(<span class="string">@"</span></div><div class="line">                &#123;</div><div class="line">                    'HatSize': 'Large'</div><div class="line">                &#125;</div><div class="line">            ");</div><div class="line"><span class="keyword">var</span> ensemble = JObject.FromObject(sock);</div><div class="line"><span class="keyword">var</span> shoeJObject = JObject.FromObject(shoe);</div><div class="line">shoeJObject.Merge(JObject.FromObject(shoeLace));</div><div class="line">ensemble.Merge(shoeJObject);</div><div class="line">ensemble.Merge(hatJObject);</div></pre></td></tr></table></figure><p>This outputs</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Colour"</span>: <span class="string">"blue"</span>,</div><div class="line">  <span class="attr">"Size"</span>: <span class="string">"medium"</span>,</div><div class="line">  <span class="attr">"Material"</span>: <span class="string">"leather"</span>,</div><div class="line">  <span class="attr">"LaceLength"</span>: <span class="number">30</span>,</div><div class="line">  <span class="attr">"HatSize"</span>: <span class="string">"Large"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>There are also <code>JObject.Load</code> and <code>JObject.Read</code> for reading from JSON streams.</p><p>Newtonsoft.JSON is such a well known and well developed library that it is a shame to just use <code>JsonConvert</code> methods when there is such additional richness.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you happen to head over to &lt;a href=&quot;https://www.nuget.org/packages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.nuget.org/packages&lt;/a&gt; and look at which package has been downloaded the most there is a clear winner: JSON.net. It is in everything, every where. JSON is so wildly ubiquitous that I play a little game with myself when I start a new project: how long can I go before I need to serialize or deserialize JSON and need to pull in JSON.net. I rarely last more than a couple of hours.&lt;/p&gt;
&lt;p&gt;But it turns out that there is a lot more that JSON.net can do.&lt;/p&gt;
    
    </summary>
    
      <category term="json" scheme="http://www.westerndevs.com/categories/json/"/>
    
    
      <category term="json.net" scheme="http://www.westerndevs.com/tags/json-net/"/>
    
      <category term="c#" scheme="http://www.westerndevs.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title type="html">Conquest April 2017 Devblog</title>
    <link href="http://www.westerndevs.com/devblog/Conquest-April-2017-Devblog/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/devblog/Conquest-April-2017-Devblog/</id>
    <published>2017-05-02T12:31:41.000Z</published>
    <updated>2017-05-02T12:31:41.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is the April 2017 update for my video game project I call &quot;Conquest&quot;.</p><a id="more"></a><p>This month, I have continued to make progress on my game project. The unexpected thing that happened was the fact that I decided to take a step back and do some research and development before continuing forward with the game idea I have in mind.</p><h2>Status Update</h2><p>Here's the thing: my game project is too big. At least for now, it's too big, and I don't have enough experience and knowledge to be cofortable taking this idea and turning it into a game.</p><p>It's my first original video game, after all, and if you watch or read game design resources like <a href="https://www.youtube.com/user/ExtraCreditz" target="_blank" rel="external">Extra Credits</a>, you'll often hear that you should start small and move up from there.</p><p>So that's what I did. And I made <a href="https://github.com/davidwesst/breakout" target="_blank" rel="external">Breakout</a> by following <a href="https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript" target="_blank" rel="external">this MDN</a> tutorial.</p><p><img src="http://i.imgur.com/TnoJp0Gm.png" alt=""></p><p>I know that this isn't going to blow anyone's mind, but it's first game I've made with nothing but vanilla JavaScript and let me get familiar with the basics of JavaScript game development, without blindly relaying on a framework.</p><p>I intend on continuing with this breakout game for another month as I prepare for <a href="http://prairiedevcon.com/" target="_blank" rel="external">Prairie Dev Con</a> to add some polish, clean up the code, and maybe add a few gameplay elements that I worked on this month.</p><p>But now, onto the update.</p><h3>What I've Done</h3><p>Like last time, I'll keep it short and in bullet points:</p><ul><li>Development<ul><li>Did an automated deployment to <a href="https://itch.io/" target="_blank" rel="external">Itch.io</a> using Powershell and VSTS</li><li>Experimented with the <a href="http://www.inklestudios.com/ink/" target="_blank" rel="external">Ink</a> dialogue system and found how to integrate into build</li><li>Taken a step back on Conquest, in lieu of more R&amp;D through smaller games</li><li>Created <a href="https://github.com/davidwesst/breakout" target="_blank" rel="external">Breakout</a> with vanilla ES6 JavaScript, complete with a transpiler and SystemJS modules<ul><li>Thanks <a href="https://github.com/chrinkus/" target="_blank" rel="external">Chris</a> for the suggestion and <a href="https://love2dev.com/" target="_blank" rel="external">Chris Love from Love2Dev</a> for providing constructive feedback regarding framework dependent developers.</li></ul></li><li>Setup my Vim development environment to be extra cool.</li></ul></li><li>Design<ul><li>Met with an <em>actual video game writer</em> to talk about the best way to start including narrative and dialogue into a game<ul><li>Thanks <a href="http://www.rmorganslade.ca/" target="_blank" rel="external">R. Morgan Slade</a> for taking the time and providing some really good feedback and insight</li></ul></li><li>Started migrating some design elements from Conquest into Breakout</li></ul></li></ul><h3>What I've Faced</h3><p>This month, the big thing I faced was the realization that my project is too big for me. It's not that I don't think I would finish it eventually. It's that I don't think I have the skills to make the game fun when I'm done with it.</p><p>I also realized that I am too dependent on frameworks when it comes to game development. It's not that I don't think frameworks have a place or that I'll eventually use one or more of them in my game. It's that I don't know what the framework brings to the table other than an abstraction in development.</p><p>There are plenty of game design tools with full UI's that remove the need to code everything from the ground up, but since I've opted to go the code-focused route because that's what I know best, I should probably know a bit more about the layers code before I start abstracting them away.</p><h3>Where I'm Going</h3><p>May is going to be busy with Prarie Dev Con happening in June, but that won't stop me from working on Conquest. I should also document these discoveries I make a little more, so I'll be doing that through the blog.</p><p>That being said, my plan is to focus on polishing up Breakout by using some of the planned features for Conquest in Breakout. They might not work all that well in that game, but the goal of Breakout isn't to make it a hit, but to experiment with these systems I have planned for Conquest.</p><p>To summarize, here's the plan:</p><ul><li>Refactor Breakout to have a cleaner code base (i.e. modules, objects, etc...)</li><li>Share my VSTS game development discoveries via my blog</li><li>Add some polish to Breakout to complete it</li><li>Prepare my demos for <a href="http://prairiedevcon.com/" target="_blank" rel="external">Prairie Dev Con</a> using Breakout as the demo project</li></ul><h2>Conclusion</h2><p>What I've concluded this month is that I need to make games that match my skills as software developer. For that reason, I'm going to focus on learning the guts of the JavaScript by improving my vanilla JS Breakout game.</p><p>All in all, this month has been quite the shift in direction. I went from making one big game, to making one small game that has nothing to do with the original. It's been challenging, but in a good way. Now I can move forward with developing these systems in smaller pieces, refine them, and eventually recombine them into my original game design.</p><p>See you next month.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the April 2017 update for my video game project I call &amp;quot;Conquest&amp;quot;.&lt;/p&gt;
    
    </summary>
    
      <category term="devblog" scheme="http://www.westerndevs.com/categories/devblog/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="conquest" scheme="http://www.westerndevs.com/tags/conquest/"/>
    
      <category term="ink" scheme="http://www.westerndevs.com/tags/ink/"/>
    
      <category term="itch.io" scheme="http://www.westerndevs.com/tags/itch-io/"/>
    
  </entry>
  
  <entry>
    <title type="html">Working From Home</title>
    <link href="http://www.westerndevs.com/podcasts/working-from-home/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/podcasts/working-from-home/</id>
    <published>2017-04-23T20:43:26.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
		  
	  <name>Western Devs</name>
	  <email>info@westerndevs.com</email>	  
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h3>Synopsis</h3><ul><li>Round table: Who works from home?</li><li>What hours do you keep?</li><li>Handling meetings</li><li>Separating work time from home time</li><li>The importance of a routine</li><li>Interruptions</li><li>Ensuring you put in the hours</li><li>Do you account for water cooler time?</li><li>Remote friendly vs. remote first organizations</li><li>Training your family</li><li>Are you lonely?</li><li>Getting out of the house</li><li>Competing globally</li><li>Communication</li><li>Do you have to work from <em>home</em>?</li><li>Vacation</li><li>Co-working spaces</li><li>Staying focused</li><li>Do you even eat (healthy), bro?</li></ul>]]></content>
    
    <summary type="html">
    
      Yeah, so Pokemon Go was still a thing when we originally recorded this. Add procrastination to the list of hazards for working from home.
    
    </summary>
    
      <category term="podcasts" scheme="http://www.westerndevs.com/categories/podcasts/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">The Cloud Is The Internet</title>
    <link href="http://www.westerndevs.com/cloud/azure/The-Cloud-Is-The-Internet/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/cloud/azure/The-Cloud-Is-The-Internet/</id>
    <published>2017-04-22T15:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>D&#39;Arcy Lussier</name>
	  <email>darcy.lussier@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A number of years ago someone made this sticker and it became popular on the internet:</p><p> </p><p><img src="https://darcyblogimages.blob.core.windows.net/wdimages/ThereIsNoCloud.png" alt=""></p><p>It spoke to everyone's frustration with the failure of marketing and sales to properly communicate whatcloud computing was and how platforms like Azure and AWS fit into this new computing paradigm. In this post I want to give a fresh perspective on what cloud computing is and what we can do with it.</p><h3>Defining Cloud</h3><p>Microsoft defines the cloud this way:</p><blockquote><p><strong>&quot;Simply put, cloud computing is the delivery of computing services—servers, storage, databases, networking, software, analytics, and more—over the Internet (“the cloud”).&quot;</strong></p></blockquote><p>Cloud computing is leveraging the internet in new ways. We've been evolving cloud computing since the internet existed.</p><p>Consider the earliest days - the dawn of the World Wide Web that allowed us to post static pages of information that was discoverable over the internet. Soonsearch providers emerged, making information even easier to find; these were the first cloud applications.</p><p>We began adding dynamic aspects to web development. Technologies like Classic ASP, Java, PHP, and JavaScript emerged that opened up the internet to a new era ofinformation sharing and ecommerce. Messaging and chat applications emerged and while they were still installed locally on the client pc, it was the internetthat provided the ability to communicate.</p><p>More complex web frameworks emerged like ASP.NET, Cold Fusion, Java Server Pages, and others. The new scenarios they introduced required new connectivity options,and we saw service frameworks like WCF and REST emerge to better communicate over the internet.</p><p>More recently we've seen how client side libraries and asynchornous programming is changing internet computing again. Alongside that,cloud platforms like Azure and AWS have emerged offering evolved services from the simple data-transfer ones.</p><p>So all of this is to say: Cloud computing is the evolution of using the internet as a development platform.</p><h3>Cloud Service Providers</h3><p>Now that we've defined what cloud is, how does this change our view of what Azure, AWS, and other cloud service providers are? Microsoft provides us witha great definition of Azure, which we can apply to the others:</p><blockquote><p><strong>Microsoft Azure is a growing collection of integrated cloud services that developers and IT professionals use to build, deploy, and manage applications through Microsoft’s global network of datacenters.</strong></p></blockquote><p>This is an important distinction. Azure itself is not a cloud; its cloud enabled services (meaning it relies on the internet) and they happen to use ahuge number of large datacenters to operate those services.</p><p>What differentiates cloud service platforms from previous cloud computing implementations (like web mail or web app hosting) are certain tenets that cloud service platforms share:</p><ul><li><p>Reduced Costs - You aren't buying the servers or network components or running the datacenters yourself</p></li><li><p>Speed – Able to provision resources in minutes, capacity planning becomes administrative instead of managing physical assets</p></li><li><p>Global Scale – Scale elastically and provide the right amount of IT resources when its needed from the right geographical location</p></li><li><p>Productivity – Removes mundane IT activities, focuses on high value activities</p></li><li><p>Performance – Worldwide networks that offer benefits like reduced network latency and greater economies of scale</p></li><li><p>Reliability – Data backup, disaster recovery, and business continuity easier and less expensive</p></li></ul><h3>The Cloud Enables our Applications</h3><p>When we shift our view of cloud away from the physical datacenters and infrastructure powering cloud service providers and to the original meaning of cloud - the internet - then things make a lot more sense.Cloud computing has been changing the way we work, play, and connect ever since the internet was invented. We're just now seeing how far the cloud service providers are able to push the envelope.</p><p>There is a cloud, and it enables our applications to do amazing things!</p><p> </p><p><img src="https://darcyblogimages.blob.core.windows.net/wdimages/ThereIsACloud.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Let&#39;s reset our definitions and thinking around what cloud computing and cloud service providers are.
    
    </summary>
    
      <category term="cloud" scheme="http://www.westerndevs.com/categories/cloud/"/>
    
      <category term="azure" scheme="http://www.westerndevs.com/categories/cloud/azure/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Using azure-cli in windows bash</title>
    <link href="http://www.westerndevs.com/messaging/az_command_line-on_windows_bash/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/messaging/az_command_line-on_windows_bash/</id>
    <published>2017-04-19T05:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The latest versions of Windows support running linux executables. The technical trickery to get that done boggle my mind. I wanted to get the Azure command line tools working inside of the bash. The tools are written in python so we need to get that installed.</p><a id="more"></a><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install python-pip python-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libxml2-<span class="built_in">dev</span> libxslt1-<span class="built_in">dev</span> zlib1g-<span class="built_in">dev</span></div></pre></td></tr></table></figure><p>This also installs some build tools which we'll need to install the actual azure-cli and pip which is kind of nuget for python. Now we just need to install the tools</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --<span class="keyword">user</span> <span class="title">azure-cli</span></div></pre></td></tr></table></figure><p>This will install the tools to <code>~/.local/bin</code>. You might need to add that to your path or at least reload the profile by running <code>. ~/.profile</code>. Now you can login with</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">az login</span></div></pre></td></tr></table></figure><p>This will give you a code to enter in a browser which will complete you login and Bob's your uncle. Because python is portable this could all be done on Windows as well but I'm still more comfortable scripting against bash than powershell.  You can read more about az and all the sub-commands like <code>az acr</code> at https://docs.microsoft.com/en-us/cli/azure/overview. I'll probably also post some more content on it soon.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The latest versions of Windows support running linux executables. The technical trickery to get that done boggle my mind. I wanted to get the Azure command line tools working inside of the bash. The tools are written in python so we need to get that installed.&lt;/p&gt;
    
    </summary>
    
      <category term="messaging" scheme="http://www.westerndevs.com/categories/messaging/"/>
    
    
      <category term="azure" scheme="http://www.westerndevs.com/tags/azure/"/>
    
      <category term="windows bash" scheme="http://www.westerndevs.com/tags/windows-bash/"/>
    
  </entry>
  
  <entry>
    <title type="html">Introducing My Game Project - March 2017 Devblog</title>
    <link href="http://www.westerndevs.com/devblog/Conquest-March-2017-Devblog/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/devblog/Conquest-March-2017-Devblog/</id>
    <published>2017-04-03T10:00:00.000Z</published>
    <updated>2017-04-03T10:00:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've wanted to make a video game since I was very young. It got me into programming during my university career, and is something of a passion of mine now that I'm older and more of a seasoned developer.</p><p>I've toyed and tinkered with different game ideas and technologies through the years, but never really got anything done. At the beginning of this year, I started working on something I decided would be my first &quot;real&quot; game. I'm not sure what it is yet, but it's turning into something after three month of development and design in my spare time.</p><p>Today, I'm going to share a bit about it with you, the public, for the first time.</p><h2>Introducing &quot;Conquest&quot;</h2><p>This game is something of a life long conquest for me, but that isn't where the name comes from. This game started out as one idea where conquest made a lot of sense, but has transformed in a few ways over the past month to something completely different. I've been rolling with it and I like where it's headed now, but the name is going to stay the same until I get something a little more locked down.</p><p>In the meantime, you can take a look the <a href="http://imgur.com/a/x7eGr" target="_blank" rel="external">first official screenshots</a>:</p><p><img src="http://i.imgur.com/dqEGoFf.png" alt=""></p><p>It's not much to look at, but this is just the beginning.</p><p>The goal is to get the gameplay loop and core systems down, based on the bit of design I have in mind. I've been doing pitch sessions with my SO (significant other), who has helped keep me and the multitude of ideas in check. Graphics and polish will come later, but for now it's all about the gameplay.</p><p>But enough of that, let's get status update.</p><h2>Status Update</h2><p>The point of these posts is to try and help me reflect on what I've done, what issues I've faced, and where I'm going from here. Think of it as a sort of sprint review. Although this is three months of effort, I have started planning month long iterations where each iteration will end with a devblog post.</p><p>For those wondering, I use Visual Studio Team Services for that planning, but I'll discuss that in future regularily scheduled blog posts.</p><h3>What I've Done</h3><p>Over the past three months, I've done quite a bit, but I'll keep it brief with bullet points.</p><ul><li>Development<ul><li>Selected <a href="http://phaser.io/" target="_blank" rel="external">Phaser</a> as the base game framework</li><li>Implemented signals for game events, triggered through timers and through player interaction</li><li>Implemented in-game time</li><li>Implemented map metadata layer</li><li>Setup issue and bug tracking in <a href="http://phaser.io/" target="_blank" rel="external">VSTS</a></li><li>Setup contiuous integration and deployment to Itch.io using VSTS</li></ul></li><li>Design<ul><li>Did a &quot;pitch&quot; to solidify game idea and core gameplay concepts</li><li>Setup a map design workflow using <a href="http://www.mapeditor.org/" target="_blank" rel="external">Tiled</a> map editor</li></ul></li></ul><p>The gist of it is that I've focused on figuring out what sort of game I want to make by focusing on the things I already know: the tech.</p><h3>What I've Faced</h3><p>Plenty.</p><p>I'll be more specific in future posts, but most of everything I've faced over these past three months has been around discovery and learning how to do basic game development. By using TypeScript (with it's definition files) and Phaser as my foundation, I've been moving pretty quickly and learning something new every time I sit down to work on the game.</p><p>The other challenge I've is figuring out where to draw the line between development and design. At this point, I feel like I know where the line is and actually know that there <em>is</em> a line between them. The challenge is making sure that I make sure to keep progress happening in both streams. Development work is familiar to me compared to design and ultimately more of a comfort zone for me to fall back on.</p><p>The problem is that without design, I'm just building game technology without purpose. How do I know what systems to build if I don't know what kind of game I'd like to build?</p><p>I've gotten much better at this over the course of February and March, and intend on keeping that going in future iterations by making sure that the number of dev and design issues are balanced each month.</p><h3>Where I'm Going</h3><p>For the next iteration, I'm going to try and add two more systems to the game: a dialogue system, and an objective/goal system. There are more I'd like to add, but those two are the most critical. With these two in place I think I would have all the systems I need to the first part of the game playable and in front of players.</p><p>For the design side, I have a vision in mind for the first playable part. To build it, I need to design my first &quot;real&quot; map, complete with metadata and a story that is told through interaction with the map. The other thing  will be to make sure that I use the <em>existing</em> systems I've developed to tell the story through the map, rather that defining new systems.</p><p>In summary, the goals for the sprint are:</p><ul><li>Development<ul><li>Display scripted dialogue in-game</li><li>Include objective for the player to accomplish</li></ul></li><li>Design<ul><li>Map of first playable section that tells a story through interaction</li><li>Leverage the each of the existing systems in the map to aid in story telling</li></ul></li></ul><h2>Conclusion</h2><p>This post is the first of many. They will be monthly, and have more specific content about progress.</p><p>For a first post, this is pretty light on the details. That's mainly because there aren't a lot of details to share just yet. For now, all I can say is that I plan on continuing to blog about both the technical and the design challenges that I face along the way. Hopefully, over the next few posts, I will have something for you to play.</p><p>Until next month.</p>]]></content>
    
    <summary type="html">
    
      This is the first of monthly status update posts on my video game project I call Conquest.
    
    </summary>
    
      <category term="devblog" scheme="http://www.westerndevs.com/categories/devblog/"/>
    
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="phaser" scheme="http://www.westerndevs.com/tags/phaser/"/>
    
      <category term="conquest" scheme="http://www.westerndevs.com/tags/conquest/"/>
    
  </entry>
  
  <entry>
    <title type="html">Getting Started with RabbitMQ in ASP.NET</title>
    <link href="http://www.westerndevs.com/messaging/MassTransit_and_ASP/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/messaging/MassTransit_and_ASP/</id>
    <published>2017-03-19T05:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In the last post we looked at how to set up RabbitMQ in a Windows container. It was quite the adventure and I'm sure it was woth the time I invested. Probably. Now we have it set up we can get to writing an application using it.</p><p>A pretty common use case when building a web application is that we want to do some background processing which takes longer than we'd like to keep a request open for. Doing so would lock up an IIS thread too, which ins't optimal. In this example we'd like to make our user creation a background process.</p><a id="more"></a><p>To start we need a command which is just a plain old CLR object</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddUser</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> EmailAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>That all looks pretty standard. In our controller, we'll just use the handy UserCreationSender</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> :</span> Controller</div><div class="line">&#123;</div><div class="line">    IUserCreationSender _userCreationSender;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span><span class="params">(IUserCreationSender userCreationSender)</span></span></div><div class="line">    &#123;</div><div class="line">        _userCreationSender = userCreationSender;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        _userCreationSender.Send(<span class="string">"simon"</span>, <span class="string">"tibbs"</span>, <span class="string">"stimms@gmail.com"</span>);</div><div class="line">        <span class="keyword">return</span> View();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>There that was easy. In our next post, we'll... what's that? I've missed actually showing any implementation. Fair point, we can do that.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName, <span class="keyword">string</span> emailAddress</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory()</div><div class="line">    &#123;</div><div class="line">        HostName = <span class="string">"172.22.144.236"</span>,</div><div class="line">        Port = <span class="number">5672</span>,</div><div class="line">        UserName = <span class="string">"guest"</span>,</div><div class="line">        Password = <span class="string">"guest"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</div><div class="line">    &#123;</div><div class="line">        channel.QueueDeclare(queue: <span class="string">"niftyqueue"</span>,</div><div class="line">                                durable: <span class="literal">false</span>,</div><div class="line">                                exclusive: <span class="literal">false</span>,</div><div class="line">                                autoDelete: <span class="literal">false</span>,</div><div class="line">                                arguments: <span class="literal">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> command = <span class="keyword">new</span> AddUser</div><div class="line">        &#123;</div><div class="line">            FirstName = firstName,</div><div class="line">            LastName = lastName,</div><div class="line">            EmailAddress = emailAddress,</div><div class="line">            Password = <span class="string">"examplePassword"</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">string</span> message = JsonConvert.SerializeObject(command);</div><div class="line">        <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);</div><div class="line"></div><div class="line">        channel.BasicPublish(exchange: <span class="string">""</span>,</div><div class="line">                                routingKey: <span class="string">"niftyqueue"</span>,</div><div class="line">                                basicProperties: <span class="literal">null</span>,</div><div class="line">                                body: body);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Values here are hard coded which we don't want to do usually, check out https://aspnetmonsters.com/2016/01/Configuration-in-ASP-NET-Core-MVC/ for how to pull in configuration. Ignoring that we start by creating a conneciton factory with connection information for RabbitMQ. We then create a new queue (or ensure that it already exists) called &quot;niftyqueue&quot;. There are some other parameters in the queue creation we can get into in a future article.</p><p>Next we'll create an AddUser command and serialize it to JSON using good old Json.net then get the bytes. Rabbit messages contain a byte array so we have to do a tiny bit of leg work to get our CLR object into a form usable by the transport. JSON is the standard for everything these days so we'll go with the flow. In a real system you might want to investigate Protocol Buffer or something else.</p><p>Finally we perform a basic publish, sending our message. The Rabbit management site provides a super cool view of the messages being published on it</p><p><img src="http://i.imgur.com/odiUxPh.png" alt="The dashboard"></p><p>How cool is that? Man I like real time charts.</p><p>Shoving messages into the bus is half the equation, the other half is getting it out again. We want to have a separate process handle getting the message. That looks quite similar to the message sending.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">&#123;</div><div class="line">    Console.WriteLine(<span class="string">"starting consumption"</span>);</div><div class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory()</div><div class="line">    &#123;</div><div class="line">        HostName = <span class="string">"172.22.144.236"</span>,</div><div class="line">        Port = <span class="number">5672</span>,</div><div class="line">        UserName = <span class="string">"guest"</span>,</div><div class="line">        Password = <span class="string">"guest"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</div><div class="line">    &#123;</div><div class="line">        channel.QueueDeclare(queue: <span class="string">"niftyqueue"</span>,</div><div class="line">                                durable: <span class="literal">false</span>,</div><div class="line">                                exclusive: <span class="literal">false</span>,</div><div class="line">                                autoDelete: <span class="literal">false</span>,</div><div class="line">                                arguments: <span class="literal">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</div><div class="line">        consumer.Received += (model, ea) =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> body = ea.Body;</div><div class="line">            <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</div><div class="line">            <span class="keyword">var</span> deserialized = JsonConvert.DeserializeObject&lt;AddUser&gt;(message);</div><div class="line">            Console.WriteLine(<span class="string">"Creating user &#123;0&#125; &#123;1&#125;"</span>, deserialized.FirstName, deserialized.LastName);</div><div class="line">        &#125;;</div><div class="line">        channel.BasicConsume(queue: <span class="string">"niftyqueue"</span>,</div><div class="line">                                noAck: <span class="literal">true</span>,</div><div class="line">                                consumer: consumer);</div><div class="line"></div><div class="line">        Console.WriteLine(<span class="string">"Done."</span>);</div><div class="line">        Console.ReadLine();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Again we create the factory and the queue (some opportunity there for refactoring, me thinks). Next we start up an EventingBasicConsumer on top of the channel. There are a couple of different ways to consume messages none of which I really love. The eventing model seem the leas objectionable. You simply assign a delegate to the event handler and it will fire when a message is recieved.</p><p>In the next post I'll start taking a look at how we can layer <a href="http://masstransit-project.com/" target="_blank" rel="external">MassTransit</a>, a .NET message bus, on top of raw RabbitMQ. The result is a much more pleasant experience then simply hammering together raw RabbitMQ.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the last post we looked at how to set up RabbitMQ in a Windows container. It was quite the adventure and I&#39;m sure it was woth the time I invested. Probably. Now we have it set up we can get to writing an application using it.&lt;/p&gt;
&lt;p&gt;A pretty common use case when building a web application is that we want to do some background processing which takes longer than we&#39;d like to keep a request open for. Doing so would lock up an IIS thread too, which ins&#39;t optimal. In this example we&#39;d like to make our user creation a background process.&lt;/p&gt;
    
    </summary>
    
      <category term="messaging" scheme="http://www.westerndevs.com/categories/messaging/"/>
    
    
      <category term=".net" scheme="http://www.westerndevs.com/tags/net/"/>
    
      <category term="RabbitMQ" scheme="http://www.westerndevs.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title type="html">Creating a Rabbit MQ Container</title>
    <link href="http://www.westerndevs.com/docker/RabbitContainer/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/docker/RabbitContainer/</id>
    <published>2017-03-16T11:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I bought a new laptop, a Dell XPS 15 and my oh my is it snazzy. The thing I was most excited about was that I'd get to play with Windows containers again. I have 3 other machines in the house but they're either unsuitable for containers (OSX running Windows in parallels) or I've so toally borked them playing with early betas of containers they need to be formatted and reinstalled - possibly also thrown into the sun.</p><p>So when I found myself presented with the question &quot;how can we get into messaging in our apps for free?&quot; I figured I'd crack open the laptop and build something with MassTransit. I found that MassTransit supports running on RabbitMQ. Why that sounds like a perfect opportunity to deploy RabbitMQ to a container. Only problem was that I didn't really know how to do that.</p><a id="more"></a><p>In my heart I felt like running the installer wasn't quite the right way to go. I'd just copy the installation file into their destination. Problem is that RabbitMQ relies on erlang so I'd have to install that too. I build a docker file which looked something like</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</div><div class="line"><span class="keyword">ENV</span> rabbitSourceDir <span class="string">"RabbitMQ Server"</span></div><div class="line"><span class="keyword">ENV</span> erlngDir <span class="string">"C:/program files/erl8.2/"</span></div><div class="line"><span class="keyword">ENV</span> rabbitDir <span class="string">"C:/program files/RabbitMQ Server/"</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> <span class="variable">$&#123;rabbitSourceDir&#125;</span> <span class="variable">$&#123;rabbitDir&#125;</span></span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> erl8.2 <span class="variable">$&#123;erlngDir&#125;</span></span></div><div class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div></pre></td></tr></table></figure><p>In the erlngDir and rabbitDir I dumped the contents of an install of erlang and rabbitmq. Then I built the container with</p><p><code>docker build -t monsters/rabbitmq .</code></p><p>Didn't work. There must be something useful the installer actually does as part of installing files. So next I considered putting in the installers and running them when building the container. That seemed like a huge pain so I got to thinking about using chocolatey. At first I was pretty deadset against using choco my reasoning being that containers should be lightweight and have only one purpose. Having one time software like chocolatey on there which wouldn't ever be used seemed like it would make... whoever invented containers mad.</p><p>So attempt number two:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</div><div class="line"></div><div class="line"><span class="comment">#install chocolatey</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> @powershell -NoProfile -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span></div><div class="line"></div><div class="line"><span class="comment">#install rabbitmq</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> choco install -y rabbitmq</span></div></pre></td></tr></table></figure><p>That was enough to get Rabbit MQ installed. I still needed to expose some ports for RabbitMQ so I added</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">####### PORTS ########</div><div class="line">#Main rabbitmq port</div><div class="line">EXPOSE <span class="number">5672</span></div><div class="line">#port mapper daemon (epmd)</div><div class="line">EXPOSE <span class="number">4369</span></div><div class="line">#inet_dist_listen</div><div class="line">EXPOSE <span class="number">35197</span></div><div class="line">#rabbitmq management console</div><div class="line">EXPOSE <span class="number">15672</span></div></pre></td></tr></table></figure><p>Rabbit also likes to know where Erlang lives so some environmental variables for that aren't going to hurt.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#set the home directory for erlang so rabbit can find it easily</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_SERVICE_MANAGER_PATH <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div></pre></td></tr></table></figure><p>We could forward the RabbitMQ ports to our local machine but I like the idea of using the container as if it were a distinct machine so let's also enable the management UI from anywhere on the network. To do that we'll replace the default config file with one that has</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;loopback_users, <span class="string">[]</span>&#125;,</div></pre></td></tr></table></figure><p>in it. We can copy our new config file over the one in the container from the dockerfile and set up a variable to point Rabbit at it.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> RABBITMQ_CONFIG_FILE <span class="string">"C:\rabbitmq"</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"rabbitmq.config"</span>,<span class="string">" C:/"</span>]</span></div></pre></td></tr></table></figure><p>The config file looks like</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</div></pre></td></tr></table></figure><p>Finally we'll start the actual rabbit process as the default action of the container</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> RABBIT_MQ_HOME <span class="string">"C:\Program Files\RabbitMQ Server\rabbitmq_server-3.6.5"</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> <span class="string">"<span class="variable">$&#123;RABBIT_MQ_HOME&#125;</span>/sbin/rabbitmq-server.bat"</span></span></div></pre></td></tr></table></figure><p>Now you can log into the management portal using the guest/guest account.</p><p><img src="http://i.imgur.com/KvDVTb9.png" alt="Admin login"></p><p>It takes quite a while to start up the container and it took me close to 40 years to figure out building the container but it does save me installing rabbitmq on my local machine and makes experimenting with multiple instances pretty jolly easy.</p><p>The complete docker file is here:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</div><div class="line"></div><div class="line"><span class="comment">####### PORTS ########</span></div><div class="line"><span class="comment">#Main rabbitmq port</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">5672</span></div><div class="line"><span class="comment">#port mapper daemon (epmd)</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">4369</span></div><div class="line"><span class="comment">#inet_dist_listen</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">35197</span></div><div class="line"><span class="comment">#rabbitmq management console</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">15672</span></div><div class="line"></div><div class="line"><span class="comment">#set the home directory for erlang so rabbit can find it easily</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_SERVICE_MANAGER_PATH <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div><div class="line"></div><div class="line"><span class="comment">#install chocolatey</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> @powershell -NoProfile -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span></div><div class="line"></div><div class="line"><span class="comment">#install rabbitmq</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> choco install -y rabbitmq</span></div><div class="line"></div><div class="line"><span class="comment">#set up the path to the config file</span></div><div class="line"><span class="keyword">ENV</span> RABBITMQ_CONFIG_FILE <span class="string">"C:\rabbitmq"</span></div><div class="line"></div><div class="line"><span class="comment">#copy a config file over</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"rabbitmq.config"</span>,<span class="string">" C:/"</span>]</span></div><div class="line"></div><div class="line"><span class="comment">#set the startup command to be rabbit</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"C:/Program Files/RabbitMQ Server/rabbitmq_server-3.6.5/sbin/rabbitmq-server.bat"</span>]</span></div></pre></td></tr></table></figure><p>In my next post I'll get around to actually using Rabbit MQ because all the yaks are shaved now... I hope.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I bought a new laptop, a Dell XPS 15 and my oh my is it snazzy. The thing I was most excited about was that I&#39;d get to play with Windows containers again. I have 3 other machines in the house but they&#39;re either unsuitable for containers (OSX running Windows in parallels) or I&#39;ve so toally borked them playing with early betas of containers they need to be formatted and reinstalled - possibly also thrown into the sun.&lt;/p&gt;
&lt;p&gt;So when I found myself presented with the question &amp;quot;how can we get into messaging in our apps for free?&amp;quot; I figured I&#39;d crack open the laptop and build something with MassTransit. I found that MassTransit supports running on RabbitMQ. Why that sounds like a perfect opportunity to deploy RabbitMQ to a container. Only problem was that I didn&#39;t really know how to do that.&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.westerndevs.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.westerndevs.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Compile TypeScript into a Single File with SystemJS Modules with Gulp</title>
    <link href="http://www.westerndevs.com/javascript/How-to-Compile-TypeScript-into-a-Single-File-with-SystemJS-Modules-with-Gulp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/javascript/How-to-Compile-TypeScript-into-a-Single-File-with-SystemJS-Modules-with-Gulp/</id>
    <published>2017-03-14T13:47:22.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been messing around with TypeScript again for my <a href="https://blog.davidwesst.com/2017/03/Intital-Thoughts-on-Using-Phaser/" target="_blank" rel="external">game project</a> and wanted a module loader to consume the single file produced by the TypeScript compiler. This time around I decided to use SystemJS and figured I'd share the lessons I learned along the way.</p><h5>Sample Project</h5><p>If you're interested in playing with the code, you can checkout <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="external">this GitHub project</a> I setup just for that reason.</p><h5>Previous Post</h5><p>I also posted about doing the same sort of thing <a href="https://blog.davidwesst.com/2016/09/How-to-Compile-Typescript-into-a-Single-File-with-AMD-Modules/" target="_blank" rel="external">with AMD and RequireJS</a> complete with <a href="https://github.com/davidwesst/ts-project-template" target="_blank" rel="external">a GitHub sample project</a></p><h2>Project Breakdown</h2><p>Here's the gist of it. My project has the following requirements:</p><ol><li>Source code in TypeScript, organized in to multiple modules</li><li>Load external modules into application as dependencies</li><li>Transpile down to a single bundle file</li><li>Load the bundle in the browser</li></ol><p>It seems pretty straight forward, right? Plus, because I'm using TypeScript I figured this would be easy peezy lemon-squeezy with the <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="external">TypeScript compiler</a> and rich documentation.</p><p>As it turns out, it wasn't that simple.</p><h3>Wait. Where's GulpJS?</h3><p>It's in the sample project handling the transpiling the TypeScript through a task.</p><p>It's actually not required, but rather a convienience for keeping all my build tasks together. I just put it in the title, because it matches the previous post.</p><h2>Problem 1: Using an External Module</h2><p>I wanted to use <a href="https://momentjs.com/" target="_blank" rel="external">Moment.js</a> to help handle date objects with my code.</p><p>There were two parts to this:</p><ul><li>Getting it working in the development environment</li><li>Getting it bundled up with SystemJS.</li></ul><h3>Using it in Development</h3><p>I use <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>, which is a great TypeScript development environment.</p><p>Normally, you would use the <a href="https://www.npmjs.com/search?q=%40types" target="_blank" rel="external"><code>@types</code></a> collection of defintion files from the NPM which is wired up by default. For Moment, we need to break that.</p><p>The definition file for Moment is found in the library itself. Since I use NPM to handle all my dependencies, you just set this up in your <code>tsconfig.json</code> file.</p><p><img src="http://i.imgur.com/TyAgU0N.png" alt=""></p><p>Then, in code, we import it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span>;</div></pre></td></tr></table></figure><p>Remember: if your project is already using <code>@types</code> definition files, you'll need to add that folder to the <code>typeRoots</code> collection yourself.</p><h3>Bundling it Up</h3><p>Because we're using SystemJS, we need to do is configure it as a path to understand where to find the library when it gets referenced.</p><p>In the <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="external">sample project</a>, we do it in <code>script</code> tag on the HTML page, but you can do this in wherever you end up doing your SystemJS configuration.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SystemJS.config(&#123;</div><div class="line">    <span class="string">"paths"</span>: &#123;</div><div class="line">        <span class="string">"moment"</span>: <span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2>Problem 2: Loading the Bundle</h2><p>Making a bundle is easy. Consuming the bundle is something different.</p><h3>Making a Bundle</h3><p>If you're interested in bundling your code into a single file with the compiler, you're limited to AMD or SystemJS modules. This is configured in the <code>tsconfig.json</code> file included in <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="external">the sample project</a> with the module property. You can read more about it <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="external">here in the TypeScript Handbook</a>.</p><p><img src="http://i.imgur.com/gUGeHfI.png" alt=""></p><h3>Consuming the Bundle</h3><p>This is where I got stuck.</p><p>Now I have this fancy bundle, but I need to figure out how to consume it in my HTML page. The solution is pretty simple, but it took some research and some tinkering, but I got there.</p><p>Take a look at the <code>&lt;body&gt;</code> take of the HTML file:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"display"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- script will display content here --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.20.9/system.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        SystemJS.config(&#123;</div><div class="line">            <span class="string">"paths"</span>: &#123;</div><div class="line">                <span class="string">"moment"</span>: <span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        SystemJS.import(<span class="string">"game"</span>)</div><div class="line">            .then(<span class="function">(<span class="params"><span class="built_in">module</span></span>)=&gt;</span> &#123;</div><div class="line">                <span class="keyword">let</span> g = <span class="keyword">new</span> <span class="built_in">module</span>.Game(<span class="string">"display"</span>);</div><div class="line">                g.start();</div><div class="line">            &#125;)</div><div class="line">            .catch(<span class="function">(<span class="params">error</span>)=&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.error(error);</div><div class="line">            &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><p>I blame myself for getting stuck considering this sort all documented well in the <a href="https://github.com/systemjs/systemjs" target="_blank" rel="external">SystemJS documentation on GitHub</a>. Either way, I had issues finding solid resources about using bundles. Hopefull this can help someone else in the future.</p><h2>Conclusion</h2><p>My problems can be traced back to my lack of experience with JavaScript module loaders. And yes, I know that <a href="http://caniuse.com/#feat=es6-module" target="_blank" rel="external">ES6 Modules are coming</a>, but the browsers are a ways away from having a full implementation (except for Safari).</p><p>Until then, we'll be using TypeScript and <a href="http://babeljs.io/" target="_blank" rel="external">Babel</a> to help us get our modular JavaScript working in the browser.</p>]]></content>
    
    <summary type="html">
    
      I decided to move a TypeScript project from AMD modules (i.e. RequireJS) to SystemJS, still using Gulp. In this post, I walk you through the sample project I&#39;ve created and share the lessons I learned along the way.
    
    </summary>
    
      <category term="javascript" scheme="http://www.westerndevs.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="systemjs" scheme="http://www.westerndevs.com/tags/systemjs/"/>
    
      <category term="modules" scheme="http://www.westerndevs.com/tags/modules/"/>
    
      <category term="gulpjs" scheme="http://www.westerndevs.com/tags/gulpjs/"/>
    
  </entry>
  
  <entry>
    <title type="html">Issues are not free</title>
    <link href="http://www.westerndevs.com//Issues-are-not-cheap/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//Issues-are-not-cheap/</id>
    <published>2017-03-14T02:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Donald Belcham</name>
	  <email>donald.belcham@igloocoder.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>At <a href="https://particular.net/" target="_blank" rel="external">Particular Software</a> we manage all of our work flow using <a href="https://github.com/" target="_blank" rel="external">Github</a> repositories and the issues in them. These issues are what drive our work day-to-day, week-to-week and all the way into longer periods of time like years. If an issue doesn't exist for a topic, that topic doesn't exist within the organization.</p><p>A while back I declared in a meeting that &quot;Issues are cheap&quot;. The context around the comment was such that I was suggesting that we can just create more issues when we need to surface a topic. If that issue goes away (closed, lost, whatever) and the topic surfaces again, create another issue. It's cheap...all you have to do is a bit of typing.</p><p>My comment was met with the statement that, in fact, issues are not cheap. At first I was taken aback. My little world was being shaken by this statement. How could an issue not be cheap? It took mere minutes to create one. We don't get charged for disk space or issue count by Github. The person that made that comment went on to clarify their position by saying that &quot;Ideas are cheap&quot;.</p><p>I forget what the rest of that meeting was about. My mind was racing to rationalize this distinction. In my world issues and ideas were one and the same. But in this person's world they were clearly different. And it turns out they are right.</p><p>Ideas are the nascent concept that is represented within an issue. The issue is just the envelope that carries the message. Like a letter, the cost of writing a partially formed idea onto paper is trivial. A few minutes of your time, a pen and paper. This is cheap.</p><p>Unlike the writing on the paper however, envelopes have a lifetime cost associate with them. Mail needs to be picked up, transported, sorted, transported again, and delivered. Issues have this cost too. They must be triaged, prioritized, backlogged, re-prioritized, worked on, closed and retrospected on.</p><p>When you think about it from that standpoint, issues are <em>really</em> expensive. The thought that you can just create an issue doesn't remove the fact that they will incur a cost throughout their lifetime.</p><p>Probably the most insidious type of issue is the drive-by one. You get an idea, you create an issue and you just keep right on moving. You don't spend any time curating that idea, but instead push that workload to other people. Not only are you creating an expense for your process, but you're asking other people to pay it off for you. I had a roommate like that once. I'm sure you know how that ended.</p><p>It's important to remember that there can be hidden costs in the actions that we take. This was a bit of an eye opener to me. Having ideas isn't a bad thing. Spending the time to make the well formed so that they carry value that warrants the effort that they will require as issues is a good first step.</p>]]></content>
    
    <summary type="html">
    
      Thoughts about the hidden costs of actions
    
    </summary>
    
    
      <category term="process" scheme="http://www.westerndevs.com/tags/process/"/>
    
  </entry>
  
  <entry>
    <title type="html">Synchronize GitHub Repository with VSTS</title>
    <link href="http://www.westerndevs.com//Synchronize-GitHub-Repository-With-VSTS/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//Synchronize-GitHub-Repository-With-VSTS/</id>
    <published>2017-03-08T19:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dylan Smith</name>
	  <email>optikal@shaw.ca</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A fellow Western Dev - Justin Self - was telling me he uses GitHub for source control and VSTS for Work Items, and was wondering if it's possible to link the Work Items to GitHub commits.  If you're using VSTS for source control, you can do this easily by mentioning the Work Item ID in your commit message like so: Fixing Bug #123.  And VSTS will automatically create a link between the Work Item and the Git commit.  If you're using GitHub for source control, I don't believe there's an out of the box way to make this work.</p><p>We came up with an idea, what if we could synchronize the GitHub repository to a VSTS repository.  Then VSTS could see the commits and create the WI links.  So that's what we did, and this blog post explains how you can do the same thing.</p><p>First things first, you need to create a VSTS Build that points to your GitHub repo.  That's easy enough, as support is built right into VSTS builds to do this.</p><ol><li>Go to Builds and Create a New Definition (Note: I'm using the new build editing experience - which you can turn on for your account if you haven't already).</li><li>Choose the Empty Process option</li><li>Configure the Get Sources task to use GitHub as the source, and give the connection a name</li><li>Click Authorize using Oauth - at this step you may be prompted for your GitHub credentials and to Authorize VSTS to talk to GitHub</li><li>Pick the GitHub repo and branch - I just left this as master, but later we will set it up to synch all branches</li><li>Go to the Triggers tab and turn on Continuous Integration, and change the branch to include to * to trigger a build on commits/pushes to any branch</li><li>Under Options turn on Allow Scripts to Access Oauth token - we'll use this later</li><li>Save and Queue a build to check if it works</li></ol><p><img src="http://imgur.com/YzvjdpQ.png" alt="New Build Definition"></p><p><img src="http://imgur.com/bnugm3O.png" alt="Select Build Template"></p><p><img src="http://imgur.com/ms364Zw.png" alt="Configure Source Repo"></p><p><img src="http://imgur.com/LSQDzg2.png" alt="GH Repo Configured"></p><p><img src="http://imgur.com/w8bYFxi.png" alt="Configure CI"></p><p><img src="http://imgur.com/Z6Eei4O.png" alt="Configure OAuth"></p><p><img src="http://imgur.com/PxGFis0.png" alt="Test Build Output"></p><p>Alright, now we have a build that triggers on every GitHub commit/push, and will download the GH repo to the build agent.  The next step is to make it push any and all changes into the VSTS repo.  To do this I shamelessly copied a snippet of bash from StackOverflow.  There is a built-in build task to run a bash script - Shell Script - but that requires you to point it to a script inside your repo, which is more work than I wanted.  I just want to write the few lines of bash directly in the build.</p><p><img src="http://imgur.com/OQCpY7W.png" alt="Default Shell Task"></p><p>Fortunately there is a VSTS extension in the marketplace that lets us do exactly this: https://marketplace.visualstudio.com/items?itemName=tsuyoshiushio.shell-exec</p><p><img src="http://imgur.com/bSzWWig.png" alt="Extension Shell Task"></p><p>Once I installed that extension into my VSTS account, I can now add it as a task to my build and tell it the bash script I want it to run:</p><p><img src="http://imgur.com/C1tVW5x.png" alt="Install Extension"></p><p><img src="http://imgur.com/SmKJlax.png" alt="Confirm Extension"></p><p><img src="http://imgur.com/R8zE0ss.png" alt="Extension Installed"></p><p><img src="http://imgur.com/wJZmhuE.png" alt="Add New Task"></p><p><img src="http://imgur.com/ErwFNbF.png" alt="Configure Shell Task"></p><p>Those 3 lines of bash using the git command-line are all it takes.  The one tricky bit to figure out was how to make sure it synchronized all branches - even newly created branches - in github into VSTS.  The trickery in line 1 and 3 does that.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git branch -r | grep -v '\-&gt;' | while read remote; do git branch --track "$&#123;remote#origin/&#125;" "$remote"; done</div><div class="line">git remote add vsts https://pokerleaguemanager.visualstudio.com/DefaultCollection/_git/GitHubSync</div><div class="line">git branch -r | grep -v '\-&gt;' | while read remote; do git -c http.extraheader="AUTHORIZATION: bearer $SYSTEM_ACCESSTOKEN" push -u vsts "$&#123;remote#origin/&#125;"; done</div></pre></td></tr></table></figure><p>That script is doing a few things:</p><ol><li>Loop through all branches in origin and create local branches to track them. Note: Because GH was setup as the repo for this build, VSTS has already created the git repo, setup origin to point to GH, and downloaded the repo to the build agent.</li><li>Add the VSTS repo as a new remote called vsts</li><li>Loop through all branches and push each one to VSTS</li></ol><p>The stuff with $SYSTEM_ACCESSTOKEN in line 3 is accessing an environment variable that contains an Oauth token that can be used to communicate with VSTS - in a previous step where we set the option in the VSTS build to make Oauth token available to scripts, is what allows this to work.</p><p>There's one thing left to do to make this all work - we need to grant the build service account access to the VSTS repo.  We can do this in the repo security screen like so:</p><p><img src="http://imgur.com/eCYpGEC.png" alt="Configure Security"></p><p>Now you can push some commits to GitHub and/or create a new branch, and the VSTS build should automatically trigger and synch the VSTS repo up almost immediately.  If everything is working you should see build output that looks something like this:</p><p><img src="http://imgur.com/E3GhdJI.png" alt="Successful Build Output"></p>]]></content>
    
    <summary type="html">
    
      Step by step guide to do an automated continuous one-way synchronization from a GitHub repository to a VSTS repository.
    
    </summary>
    
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="github" scheme="http://www.westerndevs.com/tags/github/"/>
    
      <category term="devops" scheme="http://www.westerndevs.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title type="html">Paper Cuts - My Review of PaperCall.io</title>
    <link href="http://www.westerndevs.com/conference/services/Paper-Cuts-My-Review-Of-PaperCall/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/conference/services/Paper-Cuts-My-Review-Of-PaperCall/</id>
    <published>2017-03-07T16:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>D&#39;Arcy Lussier</name>
	  <email>darcy.lussier@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h2>Conference Time</h2><p>My next <a href="http://www.prairiedevcon.com" target="_blank" rel="external">Prairie Dev Con</a> is coming up June 6-7 2017, and this year I decided to use a service that's become very popular for speaker submissions called <a href="http://www.papercall.io" target="_blank" rel="external">PaperCall.io</a>. For speakers this service is fantastic - for free you can create a profile and add any number of talk abstracts. Then when a call for speakers opens, you can easily with just a few clicks submit any number of talks.</p><p>People can create events and open call-for-papers (CFP's) for free as well. Conferences are then included in their Open CFP list, with certain paid-level events getting &quot;featured&quot; treatment at the top of the list.</p><p>This creates a very attractive ecosystem for speakers and events, and removes the need for conferences to build their own system or use tools (i.e. SurveyMonkey) that weren't built specifically for conference session submission.</p><p>So that's the backdrop for the rest of this post. I went in very much looking forward to using PaperCall.io and I'm still very optimistic about the platform! But there are some crucial pain points that need to be addressed before I'd consider using it again for one of my conferences.</p><h2>Issue 1 - The Grid</h2><p>When you have people submit their talks, the conference view displays them in a grid as per the image below.</p><p><img src="https://darcyblogimages.blob.core.windows.net/wdimages/PC_Grid.JPG" alt="&amp;quot;PaperCall Grid&amp;quot;"></p><p>I want to point out a few things about the grid.</p><h3>20 Record Per Page Limit</h3><p>There's paging, but it limits you to 20 records per page. You can't change this to see larger number or even all.</p><h3>No Sorting By Speaker</h3><p>The headings you see are what you get. You can't do a sort by Speaker for instance. You also can't add your own columns so if you wanted to sort based on location you're out of luck.There is a search box, but that's only useful once you know what you're looking for (i.e. speaker name, location, etc.).</p><h3>No Bulk Status Update for Free Tier</h3><p>Talks can be Submitted, Accepted, Rejected, or Waitlist (Declined is reserved for speakers who are accepted but decline after the fact I guess). Setting a talk to one of those settings via the drop list actually triggers a post back (let me check...yes, we're in 2017 here). So if you have 10 talks that you want to set as accepted, you have to manually one at a time set their drop list value to Accepted. This feature is listed in the Professional tier, but I don't know how its implemented.</p><h3>No Filtering</h3><p>You can't set filters on the data either.</p><h3>Rating Style Doesn't Display</h3><p>I selected the &quot;Simple&quot; rating style (yes, maybe, no) compared to Five Star, but the Five Star is what was displayed in my grid.</p><h2>Issue 2 - Downloading Submissions</h2><p>So why not just download the data and manipulate it outside of PaperCall? If the service is supposed to be a one-stop-shop, then I shouldn't need to. I should be able to manage my speakers however I want within the application. But since we're limited to the grid as it is, exporting the data is the next best thing. Unfortuntaely you can only get to your data if a) you're on the paid tier, or b) you've identified talks as being Accepted. That's right - you have to go through the grid interface and assign statuses before you can export your own data (if you're using the free tier). Also note that the only download option you have is for Accepted talks, not Rejected or Waitlisted. If you're on the paid tier there's an API you can connect to...more on the pricing and features of the tiers later though.</p><h2>Issue 3 - Speaker Communication</h2><p>I'm a fan of having an end-to-end ecosystem for speakers and conference organizers, but the speaker communication suffers from a few clunky parts.</p><h3>No Email Contact</h3><p>Unless the speaker specifically puts their email address or Twitter handle into their profile, there's no way to communicate outside of the PaperCall &quot;Communications with Speaker&quot; mechanism. One of the problems with this is its tied ot a speaker AND a talk. So if you want to communicate with a speaker about 3 of their talks, you either pick one talk and include all the communication there (which ties it to the selected talk) or you break it up over the three talks. You get an email notification about the communication, which has a From that looks like this...</p><p>reply+ASERWQREWQREWQGASGAERWFSAFDFSAGHG343243242SFAFwerwfewf223432FRSDFDSFSF23GFSGWGWGEWFEWDE2FEWGWGWGWEFEWFEWFEWGEWGEWGEWGF32432432FEWFEWFFR32R32FSF==@mg.papercall.io</p><p>(that's not a real one, and its actually a longer address)</p><p>I find it looks messy and unprofessional.</p><h3>No Speaker Search for Organizers</h3><p>As a conference organizer I have no way to search the speaker profiles. They aren't public (at least at the free tier), and unless a speaker sends you their URL there's no way to get to it. I understand that this model puts the power in the hands of the speakers and prevents conferences from blanketing speakers with harassing communication about their event - I'm on board with that. But if I have a speaker who's submitted a talk to my event, it would be great to be able to see all the talks that speaker could present. Perhaps I really like the speaker but their submitted talk isn't a right fit, or has been filled by someone else already, or whatever. It would be great to see other talk options. Currently I would have to request that via the speaker communication channel mentioned above.</p><h3>Accepted/Rejected Communication Confusion</h3><p>Once you've identified talks as Accepted or Rejected you can then send an email message to the speakers letting them know. There's an issue though - you're accepting or rejecting the talk, not necessarily the speaker. I could have a speaker have 2 talks accepted but 3 rejected. With how the email works, that speaker would get &quot;Unfortunately your talk was not picked. Thanks for applying, and I hope we see you as an attendee (that's a paraphrase to the stock verbiage sent out).&quot; but then they'd get &quot;Congratulations, your talk was picked&quot; as well! That's confusing. I imagine speakers get multiple emails as well, since one seems to be sent for each session submitted. UGH!</p><p>The way I avoided this was to assign rejected sessions for speakers who were actually accepted into the Waitlist group. Definitely a workaround/hack solution.</p><h3>Speaker Headshots Default to Gravatar</h3><p>Although the interface seems to suggest that you can upload your own headshot, my Accepted Talk export provided a bunch of links to headshots that defaulted to the Gravatar for the person (if they don't have one, its the stock imgage). Not the worst thing in the world, but not the most ideal either.</p><h2>Issue 4 - Pricing</h2><p>There's three tiers for PaperCall - Community (Free), Professional ($499 USD/event), and Custom. I'll ignore Custom for now and focus on the Community and Professional.</p><p><img src="https://darcyblogimages.blob.core.windows.net/wdimages/PC_Pricing.JPG" alt="&amp;quot;PaperCall Pricing&amp;quot;"></p><p>Over Community, Pro provides:</p><ul><li>15 more organizers</li><li>Unlimited submissions</li><li>Read-Only API Access + Webhooks</li><li>Bulk Tagging/Submission Management</li><li>Privately Tag Your Submissions</li><li>Added promotion on the homepage</li><li>24 Hour email support</li></ul><p>So for $500 I still have to use the web site to manage my data, as the API is read-only. I can add private tags, but that means I can filter by search only and not in the grid. Also I'm thinking there's no way to bulk-tag talks.</p><p>Let me frame this in the context of Prairie Dev Con. I typically get under 200 sessions submitted. I'm the only organizer (even if I added more organizers, I can't see it going beyond 5). The <em>only</em> thing $500 gets me is the read-only API so I can export my data and 24 hour email support. This is a tough justification.</p><p>If the grid had a better interface, I was able to better communicate with speakers, and I could export my data whenever I wanted to work on it offline, I would absolutely pay $200 per event for the service...maybe even $300. And I think there are MANY conferences that are mid-range that would be open to that tier level. As it stands now, the mid-range conferences are likely looking to make the Free tier work and the mega conferences that are using the paid tier are getting a crazy deal.</p><h2>In Conclusion</h2><p>I love the idea of PaperCall. Speakers are on board, and through PaperCall I've had speakers submit that normally wouldn't have even known about my conference. But its definitely in need of some improvements, especially at the price points they've listed. All of my criticisms in this post are meant to share how to make the product better because I <em>want</em> PaperCall to be better!</p><p>But let's be honest, CFP isn't a complicated business process and there's no reason a competitor could come up with a better process. It's in PaperCall's best interest to listen to their customers, especially those willing to become paying customers if only certain functionality is added. We'll see if any advancement is made come later this Spring when I open up PrDC Deliver CFP.</p>]]></content>
    
    <summary type="html">
    
      My experience using PaperCall.io, a conference session submission service.
    
    </summary>
    
      <category term="conference" scheme="http://www.westerndevs.com/categories/conference/"/>
    
      <category term="services" scheme="http://www.westerndevs.com/categories/conference/services/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Initial Thoughts on Using Phaser</title>
    <link href="http://www.westerndevs.com/javascript/typescript/new-post-Initial-Thoughts-on-Phaser/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/javascript/typescript/new-post-Initial-Thoughts-on-Phaser/</id>
    <published>2017-03-07T11:00:00.000Z</published>
    <updated>2017-03-07T11:00:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I'm not a game dev, but have always wanted to make a video game. I've started and stopped so many project over the years, that I have seriously lost count.</p><p>With the new year and a fresh mind, I decided to take a stab at it again, this time focusing on just getting something done rather than getting something <em>done right</em> as a sort of side project.</p><p>It's been about two months since I've started, and I have something basic working (although I'm not willing to share it yet) and I thought I would share my thoughts on Phaser, the framework I decided to use to help me build my game.</p><h2>Techincal Requirements</h2><p>Before we talk about the framework, let's talk about the game itself as you'll need to know what I'm building to understand why I chose the framework.</p><p>Here's the technical rundown:</p><ul><li>2D</li><li>Top-Down Camera</li><li>Tile-based graphics</li><li>Using <a href="http://mapeditor.org" target="_blank" rel="external">Tiled</a> for maps</li><li>Gamepad support for player input</li><li>TypeScript support</li></ul><p>If you think back to the old NES (Nintendo Entertainment System) and SNES (Super Nintendo Entertainment System) days, games like Final Fantasy, and the Legend of Zelda are good examples of the look of the game.</p><p><img src="http://i.imgur.com/0LLlYoxb.png" alt="&amp;quot;The Legend of Zelda for the NES&amp;quot;"></p><h3>Where did you come up with these Requirements?</h3><p>I decided to make a game that I wanted to play. That's really about it.</p><p>I have plenty of ideas floating around in my head, but I went with one that had a look and feel of what I like to play.</p><h3>Why TypeScript Support?</h3><p>Although I'm a JavaScript nut, if find that TypeScript combined with the right tooling (Visual Studio Code) helps you learn an API thorugh code completion. Plus, it's compiler helps catch errors along the way without losing the versatility that comes with JavaScript. Since I'm learning a whole new domain (i.e. game development) I wanted to focus more on the learning practices and patterns, rather than worrying about the syntax.</p><p>We'll get into more of this later.</p><h3>Wait! What about the Game Design?!</h3><p>That is a whole other conversation and series of posts that I may share if I ever get this project done. For now, they don't really apply as we're sticking to the technical side of the project.</p><p>(Although if you're interested, ping me on <a href="https://twitter.com/davidwesst" target="_blank" rel="external">Twitter</a> to let me know)</p><h2>So, Why Phaser?</h2><p>I did quite a bit of research on this before going with Phaser. The two biggest contenders being <a href="http://babylonjs.com/" target="_blank" rel="external">BabylonJS</a> and the <a href="http://www.createjs.com/" target="_blank" rel="external">CreateJS Suite</a>.</p><p>At the end of the day, Phaser not only did everything I needed it to do, but it  has a very strong community of support through <a href="http://html5gamedevs.com/" target="_blank" rel="external">HTML5GameDevs</a>, and it does everything I need it to do. Plus, I had already tinkered with it a bit so that definitely gave it some extra points during the selection project.</p><h2>The Highlights</h2><p>Now that I'm beyond the &quot;tinkering&quot; phaser, and into building a full game, I think I can weigh-in on the pros and cons I've come across thus far. I'm not far enough along to talk about performance, but for my little game project it seems to be running smoothly without fail.</p><h3>Support is Amazing</h3><p>As mentioned previously, the support from <a href="http://html5gamedevs.com/" target="_blank" rel="external">HTML5GameDevs</a> is great. The forums are active, and there is even a live chat for people that are registered.</p><p>I've only asked one question so far, and it was answered very quickly. The rest of the time, I search the forums for my question and 99/100 times I'll find an answer.</p><p>The <a href="https://phaser.io/examples" target="_blank" rel="external">examples section</a> of the Phaser website gives links great code snippets that help wrap your brain around how to do things with the framework.</p><p>Lastly, as they prepare Phaser v3, the community has taken on Phaser v2 and has continued to release patches to the framework.</p><h3>Focuses on 2D</h3><p>I'm just starting to learn game development and, on top of that, I'm doing this in my spare time.</p><p>When I get stuck I don't know what I don't know, but I can generally find my way around questions and articles that discuss 2D games. Since Phaser focuses on 2D, it makes consuming the API much more familiar to me rather that navigating my way around 3D game API (i.e. BabylonJS) that bring a whole new vocabulary to the table that I have to learn.</p><h3>Phaser-CE is What You're Looking For</h3><p>It appears that they fixed it on the website, but when I was starting on this project there was no mention of <em>Phaser-CE</em> on the homepage, and so I thought version 2.6.2 was the latest and greatest.</p><p>It turns out, that was incorrect.</p><p>As you'll see <a href="https://phaser.io/download/stable" target="_blank" rel="external">here on the Phaser site</a>, version 2.6.2 was the last officially supported release, while v2.7.x is the community edition that is supported by those fine community members I mentioned earlier. So, when you install your dependency with <code>npm install phaser</code> you are installing an old version of the framework. You want <code>npm install phaser-ce</code>.</p><p>The change was minimal, considering it's the same framework. It just took me for a loop as I only figured this out as I tried to submit a pull request, only to find out that I was using the wrong version of Phaser.</p><h3>JavaScript First, TypeScript Second</h3><p>I wanted TypeScript support up front because I knew it would help me get into the Phaser APIs. Now that I'm becoming more familiar with everything, I feel as though I should have toughed it out and stuck with JavaScript and Babel.</p><p>The TypeScript definition files are part of the library and are not available on through <a href="https://www.npmjs.com/package/@types/npm" target="_blank" rel="external"><code>@types</code></a> on the NPM. From what I can gather, they are done by hand. This isn't a big deal considering they work fine, but it makes me question their accuracy, especially not being avaialble through <code>@types</code>.</p><h2>Conclusion</h2><p>I don't regret choosing Phaser as it met all my short term goals and I'm still learning a lot about game development and Phaser (and it's community) is helping me with that.</p><p>Next time around, assuming Phaser v3 isn't done yet, I would proabably go with <a href="http://babylonjs.com/" target="_blank" rel="external">BabylonJS</a> as it gives you everything Phaser does, but adds some pretty powerful tooling and 3D support along with it, and has the TypeScript support I expect.</p><p>All in all, Phaser has been a great place to start with game development. I highly recommend it.</p>]]></content>
    
    <summary type="html">
    
      As a side project, I started making another JavaScript-based video game and decided to go with Phaser as my framework of choice. Here are my initial thoughts about Phaser after using it on my project for the past two months.
    
    </summary>
    
      <category term="javascript" scheme="http://www.westerndevs.com/categories/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/categories/javascript/typescript/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="phaser" scheme="http://www.westerndevs.com/tags/phaser/"/>
    
  </entry>
  
  <entry>
    <title type="html">Acceptance Testing With Legacy Databases</title>
    <link href="http://www.westerndevs.com/Testing/Acceptance-Testing-With-Legacy-Databases/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Testing/Acceptance-Testing-With-Legacy-Databases/</id>
    <published>2017-01-22T15:04:33.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Amir Barylko</name>
	  <email>amir@barylko.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>One of the most common <em>pain points</em> of implementing automated acceptance testing is the interaction with the database.</p><p>For greenfield projects you can plan from day one how to setup the test to easily include the database interaction but with legacy projects it is not always that easy.</p><a id="more"></a><h2>Dealing with legacy code</h2><p>Let’s face it: <strong>Testing is hard</strong>.</p><p>I do not mean it is hard to understand. The complexity is not inherently attached to the concept of testing but (I found in most cases) a by-product of <code>tooling + environment + database</code>.</p><p>That is the reason why I think adding testing to a legacy system can be quite challenging. We did not choose the tooling, nor the database nor did we set up the environment to be test friendly.</p><p>So where to start with testing?</p><p>One option is to start by adding <em>unit tests</em> into the codebase, but that could be a paramount effort considering that quite often the legacy code was not written with testability in mind. A lot of change, a lot of risk.</p><p>On the other hand <em>acceptance testing</em> is the perfect candidate.</p><p>Why? <em>Acceptance Testing</em> puts the focus on testing end to end. Given a certain input, run it through the system and make sure the output is what we expect to see.</p><p>It works for web applications, web apis, libraries, desktop applications, you name it. And also, in many cases we will not need to modify the code behaviour at all.</p><p>All that is fine and dandy, but what about the database? We may be able to create a local copy of the database to test, but what are we going to do with data generation, logic stored in the database, etc?</p><h2>A perfect world</h2><p>Let’s pause and imagine for just a few paragraphs that instead of using a database the <em>system under test</em> uses an HTTP API to get all the information it needs.</p><p>If that was the case then we could implement acceptance testing very easily by doing something like the following pseudo algorithm:</p><ul><li>Launch a fake HTTP server listening on the URI expected by the system.</li><li>Create some data that will work for my test case.</li><li>When the application does the call, return that data.</li><li>Validate the case worked as expected.</li><li>Shutdown the server.</li></ul><p>Neat right? This approach has many benefits.</p><p><em>First</em>, we keep modifications of the system under test to the bare minimum.</p><p><em>Second</em>, there are lots of tools in multiple languages that can help us with such a task. We can choose the same environment or one that is completely different. Whichever works better for our needs.</p><p><em>Third</em>, these steps can be easily automated and ran when it is convenient and useful.</p><p>Ok, the break is over.</p><h2>Back to reality</h2><p>To change all the database related code to start using some kind of web API could be a huge risk and effort.</p><p>Such amount of refactoring may cripple your project for a long time, and not even produce a positive result.</p><p>Having said that, what if we use the same idea but with a small twist?.</p><h2>Leave the database code alone</h2><p>Well, not alone alone, but let’s hide it behind a very thin wrapper.</p><p>The goal is that instead of directly hitting the database (or whichever function or class is being used) we are going to call a proxy that is sole job is to forward the call to the same code we were using before.</p><p>The main difference is that the <em>Proxy</em> talks about the domain. If we were fetching some <code>Customer</code> object from the database, then the proxy will have a way to do so and return a <code>Customer</code> collection.</p><p>So the database interaction, <em>ORM</em> mapping, etc, stays hidden.</p><p>To illustrate the idea with a bit of code, let’s imagine a class in charge of finding customers in order to show them:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomersController</span> &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> CustomerView <span class="title">index</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    String query = <span class="string">"select NAME, ADDRESS, BIRTH_DATE from CUSTOMERS"</span>;</div><div class="line"></div><div class="line">    ResultSet rs = dbConnection.createStatement().executeQuery(query);</div><div class="line"></div><div class="line">    List&lt;Customer&gt; customers = <span class="keyword">new</span> ArrayList&lt;Customer&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(rs.next()) &#123; customers.<span class="keyword">add</span>(loadCustomer(rs)); &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomerView(customers);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> Customer <span class="title">loadCustomer</span>(<span class="params">ResultSet rs</span>) </span>&#123; ...... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The first step would be to create an <em>interface</em> and abstract the query to the database:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">CustomersQuery</span> &#123;</div><div class="line">  <span class="function">List&lt;Customer&gt; <span class="title">getCustomers</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>And a default implementation that does the database query:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DatabaseCustomerQuery</span> <span class="title">implements</span> <span class="title">CustomersQuery</span> &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    String query = <span class="string">"select NAME, ADDRESS, BIRTH_DATE from CUSTOMERS"</span>;</div><div class="line"></div><div class="line">    ResultSet rs = dbConnection.createStatement().executeQuery(query);</div><div class="line"></div><div class="line">    List&lt;Customer&gt; customers = <span class="keyword">new</span> ArrayList&lt;Customer&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(rs.next()) &#123; customers.<span class="keyword">add</span>(loadCustomer(rs)); &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> customers;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> Customer <span class="title">loadCustomer</span>(<span class="params">ResultSet rs</span>) </span>&#123; ...... &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><p>And the original class now it uses the interface:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomersController</span> &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> CustomerView <span class="title">index</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomerView(<span class="keyword">this</span>.customersQuery.getCustomers());</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><h2>Mock the proxy</h2><p>When testing the system, the library in charge of <em>proxying</em> the interaction to the database could be switched to a different one that does an HTTP call to a URI and returns the result based on the response.</p><p>By using an HTTP call, then the test will pose as the expected source of data and respond based on the needs of each case.</p><p>Following the previous example, we could implement a class that gets the customers data using an HTTP call to the test URI.</p><p>The example uses <a href="https://github.com/FasterXML/jackson" target="_blank" rel="external">Jackson</a> to load the json content.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpCustomersQuery</span> <span class="title">implements</span> <span class="title">CustomerQuery</span> &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(testUrl + <span class="string">"/customers"</span>);</div><div class="line">    HttpResponse response = httpclient.execute(httpGet);</div><div class="line"></div><div class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">    List&lt;Customer&gt; customers = mapper.readValue(response.getEntity().getContent(), <span class="keyword">new</span> TypeReference&lt;List&lt;Customer&gt;&gt;()&#123;&#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> customers;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The last step, when running the tests we will launch the HTTP server to serve the JSON customers:</p><p>Here I am using <a href="http://wiremock.org/" target="_blank" rel="external">WireMock</a> to set up the response.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@<span class="function">Test</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomersView</span>(<span class="params"></span>)  &#123;</div><div class="line"></div><div class="line">  List&lt;Customer&gt; expected = createSomeFakeCustomers();</div><div class="line"></div><div class="line">  String serializedCustomers = JSON.write(expeted);</div><div class="line"></div><div class="line">  stubFor(<span class="keyword">get</span>(urlEqualTo(<span class="string">"/customers"</span>))</div><div class="line">            .willReturn(aResponse()</div><div class="line">                .withStatus(<span class="number">200</span>)</div><div class="line">                .withHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">                .withBody(serializedCustomers)));</div><div class="line"></div><div class="line">  <span class="comment">// run the system under test here</span></div><div class="line">  runSystem();</div><div class="line"></div><div class="line">  List&lt;Customer&gt; actual = getCustomersShown() ; <span class="comment">// get the customers that are being shown</span></div><div class="line"></div><div class="line">  assertThat(expected, <span class="keyword">is</span>(actual));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3>Why bother with HTTP?</h3><p>We could implement the “fake” version of the library as:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpCustomersQuery</span> <span class="title">implements</span> <span class="title">CustomerQuery</span> &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getCustomers</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    String jsonContent = loadResourceFrom(<span class="string">"/resources/customers.json"</span>);</div><div class="line"></div><div class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">    List&lt;Customer&gt; customers = mapper.readValue(jsonContent, <span class="keyword">new</span> TypeReference&lt;List&lt;Customer&gt;&gt;()&#123;&#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> customers;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>However this approach may limit our ability to separate completely the acceptance test implementation from the system we want to test.</p><p>Having an external server to pose as data source provides flexibility and could simplify quite a bit the test implementation because it gives us the freedom to choose any tool that we may see fit to do the actual implementation.</p><p>This technique could simplify manual testing as well. The test scenario data could be setup, then the system launched and wait for manual confirmation to ensure it works as expected.</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Given</span> the customers are loaded             <span class="comment"># All the customers in the JSON file are loaded</span></div><div class="line"><span class="keyword">When</span> listing the customers                 <span class="comment"># Launch the system to show the customers</span></div><div class="line"><span class="keyword">Then</span> every customer name shows in the list <span class="comment"># Ensure all customers are shown</span></div></pre></td></tr></table></figure><h2>Change impact</h2><p>The change will be localized. Modifying a particular functionality of the system does not affect how other parts of the system work nor major refactoring effort is required.</p><p>Of course there will be some code change, but hopefully very small and just to hide the database related code behind a very thin wrapper.</p><p>Once the acceptance tests start to roll, each new test will be easier and easier.</p><p>Not only the system will have a new safety net that becomes larger and larger with every test, but the quality will grow as well.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the most common &lt;em&gt;pain points&lt;/em&gt; of implementing automated acceptance testing is the interaction with the database.&lt;/p&gt;
&lt;p&gt;For greenfield projects you can plan from day one how to setup the test to easily include the database interaction but with legacy projects it is not always that easy.&lt;/p&gt;
    
    </summary>
    
      <category term="Testing" scheme="http://www.westerndevs.com/categories/Testing/"/>
    
    
      <category term="Acceptance Testing" scheme="http://www.westerndevs.com/tags/Acceptance-Testing/"/>
    
      <category term="Unit Testing" scheme="http://www.westerndevs.com/tags/Unit-Testing/"/>
    
      <category term="Legacy code" scheme="http://www.westerndevs.com/tags/Legacy-code/"/>
    
      <category term="jackson" scheme="http://www.westerndevs.com/tags/jackson/"/>
    
      <category term="WireMock" scheme="http://www.westerndevs.com/tags/WireMock/"/>
    
  </entry>
  
  <entry>
    <title type="html">ASP.NET Core Training in Calgary, Alberta</title>
    <link href="http://www.westerndevs.com/Training/ASP-NET-Core-Training-in-Calgary-Alberta/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Training/ASP-NET-Core-Training-in-Calgary-Alberta/</id>
    <published>2017-01-16T15:54:30.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>James Chambers</name>
	  <email>james@jameschambers.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>For some folks, working independently and plowing through a book chapter-by-chapter is the best way for them to learn. If you're in that camp, I've got just the book for you.</p><p><a href="http://click.linksynergy.com/link?id=hKA2dsKjtSk&amp;offerid=145238.2497285&amp;type=2&amp;murl=http%3A%2F%2Fwww.informit.com%2Ftitle%2F9781509304066" target="_blank" rel="external"><img src="https://jcblogimages.blob.core.windows.net:443/img/2017/aspnetcore_book.png" alt=""></a></p><p class="article-more-link">    <a href="http://click.linksynergy.com/link?id=hKA2dsKjtSk&offerid=145238.2497285&type=2&murl=http%3A%2F%2Fwww.informit.com%2Ftitle%2F9781509304066" target="_blank" rel="external">Buy the book</a></p><h2>Want to get Hands-On?</h2><p>For others, in-person training is the most effective way to dive into new content. Having someone in the same room who knows how to navigate a new release of software, framework and tooling and all the related changes is a powerful asset while you learn.</p><p>That said, we are pleased to announce our first Monsters workshop in Calgary, Alberta. Please join us in Calgary as we mash on changes, approaches, caveats and wins for all things in ASP.NET Core.</p><p>Already interested? You can <a href="https://training.aspnetmonsters.com" target="_blank" rel="external">sign up today</a> and join us in February from the 22nd to the 24th.</p><p class="article-more-link">    <a href="https://training.aspnetmonsters.com" target="_blank" rel="external">Register for training</a></p><h2>We're Going To Learn a Lot Together!</h2><p>My good friends <a href="https://twitter.com/dave_paquette" target="_blank" rel="external">Dave</a>, <a href="https://twitter.com/stimms" target="_blank" rel="external">Simon</a> and I have been mashing on ASP.NET Core since its inception. This workshop is the culmination of what we have learned along the way and applied in our projects, samples and through our videos on Microsoft's Channel 9. We're taking you deep into three fully-packed days that walk you through various stages of application development. Our number one priority is to equip you with the skills you need to start on a Core MVC project and transition your existing skills to the new tooling.</p><p>We expect you to be familiar with web technologies and to be comfortable in Visual Studio. Beyond that, here is some of what you can expect:</p><ul><li>A solid foundation of ASP.NET Core with which you can build MVC applications</li><li>Exposure to configuration, testing and extensibility</li><li>Tips, samples and exercises that will guide you as you build software in the cloud</li><li>An understanding of data access using the latest version of Entity Framework</li><li>Access to the labs and source code used in the workshop</li></ul><p>Be sure to check out our training site to <a href="https://training.aspnetmonsters.com" target="_blank" rel="external">view the full curriculum</a>.</p><h2>Location, Location, Location</h2><p>Calgary and area is home to some of the most beautiful sights in Canada, with a mountain range full of winter sports about an hour away, skiing at Calgary's Olympic Park as well as NHL and WHL Hockey on the edge of downtown. There are great restaurants, museums, art exhibits and theatre, along with with a great night life including brew pubs, world-famous Canadian poutine and an assortment of comedy clubs.</p><p>If you're joining us from outside the area, we highly recommend adding on a few days to your trip so that you can explore the area. If you are from outside of Canada, <b>you will need to get a valid International Driver's Permit</b> from your country before you leave if you wish to rent a car when you're here (handy for exploring!).</p><p><b>Can't join us in Calgary?</b> No problem. Just hit the registration page and sign up for our email list to be notified of other upcoming training cities.</p><p>Happy New Year, and happy coding!</p><p class="article-more-link">    <a href="https://training.aspnetmonsters.com" target="_blank" rel="external">Register for training</a></p>]]></content>
    
    <summary type="html">
    
      The first ASP.NET Monsters workshop is happening in Calgary from Feb 22-24, 2017. Attendance is mandatory
    
    </summary>
    
      <category term="Training" scheme="http://www.westerndevs.com/categories/Training/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="Training" scheme="http://www.westerndevs.com/tags/Training/"/>
    
  </entry>
  
  <entry>
    <title type="html">Hour of Code Challenge - Completed</title>
    <link href="http://www.westerndevs.com/Community/Hour-of-Code-Challenge-Completed/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Community/Hour-of-Code-Challenge-Completed/</id>
    <published>2016-12-14T00:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In case you missed it, I threw down the gauntlet to my fellow WesternDev members in September, stating that <a href="https://code.org/help/" target="_blank" rel="external">I will donate $100 CAD to Code.org®</a>if any of them are able to participate in <a href="https://csedweek.org/" target="_blank" rel="external">Computer Science Education Week</a>.</p><p>First, I had to step up and walk the walk, and I succeeded better than I had expected.</p><h2>2 Days - 4 Classes - 79 Grade 3 Students == Success</h2><p>This year it was very easy to organize an hour of code session at my youngest son's school. We had tried 2 years ago and the school board was leary so we didn't get a chance to do it.Last year, the school board was aware of Hour of Code and already actively encouraging teachers to try and participate so we did 2 classes last year.</p><p>This year we were able to organize 4 classes of Hour Of Code sessions for the all of the Grade 3 kids in the school. I did 2 back-to-back on a Tuesday morning, and another 2 on the Thursday morning.This ended up being a really great schedule and made running the sessions very easy because all of the Grade 3 students are in a school building together and the classrooms are side-by-side.</p><h4>And now for the proof...</h4><p><img src="https://dl.dropboxusercontent.com/u/30830337/Hour%20of%20Code%20-%202016%20-%20Kieran%20-%20sm.png" alt="Kieran" title="My son Kieran doing Minecraft"></p><p><img src="https://dl.dropboxusercontent.com/u/30830337/Hour%20of%20Code%20-%202016%20-%20Roberts%20and%20Kids%20-%20sm.png" alt="Mme Roberts helping out" title="Mme Roberts and some kids"></p><p><img src="https://dl.dropboxusercontent.com/u/30830337/Hour%20of%20Code%20-%202016%20-%20Seychelle%20and%20Kids%20-%20sm.png" alt="Mme Seychelle helping out" title="Mme Seychelle and some kids"></p><p><img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20Seychelle%20and%20Dave%20-%20sm.png" alt="Mme Seychelle" title="MMe Seychelle"> <img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20Roberts%20and%20Dave%20-%20sm.png" alt="Mme Roberts" title="Mme Roberts"><img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20LaBrecque%20and%20Dave%20-%20sm.png" alt="Mme Lebrecque" title="Mme Lebrecque"> <img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20Donlevy%20and%20Dave%20-%20sm.png" alt="Mme Donlevy" title="Mme Donlevy"></p><h2>WesternDevs Response</h2><p>When I issued the challenge to my fellow WesternDev members, I recognized it is actually a very hard task to organize and execute an #HourOfCode event. The technical aspects of #HourOfCode is very easy,but the logistics of coordinating with schools/organizations to get classroom time and computers is very difficult.</p><p>That said, one of my fellow WesternDev members, <a href="http://www.westerndevs.com/bios/james_chambers">James Chambers</a> was able to get TWO (2) session organized! They will be run during the week of Dec. 19. I know this isn't technically during<a href="https://csedweek.org/" target="_blank" rel="external">Computer Science Education Week</a> but I'm going to let that slide and <a href="https://code.org/help/" target="_blank" rel="external">donate $100 CAD to Code.org®</a> for <a href="http://www.westerndevs.com/bios/james_chambers">James Chambers</a> meeting the challenge. James has promised me that a blog post (with PICS!)will be following in the coming weeks! I'll update this post when that happens!</p><p>I'm also going to <a href="https://code.org/help/" target="_blank" rel="external">donate $100 CAD to Code.org®</a> for myself as I think that besides my time, this is a very important cause and they need our financial support as well as our support in time and effort.</p><p>Thank you all for reading. I hope I've encouraged you all to run an #HourOfCode session in your local community in the near future!!</p>]]></content>
    
    <summary type="html">
    
      79 Grade 3 kids had a blast being introduced to the world of computer science!
    
    </summary>
    
      <category term="Community" scheme="http://www.westerndevs.com/categories/Community/"/>
    
    
      <category term="Hour of Code" scheme="http://www.westerndevs.com/tags/Hour-of-Code/"/>
    
      <category term="Community" scheme="http://www.westerndevs.com/tags/Community/"/>
    
      <category term="Learning" scheme="http://www.westerndevs.com/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title type="html">Integration Testing with Entity Framework Core and SQL Server</title>
    <link href="http://www.westerndevs.com/Development/integration-testing-with-entity-framework-core-and-sql-server/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Development/integration-testing-with-entity-framework-core-and-sql-server/</id>
    <published>2016-11-27T22:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Entity Framework Core makes it easy to write tests that execute against an in-memory store. Using an in-memory store is convenient since we don't need to worry about setting up a relational database. It also ensures our unit tests run quickly so we aren't left waiting hours for a large test suite to complete.</p><p>While Entity Framework Core's in-memory store works great for many scenarios, there are some situations where it might be better to run our tests against a real relational database. Some examples include when loading entities using raw SQL or when using SQL Server specific features that can not be tested using the in-memory provider. In this case, the tests would be considered an integration test since we are no longer testing our Entity Framework context in isolation. We are testing how it will work in the real world when connected to SQL Server.</p><h2>The Sample Project</h2><p>For this example, I used the following simple model and DbContext classes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monster</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsScary &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;        </div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Colour &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonsterContext</span> : <span class="title">DbContext</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonsterContext</span>(<span class="params">DbContextOptions&lt;MonsterContext&gt; options</span>)</span></div><div class="line">        : <span class="title">base</span>(<span class="params">options</span>)</div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> DbSet&lt;Monster&gt; Monsters &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>In an ASP.NET Core application, the context is configured to use SQL Server in the <code>Startup.ConfigureServices</code> method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">services.AddDbContext&lt;MonsterContext&gt;(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.UseSqlServer(<span class="string">"DefaultConnection"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>The <code>DefaultConnection</code> is defined in <code>appsettings.json</code> which is loaded at startup.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"ConnectionStrings"</span>: &#123;</div><div class="line">        <span class="string">"DefaultConnection"</span>: <span class="string">"Server=(localdb)\\mssqllocaldb;Database=monsters_db;Trusted_Connection=True;MultipleActiveResultSets=true"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The <code>MonsterContext</code> is also configured to use Migrations which were initialized using the <code>dotnet ef migrations add InitialCreate</code> command. For more on Entity Framework Migrations, see the <a href="https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/migrations" target="_blank" rel="external">official tutorial</a>.</p><p>As a simple example, I created a query class that loads <em>scary</em> monsters from the database using a SQL query instead of querying the <code>Monsters</code> <code>DbSet</code> directly.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScaryMonstersQuery</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> MonsterContext _context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScaryMonstersQuery</span>(<span class="params">MonsterContext context</span>)</span></div><div class="line">    &#123;</div><div class="line">        _context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;Monster&gt; <span class="title">Execute</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> _context.Monsters</div><div class="line">            .FromSql(<span class="string">"SELECT Id, Name, IsScary, Colour FROM Monsters WHERE IsScary = &#123;0&#125;"</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>To be clear, a better way to write this query is <code>_context.Monster.Where(m =&gt; m.IsScary == true)</code>, but I wanted a simple example. I also wanted to use <code>FromSql</code> because it is inherently difficult to unit test. The <code>FromSql</code> method doesn't work with the in-memory provider since it requires a relational database. It is also an extension method which means we can't simply mock the context using a tool like <code>Moq</code>. We could of course create a wrapper service that calls the <code>FromSql</code> extension method and mock that service but this only shifts the problem. The <em>wrapper</em> approach would allow us to ensure that <code>FromSql</code> is called in the way we expect it to be called but it would not be able to ensure that the query will actually run successfully and return the expected results.</p><p>An integration test is a good option here since it will ensure that the query runs exactly as expected against a real SQL Server database.</p><h2>The Test</h2><p>I used xunit as the test framework in this example. In the constructor, which is the setup method for any tests in the class, I configure an instance of the <code>MonsterContext</code> connecting to a localdb instance using a database name containing a random guid. Using a guid in the database name ensures the database is unique for this test. Uniqueness is important when running tests in parallel because it ensures these tests won't impact any other tests that aer currently running. After creating the context, a call to <code>_context.Database.Migrate()</code> creates a new database and applies any Entity Framework migrations that are defined for the <code>MonsterContext</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleIntegrationTest</span> : <span class="title">IDisposable</span></div><div class="line">&#123;</div><div class="line">    MonsterContext _context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleIntegrationTest</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> serviceProvider = <span class="keyword">new</span> ServiceCollection()</div><div class="line">            .AddEntityFrameworkSqlServer()</div><div class="line">            .BuildServiceProvider();</div><div class="line"></div><div class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> DbContextOptionsBuilder&lt;MonsterContext&gt;();</div><div class="line"></div><div class="line">        builder.UseSqlServer(<span class="string">$"Server=(localdb)\\mssqllocaldb;Database=monsters_db_<span class="subst">&#123;Guid.NewGuid()&#125;</span>;Trusted_Connection=True;MultipleActiveResultSets=true"</span>)</div><div class="line">                .UseInternalServiceProvider(serviceProvider);</div><div class="line"></div><div class="line">        _context = <span class="keyword">new</span> MonsterContext(builder.Options);</div><div class="line">        _context.Database.Migrate();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [Fact]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QueryMonstersFromSqlTest</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//Add some monsters before querying</span></div><div class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"Dave"</span>, Colour = <span class="string">"Orange"</span>, IsScary = <span class="literal">false</span> &#125;);</div><div class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"Simon"</span>, Colour = <span class="string">"Blue"</span>, IsScary = <span class="literal">false</span> &#125;);</div><div class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"James"</span>, Colour = <span class="string">"Green"</span>, IsScary = <span class="literal">false</span> &#125;);</div><div class="line">        _context.Monsters.Add(<span class="keyword">new</span> Monster &#123; Name = <span class="string">"Imposter Monster"</span>, Colour = <span class="string">"Red"</span>, IsScary = <span class="literal">true</span> &#125;);</div><div class="line">        _context.SaveChanges();</div><div class="line"></div><div class="line">        <span class="comment">//Execute the query</span></div><div class="line">        ScaryMonstersQuery query = <span class="keyword">new</span> ScaryMonstersQuery(_context);</div><div class="line">        <span class="keyword">var</span> scaryMonsters = query.Execute();</div><div class="line"></div><div class="line">        <span class="comment">//Verify the results</span></div><div class="line">        Assert.Equal(<span class="number">1</span>, scaryMonsters.Count());</div><div class="line">        <span class="keyword">var</span> scaryMonster = scaryMonsters.First();</div><div class="line">        Assert.Equal(<span class="string">"Imposter Monster"</span>, scaryMonster.Name);</div><div class="line">        Assert.Equal(<span class="string">"Red"</span>, scaryMonster.Colour);</div><div class="line">        Assert.True(scaryMonster.IsScary);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        _context.Database.EnsureDeleted();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The actual test itself happens in the <code>QueryMonstersFromSqlTest</code> method. I start by adding some sample data to the database. Next, I create and execute the <code>ScaryMonstersQuery</code> using the context that was created in the setup method. Finally, I verify the results, ensuring that the expected data is returned from the query.</p><p>The last step is the <code>Dispose</code> method which in xunit is the teardown for any tests in this class. We don't want all these test databases hanging around forever so this is the place to delete the database that was created in the setup method. The database is deleted by calling <code>_context.Database.EnsureDeleted()</code>.</p><h2>Use with Caution</h2><p>These tests are slow! The very simple example above takes 13 seconds to run on my laptop. My advice here is to use this sparingly and only when it really adds value for your project. If you end up with a large number of these integration tests, I would consider splitting the integration tests into a separate test suite and potentially running them on a different schedule than my unit test suite (e.g. Nightly instead of every commit).</p><h2>The Code</h2><p>You can browse or download the source on <a href="https://github.com/AspNetMonsters/EntityFrameworkCoreIntegrationTest" target="_blank" rel="external">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      Entity Framework Core makes it easy to write tests that execute against an in-memory store but sometimes we want to actually run our tests against a real relational database. In this post, we look at how to create an integration test that runs against a real SQL Server database.
    
    </summary>
    
      <category term="Development" scheme="http://www.westerndevs.com/categories/Development/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="Entity Framework" scheme="http://www.westerndevs.com/tags/Entity-Framework/"/>
    
      <category term="Testing" scheme="http://www.westerndevs.com/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title type="html">Creating a New View Engine in ASP.NET Core</title>
    <link href="http://www.westerndevs.com/ASP-NET-Core/creating-a-new-view-engine-in-asp-net-core/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/ASP-NET-Core/creating-a-new-view-engine-in-asp-net-core/</id>
    <published>2016-11-22T17:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave Paquette</name>
	  <email>contactme@davepaquette.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Earlier in November, the <a href="http://aspnetmonsters.com/2016/01/welcome/" target="_blank" rel="external">ASP.NET Monsters</a> had the opportunity to take part in the ASP.NET Core hackathon at the Microsoft MVP Summit. In past years, we have used the hackathon as an opportunity to spend some time working on GenFu. This year, we wanted to try something a little different.</p><h2>The Crazy Idea</h2><p>A few months ago, we had <a href="https://channel9.msdn.com/Series/aspnetmonsters/ASPNET-Monsters-59-Razor-with-Taylor-Mullen" target="_blank" rel="external">Taylor Mullen on The Monsters Weekly</a> to chat about Razor in ASP.NET Core. At some point during that interview, it was pointed that MVC is designed in a way that a new view engine could easily be plugged into the framework. It was also noted that implementing a view engine is a really big job. This got us to thinking...what if we could find an existing view engine of some sort. How easy would it be to get actually put a new view engine in MVC?</p><p>And so, that was our goal for the hackathon. Find a way to replace Razor with an alternate view engine in a single day of hacking.</p><h2>Finding a Replacement</h2><p>We wanted to pick something that in no way resembled Razor. Simon suggested <a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="external">Pug</a> (previously known as Jade), a popular view template engine used in <a href="https://expressjs.com" target="_blank" rel="external">Express</a>. In terms of syntax, Pug is about as different from Razor as it possibly could be. Pug uses whitespace to indicate nesting of elements and does away with angle brackets all together. For example, the following template:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">    a(<span class="name">href=</span>'google.com') Google</div></pre></td></tr></table></figure>  <p>would generate this HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"google.com"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2>Calling Pug from ASP.NET Core</h2><p>The first major hurdle for us was figuring out a way to compile pug templates from within an ASP.NET Core application. Pug is a JavaScript based template engine and we only had a single day to pull this off so a full port of the engine to C# was not feasible.</p><p>Our first thought was to use Edgejs to call Pug's JavaScript compile function. Some quick prototyping showed us that this worked but Edgejs doesn't have support for .NET Core. This lead us to explore the <a href="https://github.com/aspnet/JavaScriptServices" target="_blank" rel="external">JavaScriptServices</a> packages created by the ASP.NET Core team. Specifically the <a href="https://github.com/aspnet/JavaScriptServices/tree/dev/src/Microsoft.AspNetCore.NodeServices#microsoftaspnetcorenodeservices" target="_blank" rel="external">Node Services</a> package which allows us to easily call out to a JavaScript module from within an ASP.NET Core application.</p><p>To our surpise, this not only worked, it was also easy! We created a very simple file called pugcompile.js.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> pug = <span class="built_in">require</span>(<span class="string">'pug'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">callback, viewPath, model</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> pugCompiledFunction = pug.compileFile(viewPath);</div><div class="line">callback(<span class="literal">null</span>, pugCompiledFunction(model));</div><div class="line">&#125;;  </div><div class="line"></div></pre></td></tr></table></figure><p>Calling this JavaScript from C# is easy thanks to the Node Services package. Assuming <code>model</code> is the view model we want to bind to the template and <code>mytemplate.pug</code> is the name of the file containing the pug template:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> html = <span class="keyword">await</span> _nodeServices.InvokeAsync&lt;<span class="keyword">string</span>&gt;(<span class="string">"pugcompile"</span>, <span class="string">"mytemplate.pug"</span>, model);</div></pre></td></tr></table></figure><p>Now that we had proven this was possible, it was time to integrate this with MVC by creating a new MVC View Engine.</p><h2>Creating the Pugzor View Engine</h2><p>We decided to call our view engine Pugzor which is a combination of Pug and Razor. Of course, this doesn't really make much sense since our view engine really has nothing to do with Razor but naming is hard and we thought we were being funny.</p><p>Keeping in mind our goal of implenting a view engine in a single day, we wanted to do this with the simplest way possible. After spending some time digging through the source code for MVC, we determined that we needed to implement the <code>IViewEngine</code> interface as well as implement a custom <code>IView</code>.</p><p>The <code>IViewEngine</code> is responsible for locating a view based on a <code>ActionContext</code> and a <code>ViewName</code>.  When a controller returns a <code>View</code>, it is the <code>IViewEngine</code>'s <code>FindView</code> method that is responsible for finding a view based on some convetions. The <code>FindView</code> method returns a <code>ViewEngineResult</code> which is a simple class containing a <code>boolean Success</code> property indicating whether or not a view was found and an <code>IView View</code> property containing the view if it was found.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> Defines the contract for a view engine.</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IViewEngine</span></div><div class="line">&#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> Finds the view with the given <span class="doctag">&lt;paramref name="viewName"/&gt;</span> using view locations and information from the</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;paramref name="context"/&gt;</span>.</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="context"&gt;</span>The <span class="doctag">&lt;see cref="ActionContext"/&gt;</span>.<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="viewName"&gt;</span>The name of the view.<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isMainPage"&gt;</span>Determines if the page being found is the main page for an action.<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The <span class="doctag">&lt;see cref="ViewEngineResult"/&gt;</span> of locating the view.<span class="doctag">&lt;/returns&gt;</span></span></div><div class="line">    <span class="function">ViewEngineResult <span class="title">FindView</span>(<span class="params">ActionContext context, <span class="keyword">string</span> viewName, <span class="keyword">bool</span> isMainPage</span>)</span>;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> Gets the view with the given <span class="doctag">&lt;paramref name="viewPath"/&gt;</span>, relative to <span class="doctag">&lt;paramref name="executingFilePath"/&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> unless <span class="doctag">&lt;paramref name="viewPath"/&gt;</span> is already absolute.</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="executingFilePath"&gt;</span>The absolute path to the currently-executing view, if any.<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="viewPath"&gt;</span>The path to the view.<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="isMainPage"&gt;</span>Determines if the page being found is the main page for an action.<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The <span class="doctag">&lt;see cref="ViewEngineResult"/&gt;</span> of locating the view.<span class="doctag">&lt;/returns&gt;</span></span></div><div class="line">    <span class="function">ViewEngineResult <span class="title">GetView</span>(<span class="params"><span class="keyword">string</span> executingFilePath, <span class="keyword">string</span> viewPath, <span class="keyword">bool</span> isMainPage</span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>We decided to use the same view location conventions as Razor. That is, a view is located in <code>Views/{ControllerName}/{ActionName}.pug</code>.</p><p>Here is a simplified version of the FindView method for the <code>PugzorViewEngine</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ViewEngineResult <span class="title">FindView</span>(<span class="params"></span></span></div><div class="line">    ActionContext actionContext,</div><div class="line">    <span class="keyword">string</span> viewName,</div><div class="line">    <span class="keyword">bool</span> isMainPage)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> controllerName = GetNormalizedRouteValue(actionContext, ControllerKey);</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> checkedLocations = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> location <span class="keyword">in</span> _options.ViewLocationFormats)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> view = <span class="keyword">string</span>.Format(location, viewName, controllerName);</div><div class="line">        <span class="keyword">if</span>(File.Exists(view))</div><div class="line">            <span class="keyword">return</span> ViewEngineResult.Found(<span class="string">"Default"</span>, <span class="keyword">new</span> PugzorView(view, _nodeServices));</div><div class="line">        checkedLocations.Add(view);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ViewEngineResult.NotFound(viewName, checkedLocations);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>You can view the complete implentation on <a href="https://github.com/AspNetMonsters/pugzor/blob/master/src/pugzor.core/PugzorViewEngine.cs" target="_blank" rel="external">GitHub</a>.</p><p>Next, we created a class called <code>PugzorView</code> which implements <code>IView</code>. The <code>PugzorView</code> takes in a path to a pug template and an instance of <code>INodeServices</code>. The MVC framework calls the <code>IView</code>'s <code>RenderAsync</code> when it is wants the view to be rendered. In this method, we call out to <code>pugcompile</code> and then write the resulting HTML out to the view context.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PugzorView</span> : <span class="title">IView</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">string</span> _path;</div><div class="line">    <span class="keyword">private</span> INodeServices _nodeServices;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PugzorView</span>(<span class="params"><span class="keyword">string</span> path, INodeServices nodeServices</span>)</span></div><div class="line">    &#123;</div><div class="line">        _path = path;</div><div class="line">        _nodeServices = nodeServices;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Path</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">get</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> _path;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">RenderAsync</span>(<span class="params">ViewContext context</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> _nodeServices.InvokeAsync&lt;<span class="keyword">string</span>&gt;(<span class="string">"./pugcompile"</span>, Path, context.ViewData.Model);</div><div class="line">        context.Writer.Write(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The only thing left was to configure MVC to use our new view engine. At first, we thought we could easy add a new view engine using the <code>AddViewOptions</code> extension method when adding MVC to the service collection.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">services.AddMvc()</div><div class="line">        .AddViewOptions(options =&gt;</div><div class="line">            &#123;</div><div class="line">                options.ViewEngines.Add(<span class="keyword">new</span> PugzorViewEngine(nodeServices));</div><div class="line">            &#125;);</div></pre></td></tr></table></figure><p>This is where we got stuck.  We can't add a concrete instance of the <code>PugzorViewEngine</code> to the <code>ViewEngines</code> collection in the <code>Startup.ConfigureServices</code> method because the view engine needs to take part in dependency injection. The <code>PugzorViewEngine</code> has a dependency on <code>INodeServices</code> and we want that to be injected by ASP.NET Core's dependency injection framework. Luckily, the all knowning Razor master Taylor Mullen was on hand to show us the right way to register our view engine.</p><p>The recommended approach for adding a view engine to MVC is to create a custom setup class that implements <code>IConfigureOptions&lt;MvcViewOptions&gt;</code>. The setup class takes in an instance of our <code>IPugzorViewEngine</code> via constructor injection. In the configure method, that view engine is added to the list of view engines in the <code>MvcViewOptions</code>.</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class PugzorMvcViewOptionsSetup : IConfigureOptions&lt;MvcViewOptions&gt;</div><div class="line">&#123;</div><div class="line">    private readonly IPugzorViewEngine _pugzorViewEngine;</div><div class="line"></div><div class="line">    /// &lt;summary&gt;</div><div class="line">    /// Initializes a new instance of &lt;see cref="PugzorMvcViewOptionsSetup"/&gt;.</div><div class="line">    /// &lt;/summary&gt;</div><div class="line">    /// &lt;param name="pugzorViewEngine"&gt;The &lt;see cref="IPugzorViewEngine"/&gt;.&lt;/param&gt;</div><div class="line">    public PugzorMvcViewOptionsSetup(IPugzorViewEngine pugzorViewEngine)</div><div class="line">    &#123;</div><div class="line">        if (pugzorViewEngine == null)</div><div class="line">        &#123;</div><div class="line">            throw new ArgumentNullException(nameof(pugzorViewEngine));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        _pugzorViewEngine = pugzorViewEngine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /// &lt;summary&gt;</div><div class="line">    /// Configures &lt;paramref name="options"/&gt; to use &lt;see cref="PugzorViewEngine"/&gt;.</div><div class="line">    /// &lt;/summary&gt;</div><div class="line">    /// &lt;param name="options"&gt;The &lt;see cref="MvcViewOptions"/&gt; to configure.&lt;/param&gt;</div><div class="line">    public void Configure(MvcViewOptions options)</div><div class="line">    &#123;</div><div class="line">        if (options == null)</div><div class="line">        &#123;</div><div class="line">            throw new ArgumentNullException(nameof(options));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        options.ViewEngines.Add(_pugzorViewEngine);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Now all we need to do is register the setup class and view engine the <code>Startup.ConfigureServices</code> method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">services.AddTransient&lt;IConfigureOptions&lt;MvcViewOptions&gt;, PugzorMvcViewOptionsSetup&gt;();</div><div class="line">services.AddSingleton&lt;IPugzorViewEngine, PugzorViewEngine&gt;();</div></pre></td></tr></table></figure><p>Like magic, we now have a working view engine. Here's a simple example:</p><h4>Controllers/HomeController.cs</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    ViewData.Add(<span class="string">"Title"</span>, <span class="string">"Welcome to Pugzor!"</span>);</div><div class="line">    ModelState.AddModelError(<span class="string">"model"</span>, <span class="string">"An error has occurred"</span>);</div><div class="line">    <span class="keyword">return</span> View(<span class="keyword">new</span> &#123; People = A.ListOf&lt;Person&gt;() &#125;); </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4>Views/Home/Index.pug</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">block <span class="selector-tag">body</span></div><div class="line"><span class="selector-tag">h2</span> Hello</div><div class="line"><span class="selector-tag">p</span> #&#123;ViewData.title&#125; </div><div class="line">table(class=<span class="string">'table'</span>)</div><div class="line"><span class="selector-tag">thead</span></div><div class="line"><span class="selector-tag">tr</span></div><div class="line"><span class="selector-tag">th</span> Name</div><div class="line"><span class="selector-tag">th</span> Title</div><div class="line"><span class="selector-tag">th</span> Age</div><div class="line"><span class="selector-tag">tbody</span></div><div class="line">each val <span class="keyword">in</span> people</div><div class="line"><span class="selector-tag">tr</span></div><div class="line">td= val<span class="selector-class">.firstName</span></div><div class="line">td= val<span class="selector-class">.title</span></div><div class="line">td= val<span class="selector-class">.age</span></div></pre></td></tr></table></figure><h4>Result</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to Pugzor! <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Laura<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mrs.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>38<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Gabriel<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>62<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Judi<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Princess<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>44<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Isaiah<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Air Marshall<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>39<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Amber<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Miss.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>69<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Jeremy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Master<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>92<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Makayla<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>15<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Sean<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lillian<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Brandon<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Doctor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>88<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Joel<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Miss.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Madeline<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>General<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>67<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Allison<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mr. <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>21<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Brooke<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>27<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Jonathan<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Air Marshall<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>63<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mrs.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Tristan<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Doctor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>46<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Kandra<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Doctor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>47<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Timothy<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Ms.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>83<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Milissa<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>68<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Lekisha<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Mrs.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>40<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Connor<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Dr.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>73<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Danielle<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Princess<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>27<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Michelle<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Miss.<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Chloe<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Princess<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>85<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure><p>All the features of pug work as expected, including templage inheritance and inline JavaScript code. Take a look at our <a href="https://github.com/AspNetMonsters/pugzor/tree/master/test/pugzore.website" target="_blank" rel="external">test website</a> for some examples.</p><h2>Packaging it all up</h2><p>So we reached our goal of creating an alternate view engine for MVC in a single day. We had some time left so we thought we would try to take this one step further and create a NuGet package. There were some challenges here, specifically related to including the required node modules in the NuGet package. Simon is planning to write a separate blog post on that topic.</p><p>You can give it a try yourself. Add a reference to the <code>pugzor.core</code> NuGet package then call <code>.AddPugzor()</code> after <code>.AddMvc()</code> in the <code>Startup.ConfigureServices</code> method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void ConfigureServices(IServiceCollection services)</div><div class="line">&#123;</div><div class="line">    // Add framework services.</div><div class="line">    services.AddMvc().AddPugzor();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Razor still works as the default but if no Razor view is found, the MVC framework will try using the PugzorViewEngine. If a matching pug template is found, that template will be rendered.</p><p><img src="http://www.davepaquette.com/images/pugzor.png" alt="Pugzor"></p><h2>Wrapping it up</h2><p>We had a blast working on this project. While this started out as a silly excercise, we sort of ended up with something that could be useful. We were really surprised at how easy it was to create a new view engine for MVC. We don't expect that Pugzor will be wildly popular but since it works we thought we would put it out there and see what people think.</p><p>We have some <a href="https://github.com/AspNetMonsters/pugzor/issues" target="_blank" rel="external">open issues</a> and some ideas for how to extend the <code>PugzorViewEngine</code>. Let us know what you think or jump in and contribute some code. We accept pull requests :-)</p>]]></content>
    
    <summary type="html">
    
      At the ASP.NET Hackathon in Redmond, we replaced the Razor view engine with Pug. It started off as a joke but it kind of worked okay so we rolled with it.
    
    </summary>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/categories/ASP-NET-Core/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
      <category term="MVC" scheme="http://www.westerndevs.com/tags/MVC/"/>
    
  </entry>
  
</feed>
