<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/david_wesst" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2017-05-02T12:31:41.000Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Conquest April 2017 Devblog</title>
    <link href="http://www.westerndevs.com/devblog/Conquest-April-2017-Devblog/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/devblog/Conquest-April-2017-Devblog/</id>
    <published>2017-05-02T12:31:41.000Z</published>
    <updated>2017-05-02T12:31:41.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is the April 2017 update for my video game project I call &quot;Conquest&quot;.</p><a id="more"></a><p>This month, I have continued to make progress on my game project. The unexpected thing that happened was the fact that I decided to take a step back and do some research and development before continuing forward with the game idea I have in mind.</p><h2>Status Update</h2><p>Here's the thing: my game project is too big. At least for now, it's too big, and I don't have enough experience and knowledge to be cofortable taking this idea and turning it into a game.</p><p>It's my first original video game, after all, and if you watch or read game design resources like <a href="https://www.youtube.com/user/ExtraCreditz" target="_blank" rel="external">Extra Credits</a>, you'll often hear that you should start small and move up from there.</p><p>So that's what I did. And I made <a href="https://github.com/davidwesst/breakout" target="_blank" rel="external">Breakout</a> by following <a href="https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript" target="_blank" rel="external">this MDN</a> tutorial.</p><p><img src="http://i.imgur.com/TnoJp0Gm.png" alt=""></p><p>I know that this isn't going to blow anyone's mind, but it's first game I've made with nothing but vanilla JavaScript and let me get familiar with the basics of JavaScript game development, without blindly relaying on a framework.</p><p>I intend on continuing with this breakout game for another month as I prepare for <a href="http://prairiedevcon.com/" target="_blank" rel="external">Prairie Dev Con</a> to add some polish, clean up the code, and maybe add a few gameplay elements that I worked on this month.</p><p>But now, onto the update.</p><h3>What I've Done</h3><p>Like last time, I'll keep it short and in bullet points:</p><ul><li>Development<ul><li>Did an automated deployment to <a href="https://itch.io/" target="_blank" rel="external">Itch.io</a> using Powershell and VSTS</li><li>Experimented with the <a href="http://www.inklestudios.com/ink/" target="_blank" rel="external">Ink</a> dialogue system and found how to integrate into build</li><li>Taken a step back on Conquest, in lieu of more R&amp;D through smaller games</li><li>Created <a href="https://github.com/davidwesst/breakout" target="_blank" rel="external">Breakout</a> with vanilla ES6 JavaScript, complete with a transpiler and SystemJS modules<ul><li>Thanks <a href="https://github.com/chrinkus/" target="_blank" rel="external">Chris</a> for the suggestion and <a href="https://love2dev.com/" target="_blank" rel="external">Chris Love from Love2Dev</a> for providing constructive feedback regarding framework dependent developers.</li></ul></li><li>Setup my Vim development environment to be extra cool.</li></ul></li><li>Design<ul><li>Met with an <em>actual video game writer</em> to talk about the best way to start including narrative and dialogue into a game<ul><li>Thanks <a href="http://www.rmorganslade.ca/" target="_blank" rel="external">R. Morgan Slade</a> for taking the time and providing some really good feedback and insight</li></ul></li><li>Started migrating some design elements from Conquest into Breakout</li></ul></li></ul><h3>What I've Faced</h3><p>This month, the big thing I faced was the realization that my project is too big for me. It's not that I don't think I would finish it eventually. It's that I don't think I have the skills to make the game fun when I'm done with it.</p><p>I also realized that I am too dependent on frameworks when it comes to game development. It's not that I don't think frameworks have a place or that I'll eventually use one or more of them in my game. It's that I don't know what the framework brings to the table other than an abstraction in development.</p><p>There are plenty of game design tools with full UI's that remove the need to code everything from the ground up, but since I've opted to go the code-focused route because that's what I know best, I should probably know a bit more about the layers code before I start abstracting them away.</p><h3>Where I'm Going</h3><p>May is going to be busy with Prarie Dev Con happening in June, but that won't stop me from working on Conquest. I should also document these discoveries I make a little more, so I'll be doing that through the blog.</p><p>That being said, my plan is to focus on polishing up Breakout by using some of the planned features for Conquest in Breakout. They might not work all that well in that game, but the goal of Breakout isn't to make it a hit, but to experiment with these systems I have planned for Conquest.</p><p>To summarize, here's the plan:</p><ul><li>Refactor Breakout to have a cleaner code base (i.e. modules, objects, etc...)</li><li>Share my VSTS game development discoveries via my blog</li><li>Add some polish to Breakout to complete it</li><li>Prepare my demos for <a href="http://prairiedevcon.com/" target="_blank" rel="external">Prairie Dev Con</a> using Breakout as the demo project</li></ul><h2>Conclusion</h2><p>What I've concluded this month is that I need to make games that match my skills as software developer. For that reason, I'm going to focus on learning the guts of the JavaScript by improving my vanilla JS Breakout game.</p><p>All in all, this month has been quite the shift in direction. I went from making one big game, to making one small game that has nothing to do with the original. It's been challenging, but in a good way. Now I can move forward with developing these systems in smaller pieces, refine them, and eventually recombine them into my original game design.</p><p>See you next month.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the April 2017 update for my video game project I call &amp;quot;Conquest&amp;quot;.&lt;/p&gt;
    
    </summary>
    
      <category term="devblog" scheme="http://www.westerndevs.com/categories/devblog/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="conquest" scheme="http://www.westerndevs.com/tags/conquest/"/>
    
      <category term="ink" scheme="http://www.westerndevs.com/tags/ink/"/>
    
      <category term="itch.io" scheme="http://www.westerndevs.com/tags/itch-io/"/>
    
  </entry>
  
  <entry>
    <title type="html">Introducing My Game Project - March 2017 Devblog</title>
    <link href="http://www.westerndevs.com/devblog/Conquest-March-2017-Devblog/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/devblog/Conquest-March-2017-Devblog/</id>
    <published>2017-04-03T10:00:00.000Z</published>
    <updated>2017-04-03T10:00:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've wanted to make a video game since I was very young. It got me into programming during my university career, and is something of a passion of mine now that I'm older and more of a seasoned developer.</p><p>I've toyed and tinkered with different game ideas and technologies through the years, but never really got anything done. At the beginning of this year, I started working on something I decided would be my first &quot;real&quot; game. I'm not sure what it is yet, but it's turning into something after three month of development and design in my spare time.</p><p>Today, I'm going to share a bit about it with you, the public, for the first time.</p><h2>Introducing &quot;Conquest&quot;</h2><p>This game is something of a life long conquest for me, but that isn't where the name comes from. This game started out as one idea where conquest made a lot of sense, but has transformed in a few ways over the past month to something completely different. I've been rolling with it and I like where it's headed now, but the name is going to stay the same until I get something a little more locked down.</p><p>In the meantime, you can take a look the <a href="http://imgur.com/a/x7eGr" target="_blank" rel="external">first official screenshots</a>:</p><p><img src="http://i.imgur.com/dqEGoFf.png" alt=""></p><p>It's not much to look at, but this is just the beginning.</p><p>The goal is to get the gameplay loop and core systems down, based on the bit of design I have in mind. I've been doing pitch sessions with my SO (significant other), who has helped keep me and the multitude of ideas in check. Graphics and polish will come later, but for now it's all about the gameplay.</p><p>But enough of that, let's get status update.</p><h2>Status Update</h2><p>The point of these posts is to try and help me reflect on what I've done, what issues I've faced, and where I'm going from here. Think of it as a sort of sprint review. Although this is three months of effort, I have started planning month long iterations where each iteration will end with a devblog post.</p><p>For those wondering, I use Visual Studio Team Services for that planning, but I'll discuss that in future regularily scheduled blog posts.</p><h3>What I've Done</h3><p>Over the past three months, I've done quite a bit, but I'll keep it brief with bullet points.</p><ul><li>Development<ul><li>Selected <a href="http://phaser.io/" target="_blank" rel="external">Phaser</a> as the base game framework</li><li>Implemented signals for game events, triggered through timers and through player interaction</li><li>Implemented in-game time</li><li>Implemented map metadata layer</li><li>Setup issue and bug tracking in <a href="http://phaser.io/" target="_blank" rel="external">VSTS</a></li><li>Setup contiuous integration and deployment to Itch.io using VSTS</li></ul></li><li>Design<ul><li>Did a &quot;pitch&quot; to solidify game idea and core gameplay concepts</li><li>Setup a map design workflow using <a href="http://www.mapeditor.org/" target="_blank" rel="external">Tiled</a> map editor</li></ul></li></ul><p>The gist of it is that I've focused on figuring out what sort of game I want to make by focusing on the things I already know: the tech.</p><h3>What I've Faced</h3><p>Plenty.</p><p>I'll be more specific in future posts, but most of everything I've faced over these past three months has been around discovery and learning how to do basic game development. By using TypeScript (with it's definition files) and Phaser as my foundation, I've been moving pretty quickly and learning something new every time I sit down to work on the game.</p><p>The other challenge I've is figuring out where to draw the line between development and design. At this point, I feel like I know where the line is and actually know that there <em>is</em> a line between them. The challenge is making sure that I make sure to keep progress happening in both streams. Development work is familiar to me compared to design and ultimately more of a comfort zone for me to fall back on.</p><p>The problem is that without design, I'm just building game technology without purpose. How do I know what systems to build if I don't know what kind of game I'd like to build?</p><p>I've gotten much better at this over the course of February and March, and intend on keeping that going in future iterations by making sure that the number of dev and design issues are balanced each month.</p><h3>Where I'm Going</h3><p>For the next iteration, I'm going to try and add two more systems to the game: a dialogue system, and an objective/goal system. There are more I'd like to add, but those two are the most critical. With these two in place I think I would have all the systems I need to the first part of the game playable and in front of players.</p><p>For the design side, I have a vision in mind for the first playable part. To build it, I need to design my first &quot;real&quot; map, complete with metadata and a story that is told through interaction with the map. The other thing  will be to make sure that I use the <em>existing</em> systems I've developed to tell the story through the map, rather that defining new systems.</p><p>In summary, the goals for the sprint are:</p><ul><li>Development<ul><li>Display scripted dialogue in-game</li><li>Include objective for the player to accomplish</li></ul></li><li>Design<ul><li>Map of first playable section that tells a story through interaction</li><li>Leverage the each of the existing systems in the map to aid in story telling</li></ul></li></ul><h2>Conclusion</h2><p>This post is the first of many. They will be monthly, and have more specific content about progress.</p><p>For a first post, this is pretty light on the details. That's mainly because there aren't a lot of details to share just yet. For now, all I can say is that I plan on continuing to blog about both the technical and the design challenges that I face along the way. Hopefully, over the next few posts, I will have something for you to play.</p><p>Until next month.</p>]]></content>
    
    <summary type="html">
    
      This is the first of monthly status update posts on my video game project I call Conquest.
    
    </summary>
    
      <category term="devblog" scheme="http://www.westerndevs.com/categories/devblog/"/>
    
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="phaser" scheme="http://www.westerndevs.com/tags/phaser/"/>
    
      <category term="conquest" scheme="http://www.westerndevs.com/tags/conquest/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Compile TypeScript into a Single File with SystemJS Modules with Gulp</title>
    <link href="http://www.westerndevs.com/javascript/How-to-Compile-TypeScript-into-a-Single-File-with-SystemJS-Modules-with-Gulp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/javascript/How-to-Compile-TypeScript-into-a-Single-File-with-SystemJS-Modules-with-Gulp/</id>
    <published>2017-03-14T13:47:22.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been messing around with TypeScript again for my <a href="https://blog.davidwesst.com/2017/03/Intital-Thoughts-on-Using-Phaser/" target="_blank" rel="external">game project</a> and wanted a module loader to consume the single file produced by the TypeScript compiler. This time around I decided to use SystemJS and figured I'd share the lessons I learned along the way.</p><h5>Sample Project</h5><p>If you're interested in playing with the code, you can checkout <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="external">this GitHub project</a> I setup just for that reason.</p><h5>Previous Post</h5><p>I also posted about doing the same sort of thing <a href="https://blog.davidwesst.com/2016/09/How-to-Compile-Typescript-into-a-Single-File-with-AMD-Modules/" target="_blank" rel="external">with AMD and RequireJS</a> complete with <a href="https://github.com/davidwesst/ts-project-template" target="_blank" rel="external">a GitHub sample project</a></p><h2>Project Breakdown</h2><p>Here's the gist of it. My project has the following requirements:</p><ol><li>Source code in TypeScript, organized in to multiple modules</li><li>Load external modules into application as dependencies</li><li>Transpile down to a single bundle file</li><li>Load the bundle in the browser</li></ol><p>It seems pretty straight forward, right? Plus, because I'm using TypeScript I figured this would be easy peezy lemon-squeezy with the <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="external">TypeScript compiler</a> and rich documentation.</p><p>As it turns out, it wasn't that simple.</p><h3>Wait. Where's GulpJS?</h3><p>It's in the sample project handling the transpiling the TypeScript through a task.</p><p>It's actually not required, but rather a convienience for keeping all my build tasks together. I just put it in the title, because it matches the previous post.</p><h2>Problem 1: Using an External Module</h2><p>I wanted to use <a href="https://momentjs.com/" target="_blank" rel="external">Moment.js</a> to help handle date objects with my code.</p><p>There were two parts to this:</p><ul><li>Getting it working in the development environment</li><li>Getting it bundled up with SystemJS.</li></ul><h3>Using it in Development</h3><p>I use <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>, which is a great TypeScript development environment.</p><p>Normally, you would use the <a href="https://www.npmjs.com/search?q=%40types" target="_blank" rel="external"><code>@types</code></a> collection of defintion files from the NPM which is wired up by default. For Moment, we need to break that.</p><p>The definition file for Moment is found in the library itself. Since I use NPM to handle all my dependencies, you just set this up in your <code>tsconfig.json</code> file.</p><p><img src="http://i.imgur.com/TyAgU0N.png" alt=""></p><p>Then, in code, we import it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span>;</div></pre></td></tr></table></figure><p>Remember: if your project is already using <code>@types</code> definition files, you'll need to add that folder to the <code>typeRoots</code> collection yourself.</p><h3>Bundling it Up</h3><p>Because we're using SystemJS, we need to do is configure it as a path to understand where to find the library when it gets referenced.</p><p>In the <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="external">sample project</a>, we do it in <code>script</code> tag on the HTML page, but you can do this in wherever you end up doing your SystemJS configuration.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SystemJS.config(&#123;</div><div class="line">    <span class="string">"paths"</span>: &#123;</div><div class="line">        <span class="string">"moment"</span>: <span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2>Problem 2: Loading the Bundle</h2><p>Making a bundle is easy. Consuming the bundle is something different.</p><h3>Making a Bundle</h3><p>If you're interested in bundling your code into a single file with the compiler, you're limited to AMD or SystemJS modules. This is configured in the <code>tsconfig.json</code> file included in <a href="https://github.com/davidwesst/ts-systemjs" target="_blank" rel="external">the sample project</a> with the module property. You can read more about it <a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="external">here in the TypeScript Handbook</a>.</p><p><img src="http://i.imgur.com/gUGeHfI.png" alt=""></p><h3>Consuming the Bundle</h3><p>This is where I got stuck.</p><p>Now I have this fancy bundle, but I need to figure out how to consume it in my HTML page. The solution is pretty simple, but it took some research and some tinkering, but I got there.</p><p>Take a look at the <code>&lt;body&gt;</code> take of the HTML file:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"display"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- script will display content here --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.20.9/system.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        SystemJS.config(&#123;</div><div class="line">            <span class="string">"paths"</span>: &#123;</div><div class="line">                <span class="string">"moment"</span>: <span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js"</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        SystemJS.import(<span class="string">"game"</span>)</div><div class="line">            .then(<span class="function">(<span class="params"><span class="built_in">module</span></span>)=&gt;</span> &#123;</div><div class="line">                <span class="keyword">let</span> g = <span class="keyword">new</span> <span class="built_in">module</span>.Game(<span class="string">"display"</span>);</div><div class="line">                g.start();</div><div class="line">            &#125;)</div><div class="line">            .catch(<span class="function">(<span class="params">error</span>)=&gt;</span> &#123;</div><div class="line">                <span class="built_in">console</span>.error(error);</div><div class="line">            &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><p>I blame myself for getting stuck considering this sort all documented well in the <a href="https://github.com/systemjs/systemjs" target="_blank" rel="external">SystemJS documentation on GitHub</a>. Either way, I had issues finding solid resources about using bundles. Hopefull this can help someone else in the future.</p><h2>Conclusion</h2><p>My problems can be traced back to my lack of experience with JavaScript module loaders. And yes, I know that <a href="http://caniuse.com/#feat=es6-module" target="_blank" rel="external">ES6 Modules are coming</a>, but the browsers are a ways away from having a full implementation (except for Safari).</p><p>Until then, we'll be using TypeScript and <a href="http://babeljs.io/" target="_blank" rel="external">Babel</a> to help us get our modular JavaScript working in the browser.</p>]]></content>
    
    <summary type="html">
    
      I decided to move a TypeScript project from AMD modules (i.e. RequireJS) to SystemJS, still using Gulp. In this post, I walk you through the sample project I&#39;ve created and share the lessons I learned along the way.
    
    </summary>
    
      <category term="javascript" scheme="http://www.westerndevs.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="systemjs" scheme="http://www.westerndevs.com/tags/systemjs/"/>
    
      <category term="modules" scheme="http://www.westerndevs.com/tags/modules/"/>
    
      <category term="gulpjs" scheme="http://www.westerndevs.com/tags/gulpjs/"/>
    
  </entry>
  
  <entry>
    <title type="html">Initial Thoughts on Using Phaser</title>
    <link href="http://www.westerndevs.com/javascript/typescript/new-post-Initial-Thoughts-on-Phaser/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/javascript/typescript/new-post-Initial-Thoughts-on-Phaser/</id>
    <published>2017-03-07T11:00:00.000Z</published>
    <updated>2017-03-07T11:00:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I'm not a game dev, but have always wanted to make a video game. I've started and stopped so many project over the years, that I have seriously lost count.</p><p>With the new year and a fresh mind, I decided to take a stab at it again, this time focusing on just getting something done rather than getting something <em>done right</em> as a sort of side project.</p><p>It's been about two months since I've started, and I have something basic working (although I'm not willing to share it yet) and I thought I would share my thoughts on Phaser, the framework I decided to use to help me build my game.</p><h2>Techincal Requirements</h2><p>Before we talk about the framework, let's talk about the game itself as you'll need to know what I'm building to understand why I chose the framework.</p><p>Here's the technical rundown:</p><ul><li>2D</li><li>Top-Down Camera</li><li>Tile-based graphics</li><li>Using <a href="http://mapeditor.org" target="_blank" rel="external">Tiled</a> for maps</li><li>Gamepad support for player input</li><li>TypeScript support</li></ul><p>If you think back to the old NES (Nintendo Entertainment System) and SNES (Super Nintendo Entertainment System) days, games like Final Fantasy, and the Legend of Zelda are good examples of the look of the game.</p><p><img src="http://i.imgur.com/0LLlYoxb.png" alt="&amp;quot;The Legend of Zelda for the NES&amp;quot;"></p><h3>Where did you come up with these Requirements?</h3><p>I decided to make a game that I wanted to play. That's really about it.</p><p>I have plenty of ideas floating around in my head, but I went with one that had a look and feel of what I like to play.</p><h3>Why TypeScript Support?</h3><p>Although I'm a JavaScript nut, if find that TypeScript combined with the right tooling (Visual Studio Code) helps you learn an API thorugh code completion. Plus, it's compiler helps catch errors along the way without losing the versatility that comes with JavaScript. Since I'm learning a whole new domain (i.e. game development) I wanted to focus more on the learning practices and patterns, rather than worrying about the syntax.</p><p>We'll get into more of this later.</p><h3>Wait! What about the Game Design?!</h3><p>That is a whole other conversation and series of posts that I may share if I ever get this project done. For now, they don't really apply as we're sticking to the technical side of the project.</p><p>(Although if you're interested, ping me on <a href="https://twitter.com/davidwesst" target="_blank" rel="external">Twitter</a> to let me know)</p><h2>So, Why Phaser?</h2><p>I did quite a bit of research on this before going with Phaser. The two biggest contenders being <a href="http://babylonjs.com/" target="_blank" rel="external">BabylonJS</a> and the <a href="http://www.createjs.com/" target="_blank" rel="external">CreateJS Suite</a>.</p><p>At the end of the day, Phaser not only did everything I needed it to do, but it  has a very strong community of support through <a href="http://html5gamedevs.com/" target="_blank" rel="external">HTML5GameDevs</a>, and it does everything I need it to do. Plus, I had already tinkered with it a bit so that definitely gave it some extra points during the selection project.</p><h2>The Highlights</h2><p>Now that I'm beyond the &quot;tinkering&quot; phaser, and into building a full game, I think I can weigh-in on the pros and cons I've come across thus far. I'm not far enough along to talk about performance, but for my little game project it seems to be running smoothly without fail.</p><h3>Support is Amazing</h3><p>As mentioned previously, the support from <a href="http://html5gamedevs.com/" target="_blank" rel="external">HTML5GameDevs</a> is great. The forums are active, and there is even a live chat for people that are registered.</p><p>I've only asked one question so far, and it was answered very quickly. The rest of the time, I search the forums for my question and 99/100 times I'll find an answer.</p><p>The <a href="https://phaser.io/examples" target="_blank" rel="external">examples section</a> of the Phaser website gives links great code snippets that help wrap your brain around how to do things with the framework.</p><p>Lastly, as they prepare Phaser v3, the community has taken on Phaser v2 and has continued to release patches to the framework.</p><h3>Focuses on 2D</h3><p>I'm just starting to learn game development and, on top of that, I'm doing this in my spare time.</p><p>When I get stuck I don't know what I don't know, but I can generally find my way around questions and articles that discuss 2D games. Since Phaser focuses on 2D, it makes consuming the API much more familiar to me rather that navigating my way around 3D game API (i.e. BabylonJS) that bring a whole new vocabulary to the table that I have to learn.</p><h3>Phaser-CE is What You're Looking For</h3><p>It appears that they fixed it on the website, but when I was starting on this project there was no mention of <em>Phaser-CE</em> on the homepage, and so I thought version 2.6.2 was the latest and greatest.</p><p>It turns out, that was incorrect.</p><p>As you'll see <a href="https://phaser.io/download/stable" target="_blank" rel="external">here on the Phaser site</a>, version 2.6.2 was the last officially supported release, while v2.7.x is the community edition that is supported by those fine community members I mentioned earlier. So, when you install your dependency with <code>npm install phaser</code> you are installing an old version of the framework. You want <code>npm install phaser-ce</code>.</p><p>The change was minimal, considering it's the same framework. It just took me for a loop as I only figured this out as I tried to submit a pull request, only to find out that I was using the wrong version of Phaser.</p><h3>JavaScript First, TypeScript Second</h3><p>I wanted TypeScript support up front because I knew it would help me get into the Phaser APIs. Now that I'm becoming more familiar with everything, I feel as though I should have toughed it out and stuck with JavaScript and Babel.</p><p>The TypeScript definition files are part of the library and are not available on through <a href="https://www.npmjs.com/package/@types/npm" target="_blank" rel="external"><code>@types</code></a> on the NPM. From what I can gather, they are done by hand. This isn't a big deal considering they work fine, but it makes me question their accuracy, especially not being avaialble through <code>@types</code>.</p><h2>Conclusion</h2><p>I don't regret choosing Phaser as it met all my short term goals and I'm still learning a lot about game development and Phaser (and it's community) is helping me with that.</p><p>Next time around, assuming Phaser v3 isn't done yet, I would proabably go with <a href="http://babylonjs.com/" target="_blank" rel="external">BabylonJS</a> as it gives you everything Phaser does, but adds some pretty powerful tooling and 3D support along with it, and has the TypeScript support I expect.</p><p>All in all, Phaser has been a great place to start with game development. I highly recommend it.</p>]]></content>
    
    <summary type="html">
    
      As a side project, I started making another JavaScript-based video game and decided to go with Phaser as my framework of choice. Here are my initial thoughts about Phaser after using it on my project for the past two months.
    
    </summary>
    
      <category term="javascript" scheme="http://www.westerndevs.com/categories/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/categories/javascript/typescript/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="phaser" scheme="http://www.westerndevs.com/tags/phaser/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 4)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-4/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-4/</id>
    <published>2016-11-21T12:30:00.000Z</published>
    <updated>2016-11-21T12:30:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 4 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="external">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="external">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">Part 3: Work</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">Part 4: Build</a></li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>In this post we are we going to create a build script in VSTS so we can generate our blog content consistently and get it ready to deploy somewhere.</p><h2>Creating Our Build Script</h2><p>First, we need to navigate over to the <em>Build</em> section of VSTS, which you can find in the navigation menu at the top of the page.</p><!-- image of build menu item --><p><img src="http://i.imgur.com/7S55XWDl.png" alt="Build and Releases Menu"></p><p>This is where we're going to create our build script by hitting the &quot;Create New Build&quot; button.</p><!-- image of new build button --><p><img src="http://i.imgur.com/6uCoEEFl.png" alt="New Build Button"></p><h2>Adding Build Tasks (Hexo Edition)</h2><p>VSTS provides plenty of build tasks. Statically generated sites will have different build tasks, so I'm going to walk you through the build tasks I setup for <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>.</p><p>It's pretty straight forward, but it helps to list them out in order.</p><ol><li>Install global npm dependencies</li><li>Install local npm dependencies</li><li>Other stuff that needs doing</li><li>Generate site content</li><li>Store site content as build asset OR Deploy!</li></ol><p>Let's go through these.</p><h3>npm Global Dependencies</h3><p>In this case, I only have one which is <code>hexo-cli</code> so that I can run the <code>hexo generate</code> command later on in our build.</p><p>You could add it's own npm task here, by adding a new task and setting the parameters of the task accordingly.</p><!-- npm install -g task --><p><img src="http://i.imgur.com/h1HFRAJl.png" alt="npm task"></p><p>Personally, I don't have a separate task. I use my project's <code>package.json</code> and set a <a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="external"><em>preinstall</em> script</a> which gets run before the <code>npm install</code> command.</p><p>Either one works really. I just like having my source code setup be as simple as <code>npm install</code> and then <code>npm start</code> to run the site.</p><h3>npm Local Dependencies</h3><p>Just like the previous, except this time we're using the default parameters. We just need the build to run <code>npm install</code> and let it do it's thing.</p><h3>Other Stuff</h3><p>Every project is a unique snowflake, and sometimes you have some extra tasks you need accomplished. In my case, I have a custom theme that I build every time. To accomplish this, I have a PowerShell script in the <code>\tools</code> directory of my source code that gets run every time.</p><!-- powershell task with parameters --><p><img src="http://i.imgur.com/aXmLKcml.png" alt="PowerShell Task with Parameters"></p><h4>CMD, Powershell, and Bash Tasks</h4><p>You're not limited to just PowerShell, but you can have CMD or even bash shell scripts executed. The only caveat of running these is making sure that the build server being used to run your build has these capabilities.</p><p>If you're using the hosted server, like I do, then PowerShell and CMD are your best bets. I did try to have both PowerShell and Bash, which resulted in getting a message saying I &quot;didn't have a host that had these capabilities&quot;.</p><p>Maybe in time we'll have hosted servers that do both, but until then you'll need to setup your own server to handle these unique dependencies or try can conform your code to use one or the other.</p><h4>Keeping it Open Source</h4><p>If you're looking to keep your source open on, you'll likely want to push it out of VSTS and into GitHub or somewhere where the public can get their hands and eyes on it.</p><p>This is the job for another script task. In my case, I followed <a href="https://nkdagility.com/open-source-vsts-tfs-github-better-devops/" target="_blank" rel="external">this blog post</a> that <a href="http://www.westerndevs.com/bios/dylan_smith/">Dylan Smith</a> directed me to and followed along.</p><h3>Generate Content</h3><p>Again, another script task. But this one is easier, as we're just running <code>hexo generate</code>.</p><p>You could write a whole script file for this too, but I opted to make it simple and just configure the build task itself.</p><!-- hexo generate build task --><p><img src="http://i.imgur.com/dGWjUTNl.png" alt="hexo generate build task"></p><h3>Save and Publish Site Content</h3><p>We'll discuss this further when we get to <a href="#">releases</a> but we need to save our content assets so we can publish them later. For hexo, this is usually the contents of the <code>public</code> folder.</p><p>To handle this, I use the <em>Copy and Publish Build Assets</em> task and configure it to save the contents of the <code>public</code> folder so that it persists after the build is complete.</p><!-- publish assets task --><p><img src="http://i.imgur.com/LJTk1wKl.png" alt="Copy and Publish Build Assets"></p><h4>...or Deploy!</h4><p>Another option is to just deploy it directly from the build script and skip the whole <a href="#">release management</a> component. This would allow you do a deployment everytime you build, making sure the latest source code is live.</p><p>Again, it's a matter of preference. The reason I like <a href="#">releases</a> over this model is to be able to manage the release of source code independenly of the build itself.</p><h2>Triggering the Build</h2><p>I have two build scripts that are almost identical. One that I use for development and continuous integration. The other is scheduled to prepare a for a weekly release of my blog.</p><p>VSTS accomodates both of these options, which you can see in the <em>Triggers</em> tab of the build script.</p><!-- image of the triggers tab --><p><img src="http://i.imgur.com/YHlzH7Cl.png" alt="Triggers Tab"></p><p>For my development build script, I trigger the build on pushes to the <code>master</code> branch of my repository. I have also configured this build script to run on a private build agent that I have setup.</p><p>I won't be covering private build agents in this series of posts, but I assure you it's very easy. I setup my development machine as a private build server, and had it setup in about 15 minutes after following <a href="https://www.visualstudio.com/en-us/docs/build/admin/agents/v2-windows" target="_blank" rel="external">these instructions</a>.</p><h2>Next Up: Releases!</h2><p>We're almost done, and technically you don't need the next step if you just want to do continual deployment and have a deployment step in your build script. That being said, I like having the release pipeline as it gives me a few other things to ensure my blogging goes out without a hitch.</p><p>More on that <a href="#">next time</a>.</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 4 of 5, we setup a _Build_ script.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 3)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-3/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-3/</id>
    <published>2016-11-14T12:30:00.000Z</published>
    <updated>2016-11-14T12:30:00.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 3 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="external">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="external">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">Part 3: Work</a></li><li>Part 4: Build</li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>In this post we are going start blogging in a controlled and coordinated manner by planning and using the <em>Work</em> tab in our VSTS project.</p><h2>What is there to plan?</h2><p>Plenty. Although features and bugs are obvious use for <em>Work</em> tab, my primary use case is post planning. I'll be focusing on using <em>Work</em> for blog posts, but realize that you can use these same practices for adding new enhancements or logging bugs in your blog.</p><h2>Post Ideas in the Backlog</h2><p>I tend to have a lot more ideas for posts than I write. Ideas are quick and easy, but writing them (at least writing them properly) is the time consuming part.</p><p>Rather than trying to write a post for every idea, I use the backlog to save my post ideas as they come up. In an Agile project, I create new user story for every post idea and tag it as a &quot;post&quot; so that I can easy filter them later.</p><p>The user story title is the idea for the post title, and I use the description to outline the post.</p><h5>Blogger Note</h5><p>The title and the outline are only two things I fill out on the work item, but without both I don't even bother saving the item because I won't remember the context without the outline.</p><h2>Planning my Posts</h2><p>Now that we have a post backlog, I start planning what posts I am going to write. In my case, this is just like sprint planning and VSTS makes this easy.</p><h3>Setting up Iterations</h3><p>For starters, I setup my iterations. I like planning about one month at a time, so I go with 4-week iterations and named by the month that consumes most of the iteration. This all happens in the <em>Work</em> configuation section of the site.</p><p><img src="http://i.imgur.com/E4GjQDM.png" alt="Work Configuration Menu"></p><p><img src="http://i.imgur.com/a27TBI4.png" alt="Creating a New Iteration"></p><h3>The <s>Sprint</s> Post Planning</h3><p>Now that we have iterations, I plan what posts I want to write for the month.</p><p>I do this by dragging the posts onto the iteration on the right side, and adding tasks as described by the <a href="https://www.visualstudio.com/en-us/docs/work/scrum/sprint-planning" target="_blank" rel="external">VSTS team</a>.</p><p><img src="http://i.imgur.com/67xoqOK.gif" alt="Adding a User Story to an Iteration"></p><h4>Tasks and Templates</h4><p>Although tasks on a blog post work item might sound excessive, my writing process has multiple steps to try and make it easy for me to blog. First I write the initial draft (text-only), followed by proof reading and filling in the images and links that I've left. Sometimes there are other tasks like updating links on old posts, like on this post which is part of a series of posts.</p><p>Since the tasks are so similar, I created a quick template that I apply to a work item that automatically puts in the tags and general tasks.</p><h3>Why do all this Planning?</h3><p>The planning takes me about 15 minutes a month, but it's still a fair question.</p><p>Because my blog is something I do on my own time, I need to stay organized so that I can go from 0 to writing in 5 minutes. Between my day job, side project, family, social committments, and supporting a local user group, my time is limited. When I have 30 minutes, I try and get something done as quickly as possible.</p><p>I found that without planning a lot of my time was spent trying to figure out what I did last time I blogged. Even if it only takes like 20 or 30 minutes to get myself sorted out and blogging, sometimes that is all the time I have to commit. If I spend all my time getting ready to blog, I won't have any time to <em>actually</em> blog.</p><h2>Writing a Post</h2><p>Now that we know what we're writing about, we can start writing posts.</p><p>Because we're using a <a href="https://www.staticgen.com/" target="_blank" rel="external">static site generator</a> a post is a new markdown file and possibly couple of image files. This is analagous adding a new feature to any other software project, and thus it is treated as such.</p><p>For me, I create a new <a href="">topic branch</a> for the post. Since I host my source code in VSTS, I use the web UI to create a new branch in the work item. On my local machine, I create a new local branch that is mapped to the new remote branch and start create a new draft post with <code>hexo new draft &quot;My Post Title&quot;</code>.</p><p><img src="http://i.imgur.com/3xZztPR.png" alt="Creating a new branch from the work item"></p><p>This creates a new post file in the <code>source\_drafts</code> folder of the project, and I start writing and going through the tasks. As I complete the tasks I make commits and associate them with the tasks and work items by adding the ID numbers in the messages. For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"wrote initial draft. part of #201 closes task #212"</span></div></pre></td></tr></table></figure><p>The <code>#201</code> and <code>#212</code> get picked up by VSTS and associate them with the cooresponding task and user story, just like it does in GitHub. Unlike GitHub, the <code>closes</code> key word doesn't actually close the work item, which I don't mind, but should be noted for those coming from GitHub like I did.</p><p><img src="http://i.imgur.com/ZO8nzTM.png" alt="Related Work in a Work Item"></p><p>Once I complete all my tasks and push all the commits to VSTS, I create a Pull Request and move the work item on the board to the &quot;Committed&quot; column.</p><p><img src="http://i.imgur.com/xT1tfEf.png" alt="A VSTS Pull Request"></p><h3>Why a Pull Request?</h3><p>Again, another good question. You're pretty good at this.</p><p>Some might it's completely unnecessary for a solo project like a blog, I like to use them for a few reasons.</p><p>For starters, VSTS (just like GitHub) gives you a web-based interface for reviewing all the code you're about to merge into your branch. This gives me an opportunity to review my post and to make sure all the pieces are in place. I'm usually about a week ahead of each post, so doing a pull request</p><p>Second, it makes the merge a bit more noticeable in the project. When I have a Pull Request waiting, my Visual Studio Code plugin will highlight it in the status bar, and it will also show up in the web-based UI.</p><p>Lastly, and most importantly, it provides me a way to publish a post without needing to have access source code and a git command line. When I'm ready to share a post, I merge a pull request into the <code>master</code> branch which then triggers a <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">build</a> and eventually a <a href="#">release</a>, which we will cover in future posts. All of that can be done from the web UI, which means as long as I have an internet connection on a device, I can login and publish a post.</p><h4>What about Scheduling Posts?</h4><p>There are ways to do that with Hexo and plenty of other static site generators. In my case, I use the <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">Build</a> and <a href="#">Release</a> parts of VSTS to manage this for me. To be continued...</p><h2>Ready. Set. Blog!</h2><p>Now we're saving post ideas as user stories, writing posts and committing them to their own topic branches, and triggering a publish workflow through Pull Requests which gives us an opportinity to do proof read prior to publishing.</p><p>Next up, we're going to <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">Build</a> our blog.</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 3 of 5, we start to make plans and _Work_ on our blog.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 2)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-2/</id>
    <published>2016-11-07T14:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 2 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="external">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="external">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">Part 3: Work</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">Part 4: Build</a></li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>In this post we are going to get our blog setup in source control so we can start add posts.</p><h2>You Don't Need Your Code in VSTS to Use VSTS</h2><p>This is important.</p><p>VSTS is an all-in-one solution for your software project. Source control is a part of that solution, but it should be noted that <em>you don't <strong>need</strong> to use VSTS hosted source control</em> to use VSTS. I had originally setup my project just to mess with builds, releases, and work items. All my <a href="https://github.com/davidwesst/dw-blog" target="_blank" rel="external">source code</a> lived exclusively on GitHub, and VSTS still worked just fine.</p><p>The only difference I've found is a few &quot;nice to have&quot; features in the Work tab, which we'll cover <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">in the next post</a>. Generally speaking, though, there isn't any significant differences or advantages with using VSTS to host your code except for convienience and those few &quot;nice to have&quot; features I mentioned.</p><h3>But I Want to Stay Open Source!</h3><p>VSTS <em>does not</em> provide you with a public view of your source code. This is my major criticism of the <em>Code</em> features, and for VSTS as a whole.</p><p>That being said, if I want people to be able to view my source code (which I do) then GitHub is a much better platform for that purpose. Consider that GitHub is ubiquitous with open source software development, so much so that even Microsoft uses it to share source code. People are more likely to find my code on GitHub than the focused platform that is VSTS.</p><p>Still, the visibility is a project. To solve this just use both. I use the private repositories of VSTS as my working repos where a have a ton of branches and use that for my builds, feature development and so on. When my work is done, I publish my branches to GitHub where people could make pull requests, review my code, and so on.</p><p>In a sense I use VSTS for internal development and GitHub for external/public development and feedback.</p><h3>But Now My Development Isn't Transparent!</h3><p>You're right, other than my git history, it's not.</p><p>But, as previously mentioned, you don't need to use VSTS to host your source code or your work items (as you'll see in <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">part 3</a>). You just need to use the parts you want, and use other tools as you see fit. If you only want to use VSTS for the builds and releases and GitHub for source control and issue tracking, then by all means go ahead and do that.</p><p>In my case, my blog is a one man show that doesn't really get a lot of people reviewing the source code. I don't need the transparency for a project this small, but I still like keeping code visible and I keep tabs on the GitHub repository by using the <a href="https://marketplace.visualstudio.com/items?itemName=YodLabs.yodlabs-githubstats" target="_blank" rel="external">GitHub Stats Widget from Yod Labs</a>.</p><p>If you're still interested in using the code tab, then keep calm and carry on. If not, you can jump ahead to the <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">Work</a>, <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">Builds</a>, or <a href="#">Releases</a> posts.</p><h2>The &quot;Code&quot; Tab</h2><p><img src="http://i.imgur.com/LgqbXYyl.png" alt="Code is front and center in VSTS"></p><p>When you open up your project in VSTS, you'll see the &quot;Code&quot; link in the header. This is where we'll be living for the duration of this post. I am also assuming that did as I did in <a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="external">part 1</a> and selected Git as the type of source control you want to use for your project.</p><h3>The Default Project Repository</h3><p>When you setup your project, you're given a default project repository with the same name of the project. In my case, I have a repository called <em>davidwesst.com</em>.</p><p>You could use this to store the source code of your blog, but I tend to use this repository as a project wiki that spans all repositories. When you click on the &quot;Welcome&quot; link on your project home page, you can see a rendered version of the README.md files in each of your repositories. This repository ends up acting as the &quot;root&quot; of all documentation on the project.</p><p>If you delete it and go back to the Welcome page you get this message:</p><p><img src="http://i.imgur.com/NaI2INbl.png" alt="When You Don't Have a Default Repository"></p><p>Since VSTS has a decicated spot for it anyway, I figure it makes sense to use it for cross-repository documentation.</p><h3>Creating Your Blog Repository</h3><p>Click on the repository dropdown menu and select <em>New Repository</em>. Name it and you're ready to push source code up to VSTS. Just follow the your static site generators instructions to setup your blog, and push the code up.</p><p>If you already have your blog published somewhere else like GitHub, you can use the <em>Import Repository</em> feature and clone the source and the history into VSTS.</p><p><img src="http://i.imgur.com/XC8Oqnpl.png" alt="Repo Dropdown Menu"></p><h4>For Those Using Hexo</h4><p>If you're using Hexo as your static site generator, you can follow <a href="https://hexo.io/docs/setup.html" target="_blank" rel="external">these instructions</a> to get setup.</p><p>Before you push, make sure you add a <code>.gitignore</code> file that excludes the <em>public</em> and <em>node_modules</em> as those folders contain the generated static content and generator dependencies, which we don't need to store in source control.</p><h2>Writing Blog Posts</h2><p>We will tackle this topic again in <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">part 3</a> but for now I want to describe the workflow I use to write blog posts. It should be noted that the workflow I'm about to describe works in either VSTS or GitHub. I used it in GitHub for a long time, and it continues to serve me well in VSTS.</p><p>Here's a summary of what I do:</p><ol><li>Create a new branch off of <code>master</code></li><li>Write the post and commit all files to the new branch</li><li>Create a Pull Request to pull the post branch into <code>master</code></li><li>Approve the PR when I'm ready to publish the post</li></ol><h3>Post Branches</h3><p>With a static site, or in this case a static blog, each post is a new file (or files if you're including images). I think of each post as a new feature and use a <a href="https://git-scm.com/book/en/v2/Git-Branching-Branching-Workflows#Topic-Branches" target="_blank" rel="external"><em>topic branch</em></a>.</p><p>My <code>master</code> branch is my most recent and stable code, and so each post is a branch off of <code>master</code>. In short, I do the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout -b post/my-new-post</div><div class="line"><span class="comment"># ...write the post...</span></div><div class="line">git add . --all</div><div class="line">git commit -m <span class="string">"wrote new post"</span></div><div class="line">git push -u origin post/my-new-post</div></pre></td></tr></table></figure><p>When I'm done, the branch contains everything I need to publish the post. All I need to do is merge, but I generally don't do that from the command line on my machine. Rather, I use Pull Requests.</p><h3>Pull Requests</h3><p>You may have noticed the Pull Requests link in the header earlier, which is a nice way to merge a post branch without needing a computer with the project setup. In my case, I tend to write my posts in advance and want to publish them on Monday mornings. I don't necessarily want to have to open up a command line and do the merge and push from my workstation.</p><p>With Pull Requests, I can do the merge from any web browser, and it forces me to give myself a code review. I look over the spelling and grammar and make sure everything looks good. When I'm done, I click &quot;Complete&quot; and it's merged into my master branch, which is what is used to generate the site content and published to my web host.</p><p><img src="http://i.imgur.com/ZXtAeaHl.png" alt="A Pull Request"></p><h2>But Wait, There's More!</h2><p>Absolultely.</p><p>More specifically <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">Work</a> for managing issue tracking, <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">Builds</a> for generating the blog content, and <a href="#">Releases</a> for publishing posts. So stay tuned!</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 2 of 5, we get our blog into source control.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="git" scheme="http://www.westerndevs.com/tags/git/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
      <category term="github" scheme="http://www.westerndevs.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Blog with VSTS (Part 1)</title>
    <link href="http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-1/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/alm/How-to-Blog-with-VSTS-Part-1/</id>
    <published>2016-10-31T12:43:31.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>This is part 1 of 5 of my <strong>How to Blog with VSTS</strong> series. Links to the other parts will be added as they are made available.</em></p><ul><li><a href="https://blog.davidwesst.com/2016/10/How-to-Blog-with-VSTS-Part-1/" target="_blank" rel="external">Part 1: Setup</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="external">Part 2: Code</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">Part 3: Work</a></li><li><a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-4/" target="_blank" rel="external">Part 4: Build</a></li><li>Part 5: Release</li></ul><hr><p>I've been tinkering with Visual Studio Team Services off and on since its public release, but never did anything really productive with it. Over the past couple of weeks, I finally bit the bullet and decided to move my most prevelant personal project into VSTS: this blog.</p><p>This post covers the setup, and more specifically what I use to produce my lovely blog. We'll get into the thick of it in <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="external">part 2</a>.</p><h3>Woah. VSTS <em>just</em> for a Blog?</h3><p>I know. Let me address this first before we continue.</p><p>It's definitely overkill. But, it provided me with a great learning experience for VSTS and the application lifecycle management tools is provides. It also was something that I'll actually use on a regular basis, as you'll see if you get through the whole series of posts.</p><p>So, yes it's like using a grenade launcher to kill an ant. That being said, it definitely gets the job done.</p><h2>The Parts</h2><p>Here's what I use in my blog project, and what you'll need if you're going to follow along.</p><h3>Hexo or another Static Site Generator</h3><p>If you're not familiar with static site generators, they are great for developers looking to blog or create simple sites. I won't be going into the details on how to use one, but they all seem to provide a similar sort of experience.</p><p>All you do is add files, generally in <a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown</a>, fill out the configuration file, and run the generate command. The generator then generates a series of static HTML files from your content and then you have the files you need to publish to a web server somewhere.</p><p>No server-side code, no database, just a bunch of files. Real simple.</p><p>I use <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> for my <a href="https://blog.davidwesst.com" target="_blank" rel="external">blog</a>, and it is used for the <a href="http://www.westerndevs.com">Western Devs</a> site. It works well, and makes scripting your build and deployment (<a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-3/" target="_blank" rel="external">which we'll see later</a>) much easier.</p><p>If you don't like Hexo then take a <a href="https://www.staticgen.com/" target="_blank" rel="external">look here</a> for a bunch of static site generators based in a variety of languages.</p><h3>Visual Studio Team Services Account</h3><p>Sign up for the free account <a href="https://www.visualstudio.com/vsts-test/" target="_blank" rel="external">here</a> and create a new team project. I used the <em>Agile</em> process because I found it gave me the flexibility I wanted, and <em>Git</em> for source control.</p><p>If you want more details about the project processes available, and the differences between them, take a look at <a href="https://www.visualstudio.com/en-us/docs/work/guidance/choose-process" target="_blank" rel="external">this link</a>.</p><p><img src="http://i.imgur.com/CYlb9sNm.png" alt="&amp;quot;Create a New Project in VSTS&amp;quot;"></p><h3>Web Host</h3><p>Just like any website, you're going to need a place to host it. Lucky for us, we're only hosting static files which makes the options pretty open.</p><p>I'm using Windows Azure, which again is overkill considering it's just static files, but I like it. If you don't want to spend money, I have also used <a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> which is free and works just as well for what we'll be doing.</p><p>The important part is having a place to host the files once they are generated. No more, no less.</p><h3>Web Browser</h3><p>VSTS is browser-based, so get a your favourite modern browser, get it updated, and you're good to go.</p><h3>Code Editor</h3><p>We're not going to be doing much code, but it'll come in handy later on.</p><p>Personally, I jump between <a href="http://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a> and <a href="http://www.vim.org/" target="_blank" rel="external">Vim</a>. I'm sure you have your favourite, and that'll do just fine for our purposes.</p><h2>You Forgot Visual Studio</h2><p>No I didn't. I don't use Visual Studio, nor do we need it.</p><p>It's not that I don't like it, but it's too heavy for the amount of coding I actually do for my blog. VSTS provides us with a web-based user interface that does everything we need for managing the source code, builds, and so on.</p><p>In conclusion, I don't use Visual Studio here because I don't need it.</p><h2>And We're Ready</h2><p>Armed with our toolbox of goodies and our project created, we're good to go on starting to blog with VSTS. <a href="https://blog.davidwesst.com/2016/11/How-to-Blog-with-VSTS-Part-2/" target="_blank" rel="external">Next up</a>, we'll starting with what is familiar and getting our code into VSTS.</p>]]></content>
    
    <summary type="html">
    
      I wanted to understand how to use Visual Studio Team Services (VSTS) for a &quot;real&quot; project. Being a noob, I decided to move my blog to VSTS to understand how _any_ project can benefit from ALM practices using VSTS. In part 1 of 5, we get things setup.
    
    </summary>
    
      <category term="alm" scheme="http://www.westerndevs.com/categories/alm/"/>
    
    
      <category term="hexo" scheme="http://www.westerndevs.com/tags/hexo/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="vsts" scheme="http://www.westerndevs.com/tags/vsts/"/>
    
      <category term="alm" scheme="http://www.westerndevs.com/tags/alm/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Use Global NPM Packages on a VSTS Self-Hosted Build Agent</title>
    <link href="http://www.westerndevs.com/development/How-to-Use-Global-NPM-Packages-on-a-VSTS-Self-Hosted-Build-Agent/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/How-to-Use-Global-NPM-Packages-on-a-VSTS-Self-Hosted-Build-Agent/</id>
    <published>2016-10-24T12:33:01.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I took a couple of weeks off of blogging to focus on a building my presentation for <a href="http://www.prdcdeliver.com/" target="_blank" rel="external">Deliver</a>. In my spare time, I started tinkering with Visual Studio Team Services, where decided to start by automating the build and release of this blog.</p><p>My build script is pretty straight forward. Setup the global dependencies with NPM, setup the local dependencies with NPM, generate the content, and publish the generated assets. This worked in my hosted agent, but not my self-hosted agent.</p><p>I found a few solutions, but I'll go through the one I selected for my build agent.</p><h3>The Problem</h3><p>My build script would run <code>npm install --global hexo-cli</code> and execute as expected. When the next step would try and use the <code>hexo generate</code> command, I would get the following error:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##[error]hexo : The term 'hexo' is not recognized as the name of a cmdlet, function, script file, or operable program. Check </span></div><div class="line"><span class="keyword">the</span> spelling <span class="keyword">of</span> <span class="keyword">the</span> name, <span class="keyword">or</span> <span class="keyword">if</span> <span class="keyword">a</span> path was included, verify that <span class="keyword">the</span> path is correct <span class="keyword">and</span> <span class="keyword">try</span> again.</div></pre></td></tr></table></figure><p>Even though the install command was successful, the build script still couldn't use the tool installed.</p><p>Another symptom of this problem is that Team Services can't see global NPM packages as common capabilities, such as Bower, Gulp, and Grunt.</p><p><img src="http://i.imgur.com/pkLEzkEl.png" alt="&amp;quot;Gulp and Grunt as capabilities&amp;quot;"></p><p>I setup my build agent to use the NetworkService user account, but it could be setup for any user. The problem is that the NetworkService account can't see the global packages on the machine after they are installed. The solution is to configure NPM to point to a folder that is visible to the NetworkService account.</p><p>Here's how you do it.</p><h3>The Solution</h3><p>I found <a href="http://stackoverflow.com/questions/38570209/making-global-npm-packages-available-to-all-users-on-windows-2012-server" target="_blank" rel="external">this solution on StackOverflow</a> which lead me in the right direction, although I didn't follow all of it.</p><p>The <a href="https://docs.npmjs.com/cli/prefix" target="_blank" rel="external"><code>npm prefix -g</code></a> command shows us path to global prefix folder, where the global npm packages are stored. We need to point this to a directory that NetworkService can read and execute. Generally speaking, the prefix folder is usually found in the user's AppData folder.</p><p>To change the prefix, run the command <code>npm config set prefix C:\\Path\\To\\Folder\\AppData\\Roaming\\npm</code> which will change the npm prefix folder to be the one specified. Because I've set my build agent NetworkService account, I point it at the NetworkService account AppData npm folder for simplicity.</p><p>Then add the folder to the PATH variable for the machine. This will let VSTS see the npm packages as capabilities so that it knows that our build server can execute Grunt, Gulp, and Bower tasks.</p><h4>Why Didn't You Reset the Prefix?</h4><p>It makes sense to reset the prefix to the previous value after the build has complete, as described in the StackOverflow solution. In my case, I wanted to make sure that if someone were logging into the build server to add another global package, let's say something like Hexo CLI, then it would be installed in the appropriate directory.</p><p>I didn't reset the prefix because I wanted to permanently configure the build agent. It's a small build server that I'm using to experiment with continuous integration and deployment. If it's good enough for StackOverflow then it's good enough for me.</p><h2>A Few Alternative Solutions</h2><p>As an alternative solution you could setup a new directory that isn't the AppData folder, add the new folder to the PATH, and then point the prefix folder at build time. You could also leverage the <code>npm bin</code> setting and setup alias in your package.json file for the global commands you're looking to use (Thanks to <a href="http://www.aaron-powell.com/" target="_blank" rel="external">Aaron Powell</a> for providing me with that one), which is another good solution that I'll revisit if I use something other than VSTS for builds.</p>]]></content>
    
    <summary type="html">
    
      I setup a self-hosted build agent in Visual Studio Team Services. My build installed global NPM packages, but the tasks that used them later on in the script would fail because they were unable to use them. This post describes what I did to get them working.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="visual studio team services" scheme="http://www.westerndevs.com/tags/visual-studio-team-services/"/>
    
      <category term="nodejs" scheme="http://www.westerndevs.com/tags/nodejs/"/>
    
      <category term="npm" scheme="http://www.westerndevs.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title type="html">Windows Not Required - The New Microsoft Development Story (Video)</title>
    <link href="http://www.westerndevs.com/Video/Windows-Not-Required-Video/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Video/Windows-Not-Required-Video/</id>
    <published>2016-10-03T14:47:31.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This is a recording of my recent Winnipeg .NET User Group talk about using Microsoft tools without requiring Windows.</p><p>It's not the most technical as I go over a ton of topics, at high level, ranging from development tools, to applications. Still, I find this stuff really interesting and hopefully you enjoy it too.</p><figure class="video"><iframe width="560" height="315" src="https://www.youtube.com/embed/BlXorwQ0DSw" frameborder="0" allowfullscreen></iframe></figure><p>You can view the slides <a href="https://davidwesst.github.io/windows-not-required" target="_blank" rel="external">here</a> and find their source code <a href="https://github.com/davidwesst/windows-not-required" target="_blank" rel="external">here on GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      I delivered a presentation at the Winnipeg .NET User Group last week, where I recorded it and posted it on YouTube. I go over a number of Microsoft development tools and technologies that don&#39;t require Windows and deliver the demos on my Linux machine.
    
    </summary>
    
      <category term="Video" scheme="http://www.westerndevs.com/categories/Video/"/>
    
    
      <category term=".NET Core" scheme="http://www.westerndevs.com/tags/NET-Core/"/>
    
      <category term="Docker" scheme="http://www.westerndevs.com/tags/Docker/"/>
    
      <category term="PowerShell" scheme="http://www.westerndevs.com/tags/PowerShell/"/>
    
      <category term="TypeScript" scheme="http://www.westerndevs.com/tags/TypeScript/"/>
    
      <category term="Visual Studio Code" scheme="http://www.westerndevs.com/tags/Visual-Studio-Code/"/>
    
      <category term="Visual Studio Team Services" scheme="http://www.westerndevs.com/tags/Visual-Studio-Team-Services/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Fix node-gyp Error on Windows</title>
    <link href="http://www.westerndevs.com/JavaScript/How-to-Fix-node-gyp-Error-on-Windows/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/JavaScript/How-to-Fix-node-gyp-Error-on-Windows/</id>
    <published>2016-09-26T18:51:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I hit this problem once or twice a year and always seem to forget how easy it is to fix the problem. This blog post will ensure that not only I remember, but the entire Internet will remember the solution I use.</p><p>Here goes.</p><h2>The Problem</h2><p>The problem is simple: You pull down a repository that uses NPM for package management onto your Windows machine, you type <code>npm install</code> and you get something like this:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm ERR! Failed at the <span class="tag">&lt;package&gt;</span>@<span class="tag">&lt;version&gt;</span> install script '<span class="keyword">node</span><span class="title">-gyp</span> rebuild'</div></pre></td></tr></table></figure><p>or</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gyp <span class="keyword">ERR</span>! <span class="keyword">stack</span> <span class="keyword">Error</span>: Can't find Python executable <span class="string">"python"</span>, you can <span class="keyword">set</span> the PYTHON env variable.</div></pre></td></tr></table></figure><p>This is because the project you're trying to build requires the <a href="https://github.com/nodejs/node-gyp" target="_blank" rel="external">node-gyp</a> package to build something natively on the platform. That package required Python 2.7 and a few other pieces too.</p><h2>The Solution</h2><p>Simple problems sometimes get simple solutions.</p><p>Thanks to the node-gyp team, that is the case and they have documented it in the project <a href="https://github.com/nodejs/node-gyp" target="_blank" rel="external">README</a>.</p><p>Using a <em>PowerShell</em> CLI instance with administrative priviledges, and use the following code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --global --production windows-build-tools</div></pre></td></tr></table></figure><p>And that's it.</p><p>There is a manual option as well, but I haven't needed to use it as the first option always works for me.</p>]]></content>
    
    <summary type="html">
    
      Whenever I get a new machine, I pull down a new project using the `npm install command and get an error related to python and node-gyp. This post will remember the fix for this problem that I always forget.
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="NodeJS" scheme="http://www.westerndevs.com/tags/NodeJS/"/>
    
      <category term="node-gyp" scheme="http://www.westerndevs.com/tags/node-gyp/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Build ReactJS with Gulp</title>
    <link href="http://www.westerndevs.com/JavaScript/How-to-Build-ReactJS-with-Gulp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/JavaScript/How-to-Build-ReactJS-with-Gulp/</id>
    <published>2016-09-19T23:55:48.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I wanted to play with ReactJS last week and figured I would just add another gulp talk to my build process, being that it's all the rage right now.</p><p>It turns out that it wasn't that simple, as it turns out that the <a href="https://www.npmjs.com/package/gulp-react" target="_blank" rel="external"><code>gulp-react</code></a> has been &quot;deprecated in favor of gulp-babel&quot;. I hadn't planned on learning <a href="http://babeljs.io/" target="_blank" rel="external">Babel</a>, but it turns out it wasn't very difficult once I was able to put all the pieces together.</p><p>Here's what I did.</p><p>You can find an extended version of the code in this post in my web project's <a href="https://github.com/davidwesst/dw-www/blob/master/gulpfile.js" target="_blank" rel="external"><code>gulpfile.js</code></a>. As of this writing, it can be found in the <code>feat/talks</code> branch but should be merged into the <a href="https://github.com/davidwesst/dw-blog" target="_blank" rel="external"><code>master</code></a> branch  soon enough.</p><h2>The Gulp Task</h2><p>Let's start with the gulp task and I'll walk you though it step by step.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// packages </span></div><div class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">babel= <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>),</div><div class="line">sourcemaps= <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</div><div class="line">    </div><div class="line"><span class="comment">// build all the JavaScript things</span></div><div class="line">gulp.task(<span class="string">'build-script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> src = [</div><div class="line"><span class="string">'./src/script/*.js'</span>,</div><div class="line"><span class="string">'./src/components/*.jsx'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">return</span> gulp.src(src)</div><div class="line">.pipe(sourcemaps.init())</div><div class="line">.pipe(babel(&#123;</div><div class="line"><span class="attr">presets</span>: [</div><div class="line"><span class="string">'es2015'</span>,</div><div class="line"><span class="string">'react'</span></div><div class="line">]</div><div class="line">&#125;))</div><div class="line">.pipe(concat(<span class="string">'dw.js'</span>))</div><div class="line">.pipe(gulp.dest(<span class="string">'./dist/script'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>It's not overly complex, but there is a lot going on. Let me walk you though it.</p><h3>Dependencies</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// packages</span></div><div class="line"><span class="keyword">var</span> gulp        = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">babel= <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>),</div><div class="line">sourcemaps= <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);</div></pre></td></tr></table></figure><p>These are the packages I used in this solution. Here's the breakdown in case you don't feel like searching out each one:</p><ul><li><a href="https://www.npmjs.com/package/gulp" target="_blank" rel="external">gulp</a> is the build tool itself</li><li><a href="https://www.npmjs.com/package/gulp-babel" target="_blank" rel="external">gulp-babel</a> is the babel plugin that builds react for us</li><li><a href="https://www.npmjs.com/package/gulp-sourcemaps" target="_blank" rel="external">gulp-sourcemaps</a> is a pluging that generates sourcemaps for us</li></ul><p>There are a couple of unlisted packages that you'll need as well. More specifically, the Babel preset packages. I use two:</p><ul><li><a href="https://www.npmjs.com/package/babel-preset-es2015" target="_blank" rel="external">babel-preset-es2015</a> because writing modern JavaScript is awesome and helps with writing ReactJS code.</li><li><a href="https://www.npmjs.com/package/babel-preset-react" target="_blank" rel="external">babel-preset-react</a> which does the ReactJS stuff we need</li></ul><p><strong>NOTE: You don't need the es2015 preset package, but you should use because you don't hate yourself enough to write old JavaScript</strong></p><h3>Pipeline</h3><p>Things start simple with the declaration of my source files and kicking off the gulp pipe:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> src = [</div><div class="line"><span class="string">'./src/script/*.js'</span>,</div><div class="line"><span class="string">'./src/components/*.jsx'</span></div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">return</span> gulp.src(src)</div></pre></td></tr></table></figure><p>Next up, I intialize the sourcemaps plugin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.pipe(sourcemaps.init())</div></pre></td></tr></table></figure><p>If you're not sure what sourcemaps are, <a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/" target="_blank" rel="external">look them up</a> as all the browser development tools support them and they made debugging transpiled code much easier.</p><p>Now, we leverage all the Babel things and do the actual transpilation.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.pipe(babel(&#123;</div><div class="line"><span class="attr">presets</span>: [</div><div class="line">    <span class="string">'es2015'</span>,</div><div class="line"><span class="string">'react'</span></div><div class="line">]</div></pre></td></tr></table></figure><p>At this point were piping our source code into Babel, and it applies the preset <a href="https://babeljs.io/docs/plugins/" target="_blank" rel="external">babel plugins</a> for ES2015 and React. If you didn't include the presets earlier, you would get an error at this point so make sure they're installed.</p><p>Now we just write out our sourcemaps and our newly compiled JavaScript and JSX files to our output directory.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.pipe(sourcemaps.write(<span class="string">'.'</span>))</div><div class="line">.pipe(gulp.dest(<span class="string">'./dist/script'</span>));</div></pre></td></tr></table></figure><p>Et voila! Your gulp task transpiles your JSX and JS files. You can even use some <a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="external">ES2015</a> to boot.</p>]]></content>
    
    <summary type="html">
    
      I started to tinker with React last week and needed to do some digging on how to transpile the React JSX files using Gulp. In this post, we walkthrough my newly updated Gulp task that transpiles JSX and JavaScript files.
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="ReactJS" scheme="http://www.westerndevs.com/tags/ReactJS/"/>
    
      <category term="Gulp" scheme="http://www.westerndevs.com/tags/Gulp/"/>
    
      <category term="Babel" scheme="http://www.westerndevs.com/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Compile Typescript into a Single File with AMD Modules with Gulp</title>
    <link href="http://www.westerndevs.com//TypeScript-with-AMD-and-Gulp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//TypeScript-with-AMD-and-Gulp/</id>
    <published>2016-09-12T12:25:01.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been tinkering with TypeScript lately and was trying to setup my project to compile all of my modules into a single file, which would then be used in an HTML page. Maybe this is obvious to the more experienced TypeScript developer, but I had made a number of false assumptions while trying to get this to work.</p><p>This post will walk you through what I did to setup my build and get it working in an HTML page.</p><p><strong>You can follow along at home with the source code which I've put up on <a href="https://github.com/davidwesst/ts-project-template" target="_blank" rel="external">GitHub</a></strong></p><h2>Modular TypeScript</h2><p>My project is starting out simple, with a single module and a couple of different &quot;Apps&quot; that will use the module. Module in TypeScript is extensively documented in the <a href="">TypeScript Handbook</a>, so if you're not familiar with this I would suggest reading up on it as it's pretty awesome once you start using it.</p><p>In any case, here's my code:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ModuleOne.ts</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ModuleOne &#123;</div><div class="line">    sayHello() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello from Module1!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sayHelloTo(who: <span class="built_in">string</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + who.trim() + <span class="string">". This is Module1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ModuleTwo.ts</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ModuleOne &#123;</div><div class="line">    sayHello() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello from ModuleTwo!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sayHelloTo(who: <span class="built_in">string</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Hello "</span> + who.trim() + <span class="string">". This is ModuleTwo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// App.ts</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Module1 <span class="keyword">from</span> <span class="string">"./modules/Module1"</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Module2 <span class="keyword">from</span> <span class="string">"./modules/Module2"</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;</div><div class="line">    start() &#123;</div><div class="line">        <span class="keyword">let</span> m1 = <span class="keyword">new</span> Module1.ModuleOne();</div><div class="line">        <span class="keyword">let</span> m2 = <span class="keyword">new</span> Module2.ModuleTwo();</div><div class="line">        </div><div class="line">        m1.sayHelloTo(<span class="string">"David Wesst"</span>);</div><div class="line">        m2.sayHelloTo(<span class="string">"David Wesst"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>I have a single application that is using two modules. Plain and simple. Next up, I compile my code into a single file, then reference that in my HTML, and done like dinner.</p><p>...or so I thought.</p><h2>The <code>--outFile</code> Parameter</h2><p>Reading through the doucmentation about TypeScript compilation, I found the <code>--outFile</code> or <code>--out</code> parameter in the <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="external">documentation</a>. I immediately assumed that I was done, as I would simple choose my ES target, select the type of modules I would like, and presto.</p><p>That wasn't the case.</p><p>Being a person who likes modern JavaScript, I had originally opted to output ES6 compatible code complete with the new modules.</p><p>This is was my first mistake.</p><p>I found was that when I compiled, I would get a single output file but it would be completely blank. No error, but just an empty file. This is expected behaviour, as the <code>--outFile</code> option only supports <em>commonjs</em> and <em>amd</em>. That meant no ES6 or even ES2015 modules for my project, which is probably for the best considering how few web browsers in the wild actually support ES6 modules as of this writing.</p><p>In the end, I decided to go with AMD modules as I had some experience with <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>.</p><p>Now, when I try to compile again it works as expected! One big JavaScript file ready to go.</p><p>...sort of.</p><h2>Using My Compiled TypeScript</h2><p>Somewhere along the line, I assumed that whatever JavaScript file I compiled would only need me to add a <code>&lt;script&gt;</code> tag reference to point to it like any other JavaScript file.</p><p>This was my second mistake, albeit a pretty silly one.</p><p>AMD modules have always needed RequireJS to load properly. That's the purpose for RequireJS. Maybe I had assumed the TypeScript compiler would embed this library or something, but whatever my reasoning it was wrong. I needed to include a <code>data-main</code> file, as you do with every RequireJS example.</p><p>I added this to my HTML file, along with the RequireJS library in my project:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"main"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>Then, my <code>data-main</code> file goes something like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line">  </div><div class="line">requirejs.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'lib'</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="string">'App'</span>:<span class="string">'../app'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">requirejs([<span class="string">'App'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">MyApp</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'starting application...'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> MyApp.App();</div><div class="line">    app.start();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>I'm not going to go into the details here, but my <code>paths</code> object in the <code>requirejs.config</code> is pointing <code>App</code> to our outputted file. We use this in our main function and point our compiled modules to the <code>MyApp</code> object. We then call the <code>start()</code> function on our exported class and we are off to the races.</p><p>When we run the application, we see the following in the JavaScript console.</p><p><img src="http://i.imgur.com/38ngK52.png" alt="What the console window should look like"></p><h2>Details on Compilation</h2><p>I skipped that part on purpose, because I don't use the TSC compiler directly. Rather, I use <a href="https://github.com/ivogabe/gulp-typescript" target="_blank" rel="external"><code>gulp-typescript</code></a> with a <code>tsconfig</code> file to compile my TypeScript and create sourcemaps for them. All of this is detailed on the <a href="https://www.npmjs.com/package/gulp-typescript" target="_blank" rel="external">package page</a>, but I'll include my gulp task to make sure you have all the details in one place.</p><p>You're welcome. ;)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tsProject = ts.createProject(<span class="string">'tsconfig.json'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'build-ts'</span>, ()=&gt; &#123;</div><div class="line">    <span class="keyword">let</span> tsResult = tsProject.src()</div><div class="line">                    .pipe(sourcemaps.init()) <span class="comment">// using gulp-sourcemaps as prescribed by gulp-typescript</span></div><div class="line">                    .pipe(ts(tsProject));</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> tsResult</div><div class="line">            .js</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">            .pipe(connect.reload());  <span class="comment">// I use gulp-connect to watch and reload the page as I develop</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Oh, and here's my <code>tsconfig.json</code> file too.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"compilerOptions"</span>: &#123;</div><div class="line">        <span class="string">"module"</span>: <span class="string">"amd"</span>,</div><div class="line">        <span class="string">"rootDir"</span>: <span class="string">"./src/ts"</span>,</div><div class="line">        <span class="string">"sourceRoot"</span>: <span class="string">"./src/ts"</span>,</div><div class="line">        <span class="string">"outFile"</span>: <span class="string">"app.js"</span>,</div><div class="line">        <span class="string">"target"</span>: <span class="string">"es5"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"exclude"</span>: [</div><div class="line">        <span class="string">"node_modules"</span>,</div><div class="line">        <span class="string">"dist"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      The lessons I learned and the steps I took to compile TypeScript modules into a single file with AMD modules using Gulp, along with how I consumed those compiled modules in my HTML application.
    
    </summary>
    
    
      <category term="gulp" scheme="http://www.westerndevs.com/tags/gulp/"/>
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
      <category term="typescript" scheme="http://www.westerndevs.com/tags/typescript/"/>
    
      <category term="amd" scheme="http://www.westerndevs.com/tags/amd/"/>
    
      <category term="requirejs" scheme="http://www.westerndevs.com/tags/requirejs/"/>
    
  </entry>
  
  <entry>
    <title type="html">How to Use Highlight.Js with Bower and Gulp</title>
    <link href="http://www.westerndevs.com//How-to-Use-Highlight-Js-with-Bower-and-Gulp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//How-to-Use-Highlight-Js-with-Bower-and-Gulp/</id>
    <published>2016-08-29T14:07:11.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>One of the challenges I faced when getting my new blog theme up and running was getting <a href="https://highlightjs.org" target="_blank" rel="external">highlight.js</a> working as I wanted it to. The library has support for a riduculous number of languages, and provides theming capabilities, so it was the clear choice when it came to syntax highlighting for the web. The challenge is that tt's not just adding simple script tag and you're done with it. They seem to expect you to know what you're doing when consuming the library.</p><p>Remember: this is a <em>good thing</em>.</p><p>If you're only include code snippets for HTML and JavaScript, why would you want to bring down the stylesheets for D, Erlang, and ActionScript too? Same goes for the themes too. You're likely going to pick a single theme and go with it, and not need all 77 they include. Because of the size of highlight.js, bringing it all down to the client would have a significant impact on your site's performance.</p><p>Lucky for us, the folks in charge of highlight.js have given us all the tools we need to make using the library in our application nice and performant. In my case, I use <a href="https://bower.io" target="_blank" rel="external">Bower</a> as my package manager and <a href="http://gulpjs.com" target="_blank" rel="external">Gulp</a> as my build system, which worked well once I figured out what I was doing. Let me walk you though it.</p><h2>Installing Highlight.js with Bower</h2><p>To start, you'll need to add highlight.js to your project using Bower.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install --save highligh.js.origin</div></pre></td></tr></table></figure><p>Generally speaking, after you install a package from Bower you have a ready-to-use JavaScript library. With highlight.js, this is not the case. Rather, you are left with source code ready to be built as you need it. To do that, we are going to use Gulp.</p><h2>Building Highlight.js with Gulp</h2><p>The hard work has already been done by the highlight.js team, as they have already included a lovely build tool for us to use. You can read about the details <a href="http://highlightjs.readthedocs.io/en/latest/building-testing.html" target="_blank" rel="external">here in the building and testing documentation</a>.</p><p>There are two parts to &quot;building&quot; highlight.js: the JavaScript and the stylesheets. We'll be creating a task for each of them.</p><h3>Building highlight.js JavaScript</h3><p>Let's start with the JavaScript component.</p><p>If you read the <a href="http://highlightjs.readthedocs.io/en/latest/building-testing.html" target="_blank" rel="external">docs</a> earlier, you know that there is a NodeJS script in the <code>tools</code> directory that will do all the heavy lifting. All we need to do in our Gulp task is use that script.</p><p>Here's my Gulp task:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'process-highlightjs-script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> command = <span class="string">'cd bower_components/highlight.js.origin'</span></div><div class="line">                    + <span class="string">' &amp;&amp; npm install'</span> </div><div class="line">                    + <span class="string">' &amp;&amp; node tools/build :common'</span>;</div><div class="line">    exec(command, (err, stdout, stderr)=&gt; &#123;</div><div class="line">        <span class="built_in">console</span>.log(stderr);</div><div class="line">        <span class="built_in">console</span>.log(stdout);</div><div class="line"></div><div class="line">        callback(err);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>It looks a little strange for a gulp task, but all I'm doing is executing a shell command using the <a href="https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback" target="_blank" rel="external"><code>exec</code></a> in NodeJS to spawn a child process. The important part is in the <code>command</code> variable. Let's walk through it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> bower_components/highlight.js.origin</div></pre></td></tr></table></figure><p>First, I'm moving into the root directory of the highligh.js.origin package we previously installed using Bower.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><p>Then, I'm installing the dependencies that are needed by the provided build tool.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node tools/build :common</div></pre></td></tr></table></figure><p>Finally, I'm running the build command as specified in the documentation. This part should be changed to make sure it includes the languages you want to display in your application. Details are in their <a href="http://highlightjs.readthedocs.io/en/latest/building-testing.html" target="_blank" rel="external">documentation</a>.</p><p>The rest is just outputting the standard out and standard error streams to the console, and calling the Gulp callback to make sure we come back to our original process, as per the <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#async-task-support" target="_blank" rel="external">Gulp documentation</a>.</p><p>If everything is done correctly, you should have a new <code>build</code> folder in the <code>highlight.js.origin</code> folder that contains your newly build library.</p><h2>Building Highlight.js Themes for SASS</h2><p>I suppose this part is optional, but it shouldn't be.</p><p>To make optimize your site, you should be minimizing the number of requests that the client browser needs to make to get all the required resources for your application. For styling, that involves concatenanting all of your styles and style libraries into a single file.</p><p>To do this, I use <a href="http://sass-lang.com" target="_blank" rel="external">SASS</a> or, more specifically, <a href="https://www.npmjs.com/package/gulp-sass" target="_blank" rel="external">gulp-sass</a> to build all of my stylesheets and combine them into a single CSS file as described by the <a href="http://sass-lang.com/guide#topic-5" target="_blank" rel="external">SASS documentation</a>. I'm going to assume that you're doing the same, or at least something similar in your application that will be using highlight.js.</p><p>Because SASS only handles combining other <code>scss</code> files, I copy the theme stylesheet into a newly named <code>scss</code> file. Here's my gulp task for that:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'process-highlightjs-style'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> stylesheets = [</div><div class="line">        <span class="string">'./bower_components/highlight.js.origin/src/styles/atom-one-dark.css'</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> gulp.src(stylesheets)</div><div class="line">            .pipe(rename(<span class="string">'highlight.js.scss'</span>))</div><div class="line">            .pipe(gulp.dest(<span class="string">'./bower_components/highlight.js.origin/scss'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>Then in my main stylesheet, I include:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">'../../bower_components/highlight.js.origin/scss/highlight.js'</span>;</div></pre></td></tr></table></figure><p>This will bring in the <code>highlight.js.scss</code> file when I build my styles using <code>gulp-sass</code> in my application stylesheet build task.</p><p>And now highlight.js ready to Use in our application.</p><figure class="image">    ![Highlight.js in Action](http://i.imgur.com/1cUniu9.png)    <figcaption>Highlight.js in Action</figcaption></figure><h4>Caveat About Using Highlight.js with Markdown</h4><p>My post assumes that for any blocks of text where you want syntax highlighting you're comfortable using the default <a href="https://highlightjs.org/usage/" target="_blank" rel="external">highlight.js usage</a> behaviour of wrapping the code with <code>&lt;pre&gt;&lt;code&gt;</code> elements.</p><p>Although I blog using Markdown, at the time of this writing I still wrap my text with these elements, unlike <a href="https://help.github.com/articles/creating-and-highlighting-code-blocks/" target="_blank" rel="external">GitHub flavoured markdown</a> that lets define the language using regular Markdown syntax.</p><p>The reason for this, is that my blog engine renders the Markdown syntax with a bunch of extra HTML woven throughout the code to display it without the need for a library like highlight.js.</p><p>It might not be a big deal for you or your project, but I thought it was something you should be aware of when if you're planning on using highlight.js in your application.</p>]]></content>
    
    <summary type="html">
    
      One of the best libraries I&#39;ve seen for syntax highlighting on the web is highlight.js, IMHO. The catch to using the library is that it takes a bit more effort to setup than just adding a script tag and being done with it. In this post, I&#39;ll walk you through the steps I took to get this up and running with Bower and Gulp.
    
    </summary>
    
    
      <category term="gulp" scheme="http://www.westerndevs.com/tags/gulp/"/>
    
      <category term="bower" scheme="http://www.westerndevs.com/tags/bower/"/>
    
      <category term="highlight.js" scheme="http://www.westerndevs.com/tags/highlight-js/"/>
    
      <category term="javascript" scheme="http://www.westerndevs.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title type="html">Mobile First Design Tips</title>
    <link href="http://www.westerndevs.com//Mobile-First-Design-Tips/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//Mobile-First-Design-Tips/</id>
    <published>2016-08-16T12:55:17.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Last weekend I released an updated version of my blog and website that share a similar design. I decided to go with a mobile-first approach when it came to the design, which is a tried and tested way to create responsive web applications. Along the way, I tripped up and made a few mistakes that cost me some time and rework, but could have been easily corrected had I had these tips beforehand.</p><h3>Don't Forget the Viewport meta tag</h3><p>More specifically, something like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> /&gt;</span></div></pre></td></tr></table></figure><p>I forgot about the first week of implementing my stylesheet. I won't say that all my work was lost after adding it, but it certainly tossed all the detail I had put into the design implementation out the window.</p><p>All modern designs have this header tag. You can <a href="https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag" target="_blank" rel="external">read more about it on the MDN</a> but, to summarize, it defines the width of your application viewport and the scale that it loads up in. Read through the section entitled <a href="https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag#A_pixel_is_not_a_pixel" target="_blank" rel="external">A Pixel is Not a Pixel</a> in the previous MDN article to get a better understand of this.</p><p>The important thing to know is that without this, you will feel pain.</p><h3>Dev Tool Emulators are Your Friends</h3><p>Edge, Chrome, Opera, Firefox, and Safari all have some kind of responsive design emulator tool to help make testing your code easy. Use it from the start, by selecting a pre-set responsive profile for the smallest device you care about for your web application.</p><p>This doesn't replace testing on an real small-screen device, but it definitely gets you moving on the development front.</p><p>Using the built-in emulators from the get-go enforces the mobile-first approach by ensuring that you start with the minimal amount of screen real-estate when building your application. As I learned, it is easy to get caught up in adding extra content because you think you'll have the space, which brings me to the next tip.</p><p><img src="http://i.imgur.com/5JsR2Icl.png" alt="Responsive Tools in Internet Explorer"></p><h3>Start without CSS</h3><p>No really, start without any styling.</p><p>You might wonder why, but it really helps with understanding what &quot;content&quot; you're displaying. If you have a large number of elements on the screen that don't actually convey any information, you are probably making your application less accessible.</p><p>For example, if you have a lot of icons that are just there for asthetic purposes, you'll notice them a lot more in the plain HTML version of your site.</p><p>Not using any CSS also helps with the next tip.</p><p><img src="http://i.imgur.com/TCDTcPGl.png" alt="My site without CSS"></p><h3>Show <em>ONLY</em> The Bare Minimum</h3><p>As you work on a page or a view, make sure you know what the bare minimum amount of content can go on the page to make sure it is still usable. Being more of a usability problem, it might be up to your designer or user experience expert to solve this problem, but it'll be up to you to develop and you'll be responsible for &quot;fixing&quot; the page when it's too cluttered if you don't have this information up front.</p><p>In my case, I wanted to display a list of blog posts. There is a lot of metadata for each post, but I needed to boil it down the bare minimum. From there, I was able to start placing the elements on screen and start sizing them. As I increased the screen size to test the responsiveness of my design, I added or changed the styling of certain elements to take advantage of the larger screen.</p><blockquote><p>But how do you pick which screen sizes should be considered &quot;larger&quot;? There are so many devices with so many different screen sizes! <em>-- You</em></p></blockquote><p>Great question (and segway) into my next tip!</p><h3>Steal Media Query Breakpoints</h3><p>Although every project is a unique flower, at the end of the day the majority of our users are not. At least in the device sense. For this reason, I decided to start with the breakpoints <a href="http://getbootstrap.com/css/#responsive-utilities" target="_blank" rel="external">defined in Bootstrap 3</a> and ended up using only a few them for what I needed.</p><p>I used a few of the queries defined <a href="https://teamtreehouse.com/community/are-there-standard-media-query-break-points" target="_blank" rel="external">in this forum post</a> which helped me get my simple, yet responsive, design working on extra small screens and beyond.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="comment">/*==========  Mobile First Method  ==========*/</span></div><div class="line"></div><div class="line"><span class="comment">/* Custom, iPhone Retina */</span> </div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">320px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Extra Small Devices, Phones */</span> </div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">480px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Small Devices, Tablets */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">768px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Medium Devices, Desktops */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">992px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Large Devices, Wide Screens */</span></div><div class="line">@<span class="keyword">media</span> only screen and (min-width : <span class="number">1200px</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      When redesigning my personal website and blog, I started from scratch and attempted to apply a mobile-first design approach. Here are a few tips that I picked up along the way while creating and implementing my new design that might prevent some mistakes on your own sites.
    
    </summary>
    
    
      <category term="css" scheme="http://www.westerndevs.com/tags/css/"/>
    
      <category term="mobile" scheme="http://www.westerndevs.com/tags/mobile/"/>
    
      <category term="responsive" scheme="http://www.westerndevs.com/tags/responsive/"/>
    
  </entry>
  
  <entry>
    <title type="html">Keeping Your Edge on an Extended Break</title>
    <link href="http://www.westerndevs.com//keeping-your-edge/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//keeping-your-edge/</id>
    <published>2016-07-18T14:30:33.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I recently came off of four months of parental leave where I had a fantastic time bonding with my new daughter. Although four months doesn't seem like much of a hiatus, I learned very quickly that being a full time parent doesn't leave much time to keeping my professional edge.</p><p>They might seem obvious, but it took me a while to find a balance to make sure spending time with my daughter <em>didn't</em> play second fiddle to my profession passion and/or obsession. I also didn't want to give up the little bit of sleep I've managed to get, which bring me to the three things that really helped keep up up-to-date.</p><p><img src="https://blog.davidwesst.com/2016/07/Keeping-Your-Edge-on-an-Extended-Break/office-daycare.jpg" alt=""></p><h3>Late Night Podcasts</h3><p>There were plenty of nights where I was awake trying to calm down an unhappy baby, or just sitting there awake unable to sleep for whatever reason. Instead of just sitting there being alone with my frustration, I would pop in on earbud and listing to one of the many development podcasts (like the <a href="http://www.westerndevs.com/podcasts/">WesternDevs podcast</a> <em>hint hint</em>) or the <a href="https://www.youtube.com/channel/UCkDkgK59ygwHHMDSiW0M3-g" target="_blank" rel="external">Bithell Games podcast</a> where they talk the business of video game development.</p><p>Given the latter podcast isn't my specialty, it is defintely something I am very interested and am able to draw parallels between regular software development and video game software development.</p><p>...which leads me to my next point.</p><h3>Revisiting Hobby Projects</h3><p>We all have a million ideas, some of which have become abandoned repository in the bowels of GitHub or somewhere on our hard drives. Now that time is even more scarce, it makes sense to revisit some of these and see if there are any that can be broken down into very small parts that you can tinker with once and a while.</p><p>For me, I redid my <a href="https://github.com/davidwesst/dw-www" target="_blank" rel="external">website</a>, started another new video game project, and upgraded the theme on <a href="https://github.com/davidwesst/dw-blog" target="_blank" rel="external">my blog</a>. It wasn't just coding though, it involved some actual planning on my part where I looked at all the projects and found ones that could be broken up into small, bite-sized tasks which lead to a feeling of accomplishment when I acutally found time to work on something.</p><p>It helped keep my coding, but more importantly, it let me practice my software planning skills. Breaking projects down into small and consumable tasks, and deciding what is &quot;good enough&quot; for any project to be released is an important skill to have in the software development world. It's especially difficult when you are your own client.</p><h3>User Groups and Online Meetups</h3><p>If you're lucky enough to have a support system in place and have a babysitter willing to come by to give you a break for a few hours, you might want to check out whatever local user groups are in your area. If not, there are always events happening online that you can attend virtually complete with a chat window.</p><p>This was something I didn't get to do a lot of, but when I did it was really nice. Meeting up with a community of like minded professionals and take a break from diapers and the like was really enjoyable and really helped keep me in the loop.</p><p>I managed to get to my local .NET user group a few times, but I made a point to attend online conferences like <a href="https://build.microsoft.com/" target="_blank" rel="external">\build</a> and<a href="https://channel9.msdn.com/events/WebPlatformSummit/edgesummit2016" target="_blank" rel="external">Microsoft Edge Web Summit</a> to keep myself in the loop and up-to-date. Plus, being an online streamed conference, the content ends up available on demand very shortly after it's broadcasted just in case you have to stop watching early because of a grumpy baby.</p><h2>In Conclusion</h2><p>This post might be filled with obvious tips and tricks, but I wanted to take a moment to share. Balancing &quot;real life&quot; with your professional life can be challenging regardless of what is happening, and sometimes we need to take a break from our professional passions. Hopefully this post shows you that taking an extended break doesn't mean you have to give up your professional edge.</p><h5>Photo Credits</h5><ul><li><a href="https://morguefile.com/creative/anitapeppers" target="_blank" rel="external">Anita Peppers | office-daycare.jpg</a></li></ul>]]></content>
    
    <summary type="html">
    
      A few quick tips on how I kept up-to-date in the professional world while taking a four month hiatus for parental leave _without_ giving up time with my daughter.
    
    </summary>
    
    
      <category term="parenting" scheme="http://www.westerndevs.com/tags/parenting/"/>
    
  </entry>
  
  <entry>
    <title type="html">Using text-overflow:ellipsis with Inline Flex</title>
    <link href="http://www.westerndevs.com/css/Using-Overflow-Ellipsis-in-Inline-Flex/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/css/Using-Overflow-Ellipsis-in-Inline-Flex/</id>
    <published>2016-02-29T20:58:40.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><a href="http://www.westerndevs.com/bios/dave_paquette/">Dave Paquette</a>, a fellow Western Dev, hit a strange CSS snag the other day. He wanted to use the <code>text-overflow: ellipsis</code> on a flexbox item that displayed text, where the ellipsis would show up if the text was too long.</p><p>It didn't work as expected, but after some digging, a solution was discovered. This post exists to document both the problem and solution with the hope that it prevents future headaches for other CSS developers.</p><h2>The Problem</h2><p>His code went something like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Item Code 321<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Descriptive Text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Item Code that is way too long and shoud use ellipsis<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Descriptive Text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Item Code 123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Descriptive Text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span> <span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The goal here is to have all the <code>&lt;span&gt;</code> elements line up, regardless of their contents. If their contents exceed the length of the <code>&lt;span&gt;</code> then should display an ellipsis.</p><p>This isn't the case.</p><p>Instead, you get something like this:</p><p>We have everything aligned, but no ellipsis. Why?</p><h2>The Solution</h2><p>It turns out that this is the expected behaviour (see &quot;But Why?&quot; section below).</p><p>The solution is to make sure that we apply the <code>text-overflow</code> property to a block element that lives inside a flex item. In our case, we need to wrap the text we want to have the ellipsis show up in a block element.</p><p>The working code looks like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          Item Code 321</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Descriptive Text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          Item Code that is way too long and shoud use ellipsis</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Descriptive Text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>Icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">          Item Code 123</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Descriptive Text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> <span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span> <span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span> <span class="selector-tag">span</span> <span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The <code>&lt;div&gt;</code> we introduce is a block element that lives inside of the flex item. Now the <code>text-overflow</code> property applies, and all is good!</p><h3>The Solution in Action</h3><p>In case you want to see the end result working, here you can check it out <a href="https://jsfiddle.net/davidwesst/fhkt9mco/5/embed/html,css,result" target="_blank" rel="external">here</a>.</p><script async src="https://jsfiddle.net/davidwesst/fhkt9mco/5/embed/html,css,result/"></script><h2>But Why?</h2><p>I'll try and explain this, but be aware that I'm likely oversimplifying things.</p><p>As I mentioned before, this whole issue is expected behaviour. If you look at <a href="https://drafts.csswg.org/css-ui/#text-overflow" target="_blank" rel="external">the spec</a> for, <code>text-overflow</code> you find the definition you see in the quote below</p><p>This property specifies rendering when inline content overflows its line box edge in the inline progression direction of its block container element (&quot;the block&quot;) that has overflow other than visible.</p><p>It turns out <code>text-overflow</code> isn't meant to work on flex items, rather it is meant to work on block items as per the spec.</p><p>That being said, so what? I mean, can't the spec be adjusted to include <code>text-overflow</code> on flex items? Although you would think it's not a big deal to make this work for flex-items too, there are a number of considerations that need to be taken into account. More specifically, how flexbox works.</p><p>It turns out that there really isn't a clean way to do this. If you're wondering how I came to that conclusion you can stop because I didn't. Those responsible for the specification did, and you can read the full conversation that started with a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=912434" target="_blank" rel="external">Mozilla bug report</a> and leads to a whole <a href="http://lists.w3.org/Archives/Public/www-style/2013Sep/0070.html" target="_blank" rel="external">mail group discussion</a> about why it should (or, in this case, should not) be implemented as part of the spec.</p><p>And that, ladies and gentlemen, is how you get <code>text-overflow</code> working on flex items. You don't. :)</p>]]></content>
    
    <summary type="html">
    
      Two out of three Dave&#39;s hit this obscure CSS problem that turned out to be expected behaviour. David Wesst walks us through the reason why and how to fix it.
    
    </summary>
    
      <category term="css" scheme="http://www.westerndevs.com/categories/css/"/>
    
    
      <category term="html" scheme="http://www.westerndevs.com/tags/html/"/>
    
      <category term="css" scheme="http://www.westerndevs.com/tags/css/"/>
    
      <category term="flexbox" scheme="http://www.westerndevs.com/tags/flexbox/"/>
    
  </entry>
  
  <entry>
    <title type="html">JavaScript Framework or JavaScript Core (Part 2)</title>
    <link href="http://www.westerndevs.com/JavaScript/JavaScript-Framework-or-JavaScript-Core-Part-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/JavaScript/JavaScript-Framework-or-JavaScript-Core-Part-2/</id>
    <published>2016-02-22T20:34:46.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><img src="https://blog.davidwesst.com/2016/02/JavaScript-Framework-or-Pure-JavaScript-P2/js-framework-or-pure-js-p2.png" alt=""></p><p>A friend and I decided to make a video game using JavaScript.</p><p>When deciding on whether or not to use a JavaScript game framework <a href="https://github.com/davidwesst/finder-game" target="_blank" rel="external">I went with Phaser</a>, and <a href="https://github.com/chrinkus/walk" target="_blank" rel="external">Chris opted to go with pure JavaScript</a>.</p><p>We were both right.</p><p>In this series of posts, I want to explain how each of us answer the question: Should I use a JavaScript Framework or pure JavaScript?</p><p>This is part 2 of 2 in the series. In this post, I'll cover why I'll cover why Chris opted not to use any frameworks and stick with pure JavaScript. In <a href="http://www.westerndevs.com/JavaScript/JavaScript-Framework-or-JavaScript-Core-Part-1/">part 1</a>, I covered why I opted to use a JavaScript framework rather than pure JavaScript.</p><h5>Author's Note</h5><p>Even though I'm talking about game development frameworks, the concepts and rationale discussed in this series of posts can be applied to any project (game, business, or otherwise) on whether or not you should use a JavaScript framework.</p><h2>Framing the Question</h2><p>Let's frame this question in context to Chris' goals.</p><p>Like me, the game is a side project for Chris which means that it is important that he learn some new things along the way while still having the goal of &quot;making a game&quot;. We both had these general learning goals:</p><ul><li>To learn how to draw using Canvas element</li><li>To learn more about &quot;graphics&quot; programming in JavaScript</li><li>To learn more about making games and game development</li></ul><p>Chris, having less experience with JavaScript development than me, had the extra goal of:</p><ul><li>Learning more about JavaScript itself in the context of game development</li></ul><p>This last goal is different than mine, although I could have easily made this one of my goals too considering there is always more to learn when it comes to JavaScript. Still, it is a difference that I wanted to note as we'll touch base on that near the end of this post.</p><h2>Why use Pure JavaScript?</h2><p>The other side of the coin is to write your code from the ground up and rely on the native JavaScript APIs. In the case of Chris' game, he wrote code against the Canvas API to draw to the screen.</p><h3>Pros</h3><p>As always, let's begin with the reasons why this was a good decision.</p><h4>Deeper understanding of the Specification</h4><p>Programming against the native API means that you'll understand the specification that everyone shares, including all of the frameworks out there. With this core knowledge, you can gain a better understand on how to fix or improve the frameworks themselves for your games moving forward.</p><p>Plus, you'll understand more about why things happen the way they do than those who just consume a framework.</p><h4>Better Performance</h4><p><img src="https://blog.davidwesst.com/2016/02/JavaScript-Framework-or-Pure-JavaScript-P2/performance-graph.png" alt=""></p><p>Learning the native APIs means that you're essentially programming &quot;against the metal&quot;, or as close as you can come to it when you talk about JavaScript. Assuming you're writing efficient code, you are likely going to see some improved performance as compared to another game or application that is using a framework.</p><p>You will also not have to worry about Fast Food Frameworks bloating and bogging down your application on the web, as <a href="http://love2dev.com/#!article/Large-JavaScript-Frameworks-Are-Like-Fast-Food-Restaurants" target="_blank" rel="external">Chris Love</a> would tell you.</p><h4>Understanding Your Full Stack</h4><p>Since you're writing against the native API, you will end up knowing all of your code from top to bottom because you'll have to write it all. This is an important consideration, as all software ends up with bugs. If you wrote all the code, then you'll have a good idea of where to look when it comes to triage and implementing fixes, improvements, or whatever.</p><h3>Cons</h3><p>As always, there are drawbacks to any solution. Let's review a few of them.</p><h4>Lack of Support and Guidance</h4><p>When you select a framework, you're relying on the experience of many other developers who have poured their knowledge into building that framework. Hypothetically, these developers wrote the framework to make something easier for their own projects.</p><p>When you write all the code yourself, you rely on your own experience.That means if you don't have experience with certain architecture, patterns, or practices you're going to have to learn them quickly to figure out or possibly miss out on their benefits altogether because you simply don't know what you don't know.</p><h4>Owning all the Code</h4><p>When you own all of your code can be a bit of a double edged sword. Sure you own it all and ideally know it all inside out, but that means <em>you're the only one</em> that actually knows it. Anyone else looking at your code, whether to provide support or contribute, is going to have a steep learning curve and rely heavily on you to learn how your code works rather than some documentation provided by a community of developers already sharing a code base.</p><p>Given, if you're a solo developer, that might not be an issue. But even in that case, you might not be able to remember the exact details about why you wrote some code a certain way 6 months after you wrote it.</p><h4>Productivity</h4><p>Any application, game or business apps, end up being made up of quite a bit of code to make sure all the features are implemented. Regardless of the benefits of owning all your code, the more code you have to write, the more time it's going to take before you get something up and running.</p><h2>So What Should You Choose?</h2><p>Like I said before, Chris and I were both right in our respective decisions.</p><p>The reason for this is that both of us can explain the &quot;why&quot; we made the decision without having to convince ourselves that we were correct.</p><p>For your next project, you should choose what makes sense for you and your project goals. If you're looking to produce something as quickly as possible, it's probably best to pick a framework that can help you get moving faster.</p><p>If you're looking to learn or explore something new and need (or want) to know how the insides work, it's probably best to learn from the native APIs upwards, or possibly clone a framework and start modifying for your own needs.</p><p>Either way, if you ask yourself &quot;why&quot; you made the decision to go one way or the other and find that you need to convince yourself that you made the right decision, maybe it's time to rethink that choice before it's too late.</p>]]></content>
    
    <summary type="html">
    
      Is it always better to use JavaScript Frameworks? David continues his analysys and shares the pros and cons of writing your JavaScript from scratch.
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title type="html">JavaScript Framework or JavaScript Core (Part 1)</title>
    <link href="http://www.westerndevs.com/JavaScript/JavaScript-Framework-or-JavaScript-Core-Part-1/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/JavaScript/JavaScript-Framework-or-JavaScript-Core-Part-1/</id>
    <published>2016-02-16T20:34:46.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><img src="https://blog.davidwesst.com/2016/02/JavaScript-Framework-or-Pure-JavaScript-P1/js-framework-or-pure-js.png" alt="js-framework-or-pure-js"></p><p>A friend and I decided to make a video game using JavaScript.</p><p>When deciding on whether or not to use a JavaScript game framework <a href="https://github.com/davidwesst/finder-game" target="_blank" rel="external">I went with Phaser</a>, and <a href="https://github.com/chrinkus/walk" target="_blank" rel="external">Chris opted to go with pure JavaScript</a>.</p><p>We were both right.</p><p>In this series of posts, I want to explain how each of us answer the question: Should I use a JavaScript Framework or pure JavaScript?</p><p>This is part 1 of 2 in the series. In this post, I'll cover why I opted to use a JavaScript framework rather than pure JavaScript. In <a href="https://blog.davidwesst.com/2016/02/JavaScript-Framework-or-Pure-JavaScript-P2" target="_blank" rel="external">part 2</a>, I'll cover why Chris opted not to use any frameworks and stick with pure JavaScript.</p><h5>Author's Note</h5><p>Even though I'm talking about game development frameworks, the concepts and rationale discussed in this series of posts can be applied to any project (game, business, or otherwise) on whether or not you should use a JavaScript framework.</p><h2>Framing the Question</h2><p>To better understand my decision, you should understand my goals.</p><p>Being a side project, I always make sure that I am learning something new along the way. Chris has the same perspective, outside of &quot;making a game&quot; we both have these learning goals:</p><ul><li>To learn how to draw using Canvas element</li><li>To learn more about &quot;graphics&quot; programming in JavaScript</li><li>To learn more about making games and game development</li></ul><p>Me, being a professional application developer, I also had the goal of:</p><ul><li>Learning to apply my application development skills to the game development world</li></ul><p>This last goal is really important to me and is framed as a goal rather than a problem. Everything I understand about game development demonstrates that it's quite different from regular application development. In the past, I've gotten stuck thinking of a game like it's a regular application. Hopefully with this goal in mind, I'll be able to push through my tendency to build an app rather than a game.</p><h2>Why use a JavaScript Framework?</h2><p>Let's start with the path I took for my project: to learn a new JavaScript framework.</p><h3>Pros</h3><p>Let's start with the good stuff, shall we?</p><h4>Simplification</h4><p>A framework provides an abstraction over the native API's provided by JavaScript, which <em>should</em> simplify things a little. For example, when it comes to drawing on a canvas, I create the objects that I want and give them to the engine, and voilà, they are drawn. I don't need to worry about the specifics on how it actually draws it, which allows me to focus on things like architecture and how to leverage the game loop itself.</p><h4>Guidance</h4><p>Being new to game development, the framework provides me guidance on how to build a game rather than a business application. This has helped me immensely, as it's forced me to use a game loop and a game object hierarchy, which has helped me learn how a game works differently than a regular JavaScript application.</p><h4>Support Network &amp; Productivity</h4><p><img src="https://blog.davidwesst.com/2016/02/JavaScript-Framework-or-Pure-JavaScript-P1/network.png" alt="network"></p><p>As with any popular framework, you're going to get other experts who have already implemented things with the framework. This way, I'm not re-inventing the wheel when it comes to finding a way to implement a feature. Rather, I can learn from what others have asked, done, and documented, and apply that to my game quickly, rather than having to come up with my own solution every time something comes up.</p><p>Plus, if there is an issue with one of the many functions of the framework, the community can rally behind it and push out a fix rather than just having myself to rely on for fixing any and all issues.</p><h3>Cons</h3><p>Even with all that good, there are some shortcomings that I should note alongside the pros.</p><h4>Framework Lifespan</h4><p><img src="https://blog.davidwesst.com/2016/02/JavaScript-Framework-or-Pure-JavaScript-P1/dead-framework.png" alt="dead-framework"></p><p>In JavaScript, there are plenty of flavours of whatever framework you're using.</p><p>For every Phaser, there are at least another dozen frameworks that do the same thing, just in a different way. When it comes to picking one, there is a good chance that in a few years (or a few months in some cases) all my knowledge of the framework will be deprecated knowledge as the industry will have moved to the &quot;next new thing&quot;, along with the support network I mentioned earlier.</p><h4>Performance</h4><p>I heard the term &quot;Fast Food frameworks&quot; for the first time from <a href="http://love2dev.com/#!article/Large-JavaScript-Frameworks-Are-Like-Fast-Food-Restaurants" target="_blank" rel="external">Chris Love</a>. Now that I've gone with Phaser, my game now requires this framework to run, and its performance and compatibility with different platforms is dependent on the framework. So far, I have no issues, but as things get more complicated, I could find myself tightly coupled to the performance limitations of the framework, whatever they may be.</p><p>On top of that, even though I'm not using all of the parts of Phaser, I'll need to include the whole library, which can lead to slower load times, especially when we're talking about playing the game on the web.</p><h2>To Summarize</h2><p>For my needs, a framework allows me to focus on learning the higher level concepts of game development while applying my existing JavaScript and application developments. The framework also keeps me within the game development paradigm by means of forcing me down a certain implementation path (i.e. using the Phaser game loop).</p><p>All that being said, there are still great reasons not to use a JavaScript framework. We'll cover that in part 2 of this series.</p>]]></content>
    
    <summary type="html">
    
      Is it always better to use JavaScript Frameworks? David analyzes the pros and cons of using JavaScript frameworks versus only using core JavaScript.
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title type="html">Exploring JavaScript Game Frameworks</title>
    <link href="http://www.westerndevs.com/JavaScript/Game/Exploring-JavaScript-Game-Frameworks/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/JavaScript/Game/Exploring-JavaScript-Game-Frameworks/</id>
    <published>2016-02-08T21:11:44.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>David Wesst</name>
	  <email>questions@davidwesst.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Last month I explored a number of JavaScript-based game frameworks in an attempt to pick the perfect one for my first game.</p><p>I thought I'd take a moment to share four of them that really stood out to me, along with a few honerable mentions.</p><p><strong>Note</strong> that I've left a bunch off the list, as that is the nature of a &quot;top X&quot; list. If I missed your favourite one, then feel free to let me know in the comments!</p><h3>Phaser</h3><p><img src="http://blog.davidwesst.com/2016/02/Exploring-JavaScript-Game-Frameworks/phaser.png" alt=""></p><p>I'll start with the one I picked for my game. <a href="http://phaser.io/" target="_blank" rel="external">Phaser</a>, developed by Richard Davey (a.k.a. <a href="https://twitter.com/photonstorm" target="_blank" rel="external">@PhotonStorm</a>) is an open source JavaScript game framework for desktop and mobile games.</p><p>After going through <a href="http://www.gamefromscratch.com/page/Adventures-in-Phaser-with-TypeScript-tutorial-series.aspx" target="_blank" rel="external">the Phaser tutorial from GameFromScratch.com</a>, here's what I liked about it:</p><ul><li>It's just a framework, plain and simple. No special IDE or engines needed, just code.</li><li>It's <a href="https://github.com/photonstorm/phaser" target="_blank" rel="external">open source</a> and widely used, and has a strong community surrounding it</li><li>It's stable, mature, and actively developed for a JavaScript framework. Currently at vervsion 2.4.4 at the time of writing, with <a href="http://phaser.io/labs" target="_blank" rel="external">v3 in the works</a>.</li></ul><p>What really drew me towards Phaser was it's well documented API, and the numerous tutorials and examples from the community. Even though I'm just starting out, every feature that I've looked to implement appears to have been at least partially implemented and documented in a tutorial, making the learning curve much less steep than it could have been.</p><p>You can check it out on <a href="https://github.com/photonstorm/phaser" target="_blank" rel="external">GitHub</a>.</p><h3>Superpowers</h3><p><img src="http://blog.davidwesst.com/2016/02/Exploring-JavaScript-Game-Frameworks/superpowers.png" alt=""></p><p>I think <a href="http://superpowers-html5.com/index.en.html" target="_blank" rel="external">Superpowers</a> one has a lot of potential. Seeing the <a href="http://sparklinlabs.itch.io/discover-superpowers" target="_blank" rel="external">game demo</a> they made really gave me all the proof I needed believe in what they're doing over there at Sparklin Labs.</p><p>Here's the highlights that stood out to me:</p><ul><li>Totally <a href="https://github.com/superpowers/superpowers" target="_blank" rel="external">open source</a>, as in the engine and the tooling</li><li>Toolset is a browser-based IDE for game development</li><li>Powered by <a href="http://www.typescriptlang.org/" target="_blank" rel="external">TypeScript</a>, giving you the power of JavaScript with some extras</li></ul><p>The only drawback I found was that it was really new when I was shopping for a game framework, which means that it's more on the bleeding edge than the cutting edge IMHO. Still, this is one I'll be watching.</p><p>If you're interested in learning how to leverage Superpowers, I suggest checking out their <a href="http://docs.superpowers-html5.com/en/getting-started/about-superpowers" target="_blank" rel="external">documentation site</a> or this <a href="http://www.gamefromscratch.com/post/2016/02/01/Superpowers-Tutorial-Series-Part-One-Getting-Started.aspx" target="_blank" rel="external">GameFromScratch.com tutorial series</a>.</p><h3>PlayCanvas</h3><p><img src="http://blog.davidwesst.com/2016/02/Exploring-JavaScript-Game-Frameworks/playcanvas.png" alt=""></p><p>I discovered <a href="https://playcanvas.com/" target="_blank" rel="external">PlayCanvas</a> when I bought a Humble Bundle focused around game development tools. PlayCanvas seems to be cut from the same cloth as SuperPowers, but is a bit more mature considering it's been around longer. It focuses more on 3D content, although I'm sure you could do 2D content just fine.</p><p>Here's what made PlayCanvas interesting to me:</p><ul><li>Engine is <a href="https://github.com/playcanvas/engine" target="_blank" rel="external">open source</a>, but tooling is not</li><li>Tooling runs in-browser, making it accessible to any development platform</li><li>Tooling was very easy to use, and I was able to start for free</li></ul><p>PlayCanvas really reminded me the <a href="https://unity3d.com/" target="_blank" rel="external">Unity3D</a> toolset, which is widely used in the industry. Given, the value is really in the tooling, which isn't open source. Still, it might be worth checking out if you are looking for a toolset to go with your game engine.</p><p>Here's another <a href="http://www.gamefromscratch.com/post/2015/04/19/A-Closer-Look-at-the-PlayCanvas-Game-Engine.aspx" target="_blank" rel="external">GameFromScratch tutorial</a> that helped me get things moving.</p><h3>Haxe</h3><p><img src="http://blog.davidwesst.com/2016/02/Exploring-JavaScript-Game-Frameworks/haxe.png" alt=""></p><p>Okay, so <a href="http://haxe.org/" target="_blank" rel="external">Haxe</a> really isn't JavaScript, but it's very similar to it and supports web development, so I'm including it. Plus, it really did stand out as a viable option to me when picking my game for a few reasons:</p><ul><li>It's a language/toolkit that focuses on game / rich UI development</li><li>Very mature and has plenty of support around it for whatever games you'd like to develop</li><li>Is the cornerstone of the <a href="http://haxe.org/foundation/" target="_blank" rel="external">Haxe Foundation</a></li><li>When targetting JavaScript, you can leverage other JavaScript libraries</li></ul><p>Haxe is something that I keep coming across in my adventures with game development, and one day I'll head back and learn more about it. Just need to find the right project, and feel a bit more comfortable with game development.</p><p>You can checkout the <a href="https://github.com/HaxeFoundation/haxe" target="_blank" rel="external">source code here</a> but I'd suggest exploring <a href="http://haxe.org/" target="_blank" rel="external">the website</a> for more information.</p><h2>Honorable Mentions</h2><p>To close things out, I wanted to highlight a few other frameworks and toolsets that I thought were pretty cool but wasn't what I was looking for with my project.</p><ul><li><a href="http://babylonjs.com/" target="_blank" rel="external">BabylonJS</a></li><li><a href="http://threejs.org/" target="_blank" rel="external">ThreeJS</a></li><li><a href="http://www.pixijs.com/" target="_blank" rel="external">PixiJS</a></li></ul><p>If I missed your favourite (which I'm sure I did) you should drop it in the comment section and share your favourite library and/or toolset. Extra points for open source repository links on the libraries.</p>]]></content>
    
    <summary type="html">
    
      David reviews a handful of JavaScript-based game frameworks he went through before selecting one for his new game.
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/categories/JavaScript/"/>
    
      <category term="Game" scheme="http://www.westerndevs.com/categories/JavaScript/Game/"/>
    
    
      <category term="JavaScript" scheme="http://www.westerndevs.com/tags/JavaScript/"/>
    
      <category term="Game Development" scheme="http://www.westerndevs.com/tags/Game-Development/"/>
    
  </entry>
  
</feed>
