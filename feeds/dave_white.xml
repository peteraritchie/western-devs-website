<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/dave_white" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2017-05-18T21:09:05.000Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">Hour of Code Challenge - Completed</title>
    <link href="http://www.westerndevs.com/Community/Hour-of-Code-Challenge-Completed/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Community/Hour-of-Code-Challenge-Completed/</id>
    <published>2016-12-14T00:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In case you missed it, I threw down the gauntlet to my fellow WesternDev members in September, stating that <a href="https://code.org/help/" target="_blank" rel="external">I will donate $100 CAD to Code.org®</a>if any of them are able to participate in <a href="https://csedweek.org/" target="_blank" rel="external">Computer Science Education Week</a>.</p><p>First, I had to step up and walk the walk, and I succeeded better than I had expected.</p><h2>2 Days - 4 Classes - 79 Grade 3 Students == Success</h2><p>This year it was very easy to organize an hour of code session at my youngest son's school. We had tried 2 years ago and the school board was leary so we didn't get a chance to do it.Last year, the school board was aware of Hour of Code and already actively encouraging teachers to try and participate so we did 2 classes last year.</p><p>This year we were able to organize 4 classes of Hour Of Code sessions for the all of the Grade 3 kids in the school. I did 2 back-to-back on a Tuesday morning, and another 2 on the Thursday morning.This ended up being a really great schedule and made running the sessions very easy because all of the Grade 3 students are in a school building together and the classrooms are side-by-side.</p><h4>And now for the proof...</h4><p><img src="https://dl.dropboxusercontent.com/u/30830337/Hour%20of%20Code%20-%202016%20-%20Kieran%20-%20sm.png" alt="Kieran" title="My son Kieran doing Minecraft"></p><p><img src="https://dl.dropboxusercontent.com/u/30830337/Hour%20of%20Code%20-%202016%20-%20Roberts%20and%20Kids%20-%20sm.png" alt="Mme Roberts helping out" title="Mme Roberts and some kids"></p><p><img src="https://dl.dropboxusercontent.com/u/30830337/Hour%20of%20Code%20-%202016%20-%20Seychelle%20and%20Kids%20-%20sm.png" alt="Mme Seychelle helping out" title="Mme Seychelle and some kids"></p><p><img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20Seychelle%20and%20Dave%20-%20sm.png" alt="Mme Seychelle" title="MMe Seychelle"> <img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20Roberts%20and%20Dave%20-%20sm.png" alt="Mme Roberts" title="Mme Roberts"><img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20LaBrecque%20and%20Dave%20-%20sm.png" alt="Mme Lebrecque" title="Mme Lebrecque"> <img src="https://dl.dropboxusercontent.com/u/30830337/Mme%20Donlevy%20and%20Dave%20-%20sm.png" alt="Mme Donlevy" title="Mme Donlevy"></p><h2>WesternDevs Response</h2><p>When I issued the challenge to my fellow WesternDev members, I recognized it is actually a very hard task to organize and execute an #HourOfCode event. The technical aspects of #HourOfCode is very easy,but the logistics of coordinating with schools/organizations to get classroom time and computers is very difficult.</p><p>That said, one of my fellow WesternDev members, <a href="http://www.westerndevs.com/bios/james_chambers">James Chambers</a> was able to get TWO (2) session organized! They will be run during the week of Dec. 19. I know this isn't technically during<a href="https://csedweek.org/" target="_blank" rel="external">Computer Science Education Week</a> but I'm going to let that slide and <a href="https://code.org/help/" target="_blank" rel="external">donate $100 CAD to Code.org®</a> for <a href="http://www.westerndevs.com/bios/james_chambers">James Chambers</a> meeting the challenge. James has promised me that a blog post (with PICS!)will be following in the coming weeks! I'll update this post when that happens!</p><p>I'm also going to <a href="https://code.org/help/" target="_blank" rel="external">donate $100 CAD to Code.org®</a> for myself as I think that besides my time, this is a very important cause and they need our financial support as well as our support in time and effort.</p><p>Thank you all for reading. I hope I've encouraged you all to run an #HourOfCode session in your local community in the near future!!</p>]]></content>
    
    <summary type="html">
    
      79 Grade 3 kids had a blast being introduced to the world of computer science!
    
    </summary>
    
      <category term="Community" scheme="http://www.westerndevs.com/categories/Community/"/>
    
    
      <category term="Hour of Code" scheme="http://www.westerndevs.com/tags/Hour-of-Code/"/>
    
      <category term="Community" scheme="http://www.westerndevs.com/tags/Community/"/>
    
      <category term="Learning" scheme="http://www.westerndevs.com/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title type="html">Hour of Code Challenge</title>
    <link href="http://www.westerndevs.com/Community/Hour-of-Code-Challenge/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Community/Hour-of-Code-Challenge/</id>
    <published>2016-09-23T23:55:48.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In case you haven't heard, there is this little thing called <a href="https://csedweek.org/" target="_blank" rel="external">Computer Science Education Week</a> which supports our industrieseffort to get more computer science education happening for kids in the K-12 grade range. Please visit the <a href="https://csedweek.org/" target="_blank" rel="external">Computer Science Education Week</a>for all of the deals, or take my word that this is an important initiative!</p><p>To support this initiative and provide resources on a year-round basis, there is the <a href="https://code.org/" target="_blank" rel="external">Code.org</a> organization! To take a snippetfrom their website:</p><blockquote><p>Launched in 2013, <a href="https://code.org/" target="_blank" rel="external">Code.org®</a> is a non-profit dedicated to expanding access to computer science, and increasing participationby women and underrepresented students of color.</p></blockquote><p>Ok! This sounds like another good thing! A whole organization trying to expand access to computer science education!</p><p>Put the two of these things together and we get <a href="https://hourofcode.com/" target="_blank" rel="external">The Hour of Code</a>, a movement that provides 1 hour computer programming tutorials for all age groups in 45 different languages.And during Computer Science Education Week, which run from December 5-11, 2016, <a href="https://hourofcode.com/" target="_blank" rel="external">The Hour of Code</a> movement issues a challenge to reach as many childrenas possible during the week with these 1 hour tutorials!</p><p>This is where I'm laying down my challenge to all of my fellow WD members!</p><p>For the last 2 years, I've participate in the <a href="https://csedweek.org/" target="_blank" rel="external">CSED Week</a>! In year one, I spent 1 hour with 12 kids at the Boys and Girls Club of Calgary!Last year, I was able to get into my sons' school and spent 1 hour with a a Gr. 2 and Gr. 4 class! It was a fantastic experience and I've already started the processof getting organized with the schools again this year!</p><h2>My Challenge to WesternDevs</h2><p>I am challenging all of my fellow WesternDevs to arrange 1 Hour of Code event! This can be with their kids' schools, a local kids club, orevent a public event inviting kids to attend!</p><p>I'm issuing his challenge because there are logistics and permissions that sometimes need to be arranged and this should give my fellow WDmore than enough time to get these things sorted out!</p><p>I'm also willing to put up a bounty! For every WD member who performs 1 or more sessions, <a href="https://code.org/help/" target="_blank" rel="external">I will donate $100 CAD to Code.org®</a> to supportthis organization! In order to claim the bounty, there will need to be:</p><ol><li>Blog post talking about the event</li><li>Picture with the organizer (permissions allowing)</li></ol><p>So there it is! My challenge! I hope this encourages all of the WD (and anyone who follows us) to get involved with this fantastic opportunity to give back to the community and our children.I'll look forward to seeing all of your posts in December!</p>]]></content>
    
    <summary type="html">
    
      I&#39;m throwing down the gauntlet! I&#39;m challenging my fellow WD members to get involved with Hour of Code!
    
    </summary>
    
      <category term="Community" scheme="http://www.westerndevs.com/categories/Community/"/>
    
    
      <category term="Hour of Code" scheme="http://www.westerndevs.com/tags/Hour-of-Code/"/>
    
      <category term="Community" scheme="http://www.westerndevs.com/tags/Community/"/>
    
      <category term="Learning" scheme="http://www.westerndevs.com/tags/Learning/"/>
    
  </entry>
  
  <entry>
    <title type="html">Certificates for Everyone! Let&#39;s Encrypt in Azure with ASP.NET Core</title>
    <link href="http://www.westerndevs.com/Tools/Lets-Encrypt-ASPNET-Core/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Tools/Lets-Encrypt-ASPNET-Core/</id>
    <published>2016-03-22T20:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This may have been one of the most exciting things (from a web site owner's perspective) to happen in quite a while, and something I think the industryhas been hoping would happen for a long time. Free SSL certificates for everyone! With the creation of <a href="https://letsencrypt.org" target="_blank" rel="external">letsencrypt.org</a>, an organization whose goal is tomake certificate usage free and easy, we are finally freed from the shackles of organizations like GoDaddy or Verisign who charge (sometimes exorbitant) feesjust so that an individual or organization can have the ability encrypt their web traffic.</p><a id="more"></a><p>Now the tricky thing with Let's Encrypt is the automation part. Because of how Let's Encrypt uses automation to provision certificates, it was originally built towork with Apache/Linux based web servers. This made anyone who used Azure or IIS feel like the kid on the outside looking in. Luckily, nothing that Let's Encryptdoes is voodoo magic and it didn't take long for the Azure community to build the necessary parts to get this working in Azure.</p><p>There is a fantastic post from <a href="https://gooroo.io/GoorooTHINK/Article/16420/Lets-Encrypt-Azure-Web-Apps-the-Free-and-Easy-Way/20047#.Vuron4-cGM9" target="_blank" rel="external">Nik Molnar</a> that describeshow to get this working on Azure. I definitely want to talk about Let's Encrypt on Azure, but I don't want to take away from Nik's post, so go there and  check it out.</p><p>What I'm going to add though is a bit of PowerShell goodness around some of his steps that makes it a bit easier to get Let's Encrypt up and running on your Azurewebsite. I'm also going to add a couple tidbits about getting it working on ASP.NET Core.</p><h4>Pre-requisites</h4><p>Just going to re-iterate <a href="https://gooroo.io/GoorooTHINK/Article/16420/Lets-Encrypt-Azure-Web-Apps-the-Free-and-Easy-Way/20047#.Vuron4-cGM9" target="_blank" rel="external">Nik's prerequisites</a>:</p><ol><li>Scale up your Azure Website to at least an S1 (1 dedicated IP, 5 SNI)</li><li>Acquire your custom domain. The <em>{domain name here}</em>.azurewebsites.net domains are all secured with by a Microsoft certificate so if you aren't planning on using your own domain name, you can just stop now.</li><li>Create a storage account for the Let's Encrypt Site extension to use</li><li>Put your storage account conne   ction strings into two Application Settings on your website.</li><li>Register a Service Princpal. This is the identity that is allowed to execute the web jobs the the site extension uses to do the work</li></ol><h2>PowerShell</h2><p>Again, as per <a href="https://gooroo.io/GoorooTHINK/Article/16420/Lets-Encrypt-Azure-Web-Apps-the-Free-and-Easy-Way/20047#.Vuron4-cGM9" target="_blank" rel="external">Nik's post</a>, you'll need the <a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" target="_blank" rel="external">Azure PowerShell module</a> before we get started.</p><p>In an Azure .ps1 (script) or .psm1 (module), or in PowerShell ISE, paste the function below.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Set-AllAzureDetailsForLetsEncrypt() &#123;</div><div class="line"><span class="comment">&lt;# </span></div><div class="line">    <span class="doctag">.SYNOPSIS</span></div><div class="line">    Set up an Azure Website to be able to use the Let's Encrypt Site Extension</div><div class="line">    <span class="doctag">.DESCRIPTION</span></div><div class="line">    This function will use the information provided to create a new connection between the Let's Encrypt Site extension and your website.</div><div class="line">    It will then use this user/connection to setup the certificate from Let's Encrypt on your web site</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Set-AllAzureDetailsForLetsEncrypt -subscriptionId &#123;guid&#125; -uniqueUri &#123;Any unique Url&#125; -strongPassword &#123;password&#125; -displayName &#123;Name of Application&#125; -resourceGroupName &#123;Name of ResourceGroup to work in&#125;</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Set-AllAzureDetailsForLetsEncrypt -subscriptionId 00000000-0000-0000-0000-000000000000 -uniqueUri "http://myapplication-091820398123" -strongPassword "P@ssw0rd" -displayName "Let's Encrypt Site Extension" -resourceGroupName "Default-Web-WestUS"</div><div class="line">    <span class="doctag">.PARAMETER subscriptionId</span></div><div class="line">    (optional) The subscriptionId to attempt to use during the login</div><div class="line">    <span class="doctag">.PARAMETER uniqueUri</span></div><div class="line">    The uniqueUri of the "app" that we are creating in Azure Active Directory </div><div class="line">    <span class="doctag">.PARAMETER strongPassword</span></div><div class="line">    The strong password of the "app" that we are creating in Azure Active Directory </div><div class="line">    <span class="doctag">.PARAMETER displayName</span></div><div class="line">    (optional) The name of the application that we will be creating in Azure Active Directory (defaults to "Let's Encrypt Site Extension")</div><div class="line">    <span class="doctag">.PARAMETER resourceGroupName</span></div><div class="line">    The name of the ResourceGroup that this app lives in.</div><div class="line">#&gt;</div><div class="line"></div><div class="line">    [CmdLetBinding()]</div><div class="line">    <span class="keyword">param</span>(</div><div class="line">        [parameter(Mandatory = <span class="literal">$false</span>)]</div><div class="line">        [guid]<span class="variable">$subscriptionId</span>,</div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>)]</div><div class="line">        [string]<span class="variable">$uniqueUri</span>,</div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>)]</div><div class="line">        [string]<span class="variable">$strongPassword</span>,</div><div class="line">        [parameter(Mandatory = <span class="literal">$false</span>)]</div><div class="line">        [string]<span class="variable">$displayName</span>,</div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>)]</div><div class="line">        [string]<span class="variable">$resourceGroupName</span></div><div class="line">    )</div><div class="line">    <span class="keyword">begin</span>&#123;</div><div class="line">        <span class="keyword">if</span>([string]::IsNullOrEmpty(<span class="variable">$displayName</span>))&#123; <span class="variable">$displayName</span> = <span class="string">"Let's Encrypt Site Extension"</span> &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">process</span>&#123;</div><div class="line">         <span class="comment"># log into your Azure Account for a given subscription</span></div><div class="line">         <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="variable">$subscriptionId</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>)&#123;</div><div class="line">                <span class="variable">$account</span> = Login-AzureRMAccount</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="variable">$account</span> = Login-AzureRMAccount -SubscriptionId <span class="variable">$subscriptionId</span></div><div class="line">            &#125;</div><div class="line">         &#125;<span class="keyword">catch</span>&#123;</div><div class="line">            <span class="built_in">Write-Error</span> <span class="string">"Failed to log into Azure with the credentials or SubscriptionId provided."</span></div><div class="line">            <span class="keyword">break</span>             </div><div class="line">         &#125;</div><div class="line">         </div><div class="line">         <span class="comment"># create a new active directory application</span></div><div class="line">         <span class="variable">$app</span> = New-AzureRmADApplication -DisplayName <span class="variable">$displayName</span> -HomePage <span class="variable">$uniqueUri</span> -IdentifierUris <span class="variable">$uniqueUri</span> -Password <span class="variable">$strongPassword</span></div><div class="line">         </div><div class="line">         <span class="comment"># create a new Service Principal for your application</span></div><div class="line">         New-AzureRmADServicePrincipal -ApplicationId <span class="variable">$app</span>.ApplicationId</div><div class="line">         </div><div class="line">         <span class="comment"># assign your Service princpal as a contributor</span></div><div class="line">         New-AzureRmRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName <span class="variable">$app</span>.ApplicationId</div><div class="line">         </div><div class="line">         <span class="comment"># store these details to transfer to the extension which will use the service principal to do it's work</span></div><div class="line">         <span class="variable">$letsEncrypt</span> = @&#123;&#125;</div><div class="line">         <span class="variable">$letsEncrypt</span>.Tenant = <span class="variable">$account</span>.Context.Tenant.TenantId</div><div class="line">         <span class="variable">$letsEncrypt</span>.SubscriptionId = <span class="variable">$account</span>.Context.Subscription.SubscriptionId</div><div class="line">         <span class="variable">$letsEncrypt</span>.ClientId = <span class="variable">$app</span>.ApplicationId </div><div class="line">         <span class="variable">$letsEncrypt</span>.ClientSecret = <span class="variable">$strongPassword</span></div><div class="line">         <span class="variable">$letsEncrypt</span>.ResourceGroupName = <span class="variable">$resourceGroupName</span></div><div class="line">         </div><div class="line">         <span class="comment"># return the letsEncrypt object with all of our details to make it easy to clip them into the website extensions fields </span></div><div class="line">         <span class="variable">$letsEncrypt</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">end</span>&#123;&#125;</div><div class="line">&#125; <span class="comment">#end function Set-AllAzureDetailsForLetsEncrypt</span></div></pre></td></tr></table></figure><p>After you've pasted this function into a PowerShell script file or directly into a session type in the following:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$letsEncrypt</span> = Set-AllAzureDetailsForLetsEncrypt -subscriptionId &lt;Insert SubscriptionId Here&gt; -uniqueUri <span class="string">"http://myapplication-091820398123"</span> -strongPassword <span class="string">"P@ssw0rd"</span> -displayName <span class="string">"Let's Encrypt Site Extension"</span> -resourceGroupName <span class="string">"Default-Web-WestUS"</span></div></pre></td></tr></table></figure><p>You do not need to provide the SubscriptionId if your account/login is only associated with one subscription. Also, you do not need to provide a DisplayName if you don't mind the display name being &quot;Let's Encrypt Site Extension&quot;. You must provide the other parameters.</p><p>Once you have run through the script, you should have an object in the <code>$letsEncrypt</code> variable that has everything you need for entering the data in the Site Extension.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$letsEncrypt </div><div class="line"></div><div class="line">Name                           Value                                                            </div><div class="line">----                           -----                                                            </div><div class="line">SubscriptionId                 <span class="number">11111111</span><span class="number">-2222</span><span class="number">-3333</span><span class="number">-4444</span><span class="number">-555555555555</span>                             </div><div class="line">ResourceGroupName              Default-WestUs<span class="number">-1</span>                                                 </div><div class="line">Tenant                         <span class="number">11111111</span><span class="number">-2222</span><span class="number">-3333</span><span class="number">-4444</span><span class="number">-555555555555</span>                             </div><div class="line">ClientSecret                   P@ssw0rd                                                         </div><div class="line">ClientId                       <span class="number">00000000</span><span class="number">-0000</span><span class="number">-0000</span><span class="number">-0000</span><span class="number">-000000000000</span></div></pre></td></tr></table></figure><p>Now you will be able to type <code>$letsEncrypt.Tenant | clip</code> to get the TenantId for pasting into the Site Extension fields. You can do this for eachfield that is required for the extension to run.</p><h2>ASP.NET Core</h2><p>ASP.NET Core (formerly know as ASP.NET 5/MVC 6) had a different approach to handling static files, which are required for Let's Encrypt to work. Basically,what happens is the WebJob gets some files from Let's Encrypt. Let's Encrypt will then use the DNS entry and this &quot;well-known&quot; location on your site to see if the filesare there. If they are there, you own the domain, and the certificate can be approved automatically. If you didn't own the domain, and hadn't setup the Let's Encrypt Site Extensionto do all of this work, none of this would have worked and it could be assumed that you do not own the domain.</p><p>If you look in your Kudo dashboard after the Let's Encrypt Site Extension has run, you'll see the following you your folder structure:</p><p>d:/home/site/wwwroot/.well-known/acme-challenge</p><p>And you'll see the challenge files in the last folder</p><p><img src="http://i.imgur.com/sQcRNFX.png" alt=".well-known-acme-challenge"></p><h4>The Thing I had Trouble With</h4><p>I couldn't find a good example at the time of how to allow Let's Encrypt to get these .well-known files using ASP.NET Core. So I created a controller that basically returned the contents when asked for a specific route.</p><p>The URI that Let's Encrypt will look for these well-known files is http://{mydomainname}.com/.well-known/acme-challenge</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[Route(<span class="string">".well-known"</span>)]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WellKnownController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WellKnownController</span>(<span class="params">IHostingEnvironment env</span>)</span></div><div class="line">    &#123;</div><div class="line">        Env = env;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> IHostingEnvironment Env &#123; <span class="keyword">get</span>; &#125;</div><div class="line"></div><div class="line">    [HttpGet(<span class="string">"acme-challenge/&#123;id&#125;"</span>)]</div><div class="line">    [Produces(<span class="string">"text/json"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> content = <span class="keyword">string</span>.Empty;</div><div class="line">        <span class="keyword">var</span> path = Env.WebRootPath;</div><div class="line">        <span class="keyword">var</span> fullPath = Path.Combine(path, <span class="string">@".well-known\acme-challenge"</span>);</div><div class="line">        <span class="keyword">var</span> dirInfo = <span class="keyword">new</span> DirectoryInfo(fullPath);</div><div class="line">        <span class="keyword">var</span> files = dirInfo.GetFiles();</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> fileInfo <span class="keyword">in</span> files)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (fileInfo.Name == id)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> file = System.IO.File.OpenText(fileInfo.FullName))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> Ok(file.ReadToEnd());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Ok(content);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4>Update</h4><p>At the time of this writing, I haven't had a chance to confirm if this works since the Let's Encrypt files do not have an extension.<a href="http://docs.asp.net/en/latest/fundamentals/static-files.html" target="_blank" rel="external">Handling Static Files in ASP.NET Core</a></p><h2>That's It!</h2><p>Hopefully, between <a href="https://gooroo.io/GoorooTHINK/Article/16420/Lets-Encrypt-Azure-Web-Apps-the-Free-and-Easy-Way/20047#.Vuron4-cGM9" target="_blank" rel="external">Nik's fantastic post</a> and this post, you should have a fairly good understanding of what has been happening, and you've got yourASP.NET Core site secured and up and running on Azure using <a href="https://letsencrypt.org" target="_blank" rel="external">Let's Encrypt</a>!!!</p>]]></content>
    
    <summary type="html">
    
      This may have been one of the most exciting things (from a web site owner&#39;s perspective) to happen in quite a while...
    
    </summary>
    
      <category term="Tools" scheme="http://www.westerndevs.com/categories/Tools/"/>
    
    
      <category term="azure" scheme="http://www.westerndevs.com/tags/azure/"/>
    
      <category term="asp.net" scheme="http://www.westerndevs.com/tags/asp-net/"/>
    
      <category term="let&#39;s encrypt" scheme="http://www.westerndevs.com/tags/let-s-encrypt/"/>
    
  </entry>
  
  <entry>
    <title type="html">WesternDevs learn about Docker - Part 2</title>
    <link href="http://www.westerndevs.com//westerndevs-learn-about-docker-part-2/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//westerndevs-learn-about-docker-part-2/</id>
    <published>2015-09-08T05:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<h5>Dislaimer</h5><p>This blog post serves two purposes: Act as a historical record of a conversation with a bunch of interesting links in context, and to share a bit of an insider look at how conversations happen in the WesternDevs slack channels.</p><a id="more"></a><h3>Introduction</h3><p>As Tom mentioned in his post about <a href="http://www.westerndevs.com/docker-containers-explained-for-the-novice/">Docker containers for Novices</a> which I'm considering Part 1 of this post, the WesternDevs had a conversation about how Docker containers work. A good portion of our group has a lot of experience in the Windows world and not a lot of *nix experience which is where containers seem to have been born from.</p><p>One of the things that I love about WesternDevs is the fairly voracious appetite that all of us have to understand the various technologies that we use and talk about while also ensuring that the whole group understands. Leave no man behind while we learn I guess you would say.</p><h3>The seed of the conversation</h3><p><a href="http://codebetter.com/kylebaley/2015/09/01/windows-server-containers-are-coming-whether-you-like-it-or-not/#comment-2232115672" target="_blank" rel="external">&quot;Can AD, DHCP, DNS run in a container?&quot; seems like an innocuous question</a>, but it was the question that started the conversation.</p><p>Several of us started to posit that there are some things (in a Windows world) that would be fundamentally required for a container to run and that maybe AD (identity) was one of those things.</p><p>As often happens on Slack, someone says something that gets the rest of us dissenting. It is usually <a href="http://www.westerndevs.com/bios/dylan_smith/">@dylansmith</a>, which was the case this time. His statement (paraphrased) was that &quot;Containers are like VMs so of course AD, DHCP, DNS, etc can run in containers.&quot; which several of us (myself included) disagreed with.  And thus began a very productive WD conversation.</p><p>So <a href="http://www.westerndevs.com/bios/dylan_smith/">@dylansmith</a> opened with &quot;Containers are like VMs&quot; and I (<a href="http://www.westerndevs.com/bios/dave_white/">@davewhite</a>) responded with no, they are not, they are more like AppDomain than VMs. This set the stage for the two points of view in the conversation.</p><h3>What is a Container</h3><p>The WesternDevs all agreed that containers are a tool for isolation into consistent environments. <a href="http://www.westerndevs.com/docker-containers-explained-for-the-novice/">Tom's post</a> quite nicely summed up our thoughts. I don't think there was any disagreement amongst us on that point. How containers achieved that was strongly debated and led to a deeper understanding of what a &quot;shared kernel&quot; is.</p><blockquote><p>Containers running on a single machine all share the same operating system kernel so they start instantly and make more efficient use of RAM.</p></blockquote><p>A VM does not share a kernel with anything else, it shares physical resources with other VMs via the HyperVisor.</p><p>We agreed that VMs give extra confidence in the level of isolation that is afforded the running applications. VMs do not afford the same level of performance as a container at start-up, and will consume more of the physical resources of the hardware that a comparable solution using containers.</p><h3>Windows vs. Linux</h3><p>One of the things that underlied this conversation was the fundamental difference between the Windows kernel and Linux kernel. As far as we understand, the Windows kernel is big. Really big. And pulling all of the &quot;user&quot; stuff out of the &quot;system&quot; stuff will be very difficult for Microsoft and thus make containers on Windows (<a href="http://www.westerndevs.com/windows-server-containers-are-coming-whether-you-like-it-or-not/">which is coming whether you like it or not</a>) require a two-pronged approach, VMs that think they are containers and just pure containers.</p><p>The Linux kernel is much smaller, providing basic resources to &quot;user&quot; modules. <a href="http://www.westerndevs.com/bios/simon_timms/">@stimms</a> provided an awesome link to <a href="http://chimeracoder.github.io/docker-without-docker/#1" target="_blank" rel="external">ChimeraCoder</a> presentation about achieving Docker containers without Docker as some information on how the linux kernel works. The difference between <a href="http://chimeracoder.github.io/docker-without-docker/#9" target="_blank" rel="external">systemd</a> and a distro was nicely described in this presentation, and helped move the conversation a long.</p><p>This also helped us understand we could run different distros of Linux in containers, as long as they all shared the same systemd version. You'd just install the distro of your choice in the container! Distros that didn't share the same kernel wouldn't be able to live side-by-side in containers on that host. Here is a great <a href="http://superuser.com/questions/889472/docker-containers-have-their-own-kernel-or-not" target="_blank" rel="external">SuperUser</a> post about this that helped as well as a <a href="https://docs.docker.com/introduction/understanding-docker/#the-underlying-technology" target="_blank" rel="external">Docker article</a> about the underlying technology that Docker uses.</p><p>And Tom also shared that...</p><blockquote><p>But it’s the reason why Docker requires a VM to run on Windows or OS X. Neither of those have the proper kernel extensions for Docker to work properly.</p></blockquote><h3>Throttling/Managing Container Resource Usage</h3><p>After that, the conversation turned to managing container resources. If a container is using a hosts kernel, wouldn't that mean that a container could consume all of the resources of the machine/host without knowledge of any other containers?</p><p>As it turns out, Linux already provides for this in the kernel. Linux has something called &quot;cgroups&quot; that can be used to group processes and <a href="https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/" target="_blank" rel="external">manage all kinds of resources</a>. This is how Docker (and probably all <a href="http://chimeracoder.github.io/docker-without-docker/#9" target="_blank" rel="external">systemd</a> based containers) works.</p><h3>What services does a host (Linux kernel) need to provide for a Container</h3><p>With our core understanding of how Docker works rounding into consensus, we started to get back to the original question of what could run in a Windows container? <a href="http://www.westerndevs.com/bios/tom_opgenorth/">@topgenorth</a> to the rescue once again providing the group with a link to an introduction blog post on the <a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="external">extensions that allow linux to create and manage containers</a>.</p><p>We started with this list as a basis for discussing what might need to be shared by a Windows host to it's containers so that they could run. I don't think we have an answer on what all of the comparable Windows services are, but we have started to explore that question.</p><h3>Wrapping up the Conversation</h3><p>So in the end, we decided that a container was either an &quot;AppDomain on steroids&quot; or a &quot;Dumbed down VM&quot; and that we didn't know for sure what containers on a Windows Server would look like in the end. A VM clearly provides isolation over and above what is intended by containers and doesn't provide the performance benefits of using a shared kernel. But an AppDomain in itself doesn't provide the level of isolation, control, or repeatable environments that real containers and VMs can provide.</p><h3>Final Thoughts</h3><p>In the end as is very often the case, we decided that we were all right, we were all wrong, and that we had learned a lot during the conversation and we hope that you can share in our learning and new-found common understanding of how containers work and how they might work in a Windows world.</p>]]></content>
    
    <summary type="html">
    
      &lt;h5&gt;Dislaimer&lt;/h5&gt;
&lt;p&gt;This blog post serves two purposes: Act as a historical record of a conversation with a bunch of interesting links in context, and to share a bit of an insider look at how conversations happen in the WesternDevs slack channels.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Configuring Features for Many TeamProjects in TFS 2015</title>
    <link href="http://www.westerndevs.com//configuring-features-for-many-teamprojects-in-tfs-2015/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//configuring-features-for-many-teamprojects-in-tfs-2015/</id>
    <published>2015-09-03T05:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>One of the problems that comes with having multiple Team Project Collections and multiple Team Projects (in TFS) is the administrative burden required to upgrade or manage all of these projects.Security permissions, WIT modifications, configuration are all a 0..n problem so the more Team Projects you have, the more work it is, out of the box, to manage your TFS implementation.</p><a id="more"></a><p>There are numerous people and projects who have stepped up to help reduce this burden with applications, PowerShell scripts, and techniques for getting more work done with less effort.</p><p>One of those projects is <a href="https://features4tfs.codeplex.com" target="_blank" rel="external">Features4tfs</a>, a command line application project that builds on a couple blog posts to make feature configuration easier when dealing with multiple TeamProjects.</p><p>Unfortunately, I've discovered that something happened between TFS 2015 RC and TFS 2015 RTM and this project no longer works. I've updated the code to use the latest RTM Object model binariesbut I've just been unable to get it working. A few other people have run into this problem as well, and we've been unable to get any help or answers about this problem.</p><p>Regardless of getting help or not, I need to keep my client's migration/upgrade project moving forward and to that end, <a href="http://www.westerndevs.com/simple-powershell-automation-browser-based-tasks/">PowerShell, IE Automation</a> and <a href="http://www.westerndevs.com/tfs-module-in-powershell-using-nuget/">my recent work with the TFS 2015 Object Model in PowerShell</a> to the rescue!</p><h3>Implementing the Automate-IEConfigureFeatures Script</h3><p>In order to understand this script, you'll need to make sure you understand what I'm doing with <a href="http://www.westerndevs.com/simple-powershell-automation-browser-based-tasks/">IE Automation</a> and using a <a href="http://www.westerndevs.com/tfs-module-in-powershell-using-nuget/">TFS PowerShell Module</a> that I've discussed previously on this <a href="http://www.agileramblings.com" target="_blank" rel="external">(and my)</a> blog. I'll be using techniques from both those posts.</p><p>First, we need to enhance my TFS PowerShell module to add a cmdlet that it didn't have from the previous post.</p><h4>Implement Get-TfsTeamProjects CmdLet</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-TfsTeamProjects() &#123;</div><div class="line"><span class="comment">&lt;# </span></div><div class="line">    <span class="doctag">.SYNOPSIS</span></div><div class="line">    Get a collection of Team Projects from a Team Project Collection</div><div class="line">    <span class="doctag">.DESCRIPTION</span></div><div class="line">    Get a collection of Team Projects from a Team Project Collection (TPC) using the Id (guid) from the TPC object</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Get-TfsTeamProjects $configServer "000000-0000-000000-000000000" &lt;--- GUID</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Get-TfsTeamProjects $cs &lt;tpcID Here&gt;</div><div class="line">    <span class="doctag">.PARAMETER configServer</span></div><div class="line">    The TfsConfigurationServer object that represents a connection to TFS server that you'd like to access</div><div class="line">    <span class="doctag">.PARAMETER teamProjectCollectionId</span></div><div class="line">    The id (guid) of the TeamProjectCollection that you'd like to get a list of TeamProjects from</div><div class="line">#&gt;</div><div class="line"></div><div class="line">    [CmdLetBinding()]</div><div class="line">    <span class="keyword">param</span>(</div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>, ValueFromPipeline = <span class="literal">$true</span>)]</div><div class="line">        [Microsoft.TeamFoundation.Client.TfsConfigurationServer]<span class="variable">$configServer</span>, </div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>)]</div><div class="line">        [guid]<span class="variable">$teamProjectCollectionId</span></div><div class="line"></div><div class="line">    )</div><div class="line">    <span class="keyword">begin</span>&#123;&#125;</div><div class="line">    <span class="keyword">process</span>&#123;</div><div class="line">         <span class="variable">$tpc</span> = <span class="variable">$configServer</span>.GetTeamProjectCollection(<span class="variable">$teamProjectCollectionId</span>)</div><div class="line">         <span class="comment">#Get WorkItemStore</span></div><div class="line">         <span class="variable">$wiService</span> = <span class="variable">$tpc</span>.GetService([Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore])</div><div class="line">         <span class="comment">#Get a list of TeamProjects</span></div><div class="line">         <span class="variable">$wiService</span>.Projects</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">end</span>&#123;&#125;</div><div class="line">&#125; <span class="comment">#end function Get-TfsTeamProjects </span></div></pre></td></tr></table></figure><p>In this CmdLet, we build on our understanding of the TFS Object Model and, using the WorkItemStore, get a list of all TeamProject in a TPC and return that list from the cmdlet.</p><h4>Composing our IE Automation Script</h4><p>Luckily, the Feature Configuration page is simple, easily addressable, and behaves consistently so it is actually very easy to automate.</p><p>Now we're going to Import-Module (ipmo alias in PowerShell) my TFS PowerShell module. We'll use that functionality for connecting to TFS and getting the lists of TeamProjectCollections and TeamProjects.This Script is not going to be a cmdlet, so it isn't going to be as pretty (or well documented, or perhaps efficient) as the TFS module we've been using.</p><p>There is a function in this Script to help with quickly finding buttons that we're expecting on the TFS Web Access Admin page we're working on.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">cls</div><div class="line"></div><div class="line">ipmo &lt;TfsPowerShellModuleNameHere&gt;</div><div class="line"></div><div class="line"><span class="keyword">function</span> Find-Button(<span class="variable">$ieDoc</span>, <span class="variable">$btnText</span>)&#123;</div><div class="line">    <span class="variable">$btns</span> = <span class="variable">$ieDoc</span>.getElementsByTagName(<span class="string">"button"</span>)</div><div class="line">    <span class="keyword">foreach</span>(<span class="variable">$innerBtn</span> <span class="keyword">in</span> <span class="variable">$btns</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="variable">$innerBtn</span>.parentElement.className <span class="nomarkup">-ne</span> <span class="string">"ui-dialog-buttonset"</span>) &#123;<span class="keyword">continue</span>&#125;</div><div class="line">        <span class="variable">$innerSpans</span> = <span class="variable">$innerBtn</span>.getElementsByTagName(<span class="string">"span"</span>)</div><div class="line">        <span class="keyword">foreach</span>(<span class="variable">$span</span> <span class="keyword">in</span> <span class="variable">$innerSpans</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="variable">$span</span>.InnerText) -and (<span class="variable">$span</span>.InnerText.Contains(<span class="variable">$btnText</span>))) &#123;</div><div class="line">                <span class="comment">#find the button that has a span that has the text btnText</span></div><div class="line">                <span class="variable">$span</span>.parentElement</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$ie</span> = <span class="built_in">new-object</span> -ComObject <span class="string">"InternetExplorer.Application"</span></div><div class="line"></div><div class="line"><span class="variable">$cs</span> = Get-TfsConfigServer &lt;TFS AppTier URL here&gt;</div><div class="line"><span class="variable">$tpcIds</span> = Get-TfsTeamProjectCollectionIds <span class="variable">$cs</span></div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="variable">$tpcId</span> <span class="keyword">in</span> <span class="variable">$tpcIds</span>)&#123;</div><div class="line">    </div><div class="line">    <span class="variable">$tpc</span> = Get-TfsTeamProjectCollection <span class="variable">$cs</span> -teamProjectCollectionId <span class="variable">$tpcId</span></div><div class="line">    [string]<span class="variable">$tpcUri</span> =  <span class="variable">$tpc</span>.Uri.AbsoluteUri</div><div class="line"></div><div class="line">    <span class="variable">$projects</span> = Get-TfsTeamProjects -configServer <span class="variable">$cs</span> -teamProjectCollectionId <span class="variable">$tpcId</span></div><div class="line">    <span class="keyword">foreach</span> (<span class="variable">$proj</span> <span class="keyword">in</span> <span class="variable">$projects</span>)&#123;</div><div class="line">        [string]<span class="variable">$projectName</span> = <span class="variable">$proj</span>.Name</div><div class="line">        <span class="variable">$requestUri</span> = [string]::Format(<span class="string">"&#123;0&#125;/&#123;1&#125;/_admin#_a=enableFeatures"</span>, <span class="variable">$tpcUri</span>, <span class="variable">$projectName</span>.Replace(<span class="string">" "</span>, <span class="string">"%20"</span>))</div><div class="line">        <span class="variable">$verifyButtonText</span> = <span class="string">"Verify"</span></div><div class="line">        <span class="variable">$configureButtonText</span> = <span class="string">"Configure"</span></div><div class="line">        <span class="variable">$closeButtonText</span> = <span class="string">"Close"</span></div><div class="line"></div><div class="line">        <span class="variable">$ie</span>.visible = <span class="literal">$true</span></div><div class="line">        <span class="variable">$ie</span>.silent = <span class="literal">$true</span></div><div class="line">        <span class="variable">$ie</span>.navigate(<span class="variable">$requestUri</span>)</div><div class="line">        <span class="keyword">while</span>(<span class="variable">$ie</span>.Busy) &#123; <span class="built_in">Start-Sleep</span> -Milliseconds <span class="number">100</span> &#125;</div><div class="line"></div><div class="line">        <span class="variable">$doc</span> = <span class="variable">$ie</span>.Document</div><div class="line">        </div><div class="line">        <span class="comment">#discover Verification button </span></div><div class="line">        <span class="variable">$btn</span> = Find-Button <span class="variable">$doc</span> <span class="variable">$verifyButtonText</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="variable">$btn</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>) &#123; <span class="keyword">continue</span> &#125;</div><div class="line">    </div><div class="line">        <span class="comment">#start Verification</span></div><div class="line">        <span class="variable">$btn</span>.click()</div><div class="line"></div><div class="line">        <span class="built_in">Start-Sleep</span> -Milliseconds <span class="number">1000</span></div><div class="line"></div><div class="line">        <span class="variable">$buttonNotFound</span> = <span class="literal">$true</span></div><div class="line">        <span class="comment">#wait for verification to complete</span></div><div class="line">        <span class="keyword">while</span> (<span class="variable">$buttonNotFound</span>) &#123;</div><div class="line">            <span class="variable">$closeBtn</span> = <span class="literal">$null</span>;<span class="variable">$configBtn</span> = <span class="literal">$null</span>;</div><div class="line">            <span class="variable">$closeBtn</span> = Find-Button <span class="variable">$doc</span> <span class="variable">$closeButtonText</span></div><div class="line">            <span class="variable">$configBtn</span> = Find-Button <span class="variable">$doc</span> <span class="variable">$configureButtonText</span></div><div class="line">            <span class="keyword">if</span> ((<span class="variable">$closeBtn</span> <span class="nomarkup">-ne</span> <span class="literal">$null</span>) -or (<span class="variable">$configBtn</span> <span class="nomarkup">-ne</span> <span class="literal">$null</span>))&#123;</div><div class="line">                <span class="variable">$buttonNotFound</span> = <span class="literal">$false</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">Start-Sleep</span> -Milliseconds <span class="number">1000</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="variable">$closeBtn</span> <span class="nomarkup">-ne</span> <span class="literal">$null</span>) &#123;</div><div class="line">            <span class="built_in">Write-Host</span> <span class="string">"Cannot configure features for TeamProject "</span> -NoNewline</div><div class="line">            <span class="built_in">Write-host</span> <span class="string">"($(<span class="variable">$proj</span>.Name)). "</span> -NoNewLine -ForegroundColor Yellow</div><div class="line">            <span class="built_in">Write-Host</span> <span class="string">"It needs to be upgraded first."</span></div><div class="line">            <span class="variable">$warningText</span> = <span class="variable">$doc</span>.getElementById(<span class="string">"issues-textarea-id"</span>).InnerText</div><div class="line">            <span class="built_in">Write-Host</span> <span class="variable">$warningText</span> -ForegroundColor Red | fl -Force</div><div class="line">            <span class="variable">$closeBtn</span>.click()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">elseif</span> (<span class="variable">$configBtn</span> <span class="nomarkup">-ne</span> <span class="literal">$null</span>) &#123;</div><div class="line">            <span class="comment">#start Configuration</span></div><div class="line">            <span class="variable">$configBtn</span>.click()</div><div class="line"></div><div class="line">            <span class="comment">#wait for configuration to complete</span></div><div class="line">            <span class="built_in">Start-Sleep</span> -Milliseconds <span class="number">500</span></div><div class="line"></div><div class="line">            <span class="comment">#close Configuration</span></div><div class="line">            <span class="variable">$buttonNotFound</span> = <span class="literal">$true</span></div><div class="line">            <span class="keyword">while</span> (<span class="variable">$buttonNotFound</span>) &#123;</div><div class="line">                <span class="variable">$closeBtn</span> = <span class="literal">$null</span>;</div><div class="line">                <span class="variable">$closeBtn</span> = Find-Button <span class="variable">$doc</span> <span class="variable">$closeButtonText</span></div><div class="line">                <span class="keyword">if</span> (<span class="variable">$closeBtn</span> <span class="nomarkup">-ne</span> <span class="literal">$null</span>)&#123;</div><div class="line">                    <span class="variable">$buttonNotFound</span> = <span class="literal">$false</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">Start-Sleep</span> -Milliseconds <span class="number">500</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="variable">$closeBtn</span>.click()</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">Write-Host</span> <span class="string">"Failed to find a button"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><h3>Final Thoughts</h3><p>So that is it. I hope that the script is self-explanatory enough for you. I hope that you take away from this blog that there are usually many ways to solvea problem and sometimes we just have to roll up our sleeves and get our hands dirty and do our work in a functional and non-elegant manner.Don't let minor technical glitches get in the way of getting your work done.</p><p>There are the side benefits to this that you don't need to understand how the Feature Configuration works at a code level. You just need to be able to getyour automation to click buttons.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;One of the problems that comes with having multiple Team Project Collections and multiple Team Projects (in TFS) is the administrative burden required to upgrade or manage all of these projects.
Security permissions, WIT modifications, configuration are all a 0..n problem so the more Team Projects you have, the more work it is, out of the box, to manage your TFS implementation.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Getting Docker running on Windows 10</title>
    <link href="http://www.westerndevs.com//getting-docker-running-on-windows-10/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//getting-docker-running-on-windows-10/</id>
    <published>2015-08-14T05:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Just a quick post about a couple things I've learned yesterday and today.</p><p>Docker is now available to run on Windows 10. I'm not going to go into the details as they are better covered in other posts, but I'll share the steps I followed to get Docker running on my Windows 10 laptop.</p><a id="more"></a><p><img src="https://agileramblings.files.wordpress.com/2015/08/docker-windows-10.png?w=600&amp;h=308" alt="Docker-Windows-10"></p><h3>Visit David Wesst's Blog post (cross-posted to Western Devs)</h3><p>Dave was the first of the Western Dev guys to talk about trying to get Docker working on Windows 10. He blogged about his adventure and that is where I started.</p><p><a href="http://blog.davidwesst.com/2015/08/docker-on-windows-10-problems" target="_blank" rel="external">http://blog.davidwesst.com/2015/08/docker-on-windows-10-problems</a></p><p><a href="http://www.westerndevs.com/docker-on-windows-10-problems">http://www.westerndevs.com/docker-on-windows-10-problems</a></p><h3>Visit the Docker GitHub site</h3><p>Dave's post directed me towards a couple other places. Namely, the Docker issues GitHub site and the Docker windows installation page.</p><p><a href="https://docs.docker.com/installation/windows" target="_blank" rel="external">https://docs.docker.com/installation/windows</a></p><p>This was pretty important because it was where the conversation about getting Docker (more accurately, VirtualBox) running on Windows 10. There is an issue in VirtualBox (current stable build) that does not allow it to work on Windows 10. This issue has been resolved in a Test build. The link to the test build is here.</p><p><span style="text-decoration: line-through;">https://www.virtualbox.org/wiki/testbuilds</span> (no longer active)</p><p>I didn't actually need to go to the VirtualBox website to get the build because the latest test version of the Docker for Windows installer has the test version of VirtualBox already inside of it. You can find the link to the current test installer here.</p><p><a href="https://github.com/docker/toolbox/issues/77" target="_blank" rel="external">https://github.com/docker/toolbox/issues/77</a></p><h3>Follow the start up direction</h3><p>The next thing I did was follow all of the start-up directions from the docker windows install documents. VirtualBox was installed, all of the Docker Toolbox items where installed, and so I fired it all up. And it didn't work. What was going on? The VM very quickly informed me that it couldn't find a 64bit cpu/os which is required to run docker.</p><blockquote><p><strong>This kernel requires an x86-64 CPU, but only detected an i686 CPU. Unable to boot – please use a kernel appropriate for your CPU</strong></p></blockquote><p>Well, that was weird. I have an modern laptop (Dell XPS 15) running 64 bit Windows 10 Enterprise. What could be the problem? Google Foo to the rescue!</p><p>First I found posts suggesting that the CPU Intel Virtualization Technologies were not enabled. I didn't think that was true because I had already been running some HyperV machines on my laptop, but I did re-boot into my BIOS and ensure that Intel VT-x/AMD-V where enabled. They were.</p><p>So google a bit more, and I find that Virtual Box might need me to change the &quot;type&quot; of the VM to &quot;Other&quot; and the OS to &quot;Other/64bit&quot; or something like that. But interestingly enough, those were not options that I had in the VM.</p><p><img src="https://agileramblings.files.wordpress.com/2015/08/virtualbox-os-options.png?w=450&amp;h=330" alt="VirtualBox-OS-Options"></p><p>This screenshot was taken after the fix (which I'm getting to) but originally, none of the 64 bit versions of the OSes were available as a choice.</p><p><img src="https://agileramblings.files.wordpress.com/2015/08/virtualbox-os-bit-options.png?w=450&amp;h=330" alt="VirtualBox-OS-bit-options"></p><p>One last thing I found was to remove the HyperV feature from Windows 10, but that wasn't a viable option for me. I have some HyperV virtual machines that I run (and need to run) so I didn't even explore that option.</p><p>At this point, I worked around for a bit and then gave up for the evening. Better to sleep on it and see if I could start fresh in the morning.</p><h3>Scott Hanselman to the Rescue</h3><p>I'm not sure what search I did in the morning that got me to Scott Hanselman's post. I should really just always go there first because I find so much good information about Windows development (native and cross-platform) there. But specifically, it was this post that finally solved my problem.</p><p><a href="http://www.hanselman.com/blog/switcheasilybetweenvirtualboxandhypervwithabcdeditbootentryinwindows81.aspx" target="_blank" rel="external">http://www.hanselman.com/blog/switcheasilybetweenvirtualboxandhypervwithabcdeditbootentryinwindows81.aspx</a></p><p>I didn't know this until today, but as it turns out, HyperV and VirtualBox will not run together side-by-side in 64 bit modes. And Scott's blog post about rebooting to a <strong>hypervisorlaunchtype off</strong> mode of Windows 8.1 worked flawlessly for Windows 10. So I didn't have to un-install the HyperV feature, but as it turns out, I did have to disable HyperV. I'm sure glad I don't have to add/remove it daily though!</p><h3>Final Thoughts</h3><p>So that was it! Thanks to <a href="http://blog.davidwesst.com/" target="_blank" rel="external">David Wesst</a>, <a href="http://www.westerndevs.com/">WesternDevs</a>, <a href="https://www.docker.com/" target="_blank" rel="external">Docker </a>and <a href="http://www.hanselman.com/" target="_blank" rel="external">Scott Hanselman</a>, I now have Docker running on my Windows 10 laptop. Just not at the same time as my HyperV virtual machines. :D</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just a quick post about a couple things I&#39;ve learned yesterday and today.&lt;/p&gt;
&lt;p&gt;Docker is now available to run on Windows 10. I&#39;m not going to go into the details as they are better covered in other posts, but I&#39;ll share the steps I followed to get Docker running on my Windows 10 laptop.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Using PowerShell to Set Your Azure SQL firewall rule</title>
    <link href="http://www.westerndevs.com//using-powershell-to-set-your-azure-sql-firewall-rule/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//using-powershell-to-set-your-azure-sql-firewall-rule/</id>
    <published>2015-07-27T03:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you've read a couple of my recent blog posts, you'll see that I've been working in PowerShell a lot lately. I've also been working with Azure a lot lately as well and I'm getting opportunities to put those two things together.</p><a id="more"></a><p>Since my laptop is moving around a lot and occasionally my home IP address changes, I do need to update my Azure SQL Firewall rule to allow my computer at my current my IP address to talk to my Azure SQL database server.</p><p><a href="https://msdn.microsoft.com/en-us/library/azure/ee621782.aspx" title="https://msdn.microsoft.com/en-us/library/azure/ee621782.aspx" target="_blank" rel="external">Azure SQL Database Firewall</a></p><p>I've added 4 simple functions to my .\profile.ps1 script that makes this job really easy.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Set-MyAzureFirewallRule &#123;</div><div class="line">    <span class="variable">$response</span> = <span class="built_in">Invoke-WebRequest</span> ifconfig.me/ip</div><div class="line">    <span class="variable">$ip</span> = <span class="variable">$response</span>.Content.Trim()</div><div class="line">New-AzureSqlDatabaseServerFirewallRule -StartIPAddress <span class="variable">$ip</span> -EndIPAddress <span class="variable">$ip</span> -RuleName &lt;Name of Rule&gt; -ServerName &lt;your database server name here&gt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Update-MyAzureFirewallRule&#123;</div><div class="line">    <span class="variable">$response</span> = <span class="built_in">Invoke-WebRequest</span> ifconfig.me/ip</div><div class="line">    <span class="variable">$ip</span> = <span class="variable">$response</span>.Content.Trim()</div><div class="line">    Set-AzureSqlDatabaseServerFirewallRule -StartIPAddress <span class="variable">$ip</span> -EndIPAddress <span class="variable">$ip</span> -RuleName &lt;Name of Rule&gt; -ServerName &lt;your database server name here&gt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Remove-MyAzureFirewallRule&#123;</div><div class="line">    Remove-AzureSqlDatabaseServerFirewallRule -RuleName &lt;Name of Rule&gt; -ServerName &lt;your database server name here&gt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> Get-MyAzureFirewallRule&#123;</div><div class="line">    Get-AzureSqlDatabaseServerFirewallRule -RuleName &lt;Name of Rule&gt; -ServerName &lt;your database server name here&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3>Get the Azure PowerShell Module</h3><p>The first thing you'll need to do if you want to do any work with Azure via PowerShell is download and install the Azure PowerShell modules.</p><p><a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" title="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" target="_blank" rel="external">Install And Configure Azure PowerShell</a></p><p>Once you've done this, you'll be able to run Azure CommandLets in your PowerShell session.</p><h3>How to get your IP address</h3><p>Since many times I'm behind a router that is doing NAT translations, knowing my IP address isn't as simple as typing <code>Get-NetIPAddress | Format-Table</code> or <code>ipconfig</code> in a console. That will tell me what my computer thinks the IP address is in my local network, but that isn't what Azure will see. Azure will see the IP address of my cable modem.</p><p>In order to find out what my IP address is from an external perspective, I need the help of a little service called <a href="http://ifconfig.me/" target="_blank">ifconfig.me</a> to tell me what my IP address is externally. If you make the whole Url <a href="http://ifconfig.me/ip" target="_blank">ifconfig.me/ip</a> you will get a simple text response from them with your IP address. Just give that Url a click and try it out. If you view the page source, you'll see that only text was returned.</p><h3>Putting it all together</h3><p>So now we have the Azure PowerShell modules and we know about ifconfig.me. All we need now is the put the two together into one of our functions. I'll use my first function as the example. You'll be able to follow the rest after I describe this one.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Set-MyAzureFirewallRule &#123;</div><div class="line">    <span class="variable">$response</span> = <span class="built_in">Invoke-WebRequest</span> ifconfig.me/ip</div><div class="line">    <span class="variable">$ip</span> = <span class="variable">$response</span>.Content.Trim()</div><div class="line">New-AzureSqlDatabaseServerFirewallRule -StartIPAddress <span class="variable">$ip</span> -EndIPAddress <span class="variable">$ip</span> -RuleName &lt;Name of Rule&gt; -ServerName &lt;your database server name here&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The first line is the PowerShell (non-Azure) CmdLet <code>Invoke-WebRequest ifconfig.me/ip</code>. This will call ifconfig.me/ip and get a response, trapped in the <code>$response</code> variable.</p><p>In the next line, I clean up the response a little bit using some .Net string functions to move my IP address into the <code>$ip</code> variable.</p><p>Finally, I call the Azure PowerShell CmdLet to create a new Firewall rule in my Azure account.</p><blockquote><p>You will have to have followed the instructions in <a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" title="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" target="_blank" rel="external">Azure PowerShell Install and Configure</a> to set up the authentication to allow this PowerShell session to access your Azure subscription.</p></blockquote><p>The other three variations of this function are for completeness. You will actually probably use the <code>Update-MyAzureFirewallRule</code> most since you'll set-up the Firewall rule once the first time and then you'll just need to update it whenever your IP address changes.</p><h3>Final Thoughts</h3><p>I hope this post makes it easier for you to access your SQL Azure database server from your laptop, where ever it may have moved. Once you've set up the rule, you'll be able to access your database server from the tools in Visual Studio, SQL Server Management Studio, or any other tool you prefer to use to work with your Azure SQL Server.</p><p>Enjoy!!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you&#39;ve read a couple of my recent blog posts, you&#39;ll see that I&#39;ve been working in PowerShell a lot lately. I&#39;ve also been working with Azure a lot lately as well and I&#39;m getting opportunities to put those two things together.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Using IE Automation in PowerShell to Simplify Browser Based Tasks</title>
    <link href="http://www.westerndevs.com//simple-powershell-automation-browser-based-tasks/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//simple-powershell-automation-browser-based-tasks/</id>
    <published>2015-07-25T03:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>As a consultant, one of the things that I need to do regularly is log into my client's WiFi networks. Sometimes this is a once per month task, sometimes it is a daily task. It was a daily version of this task that made me look into doing this a bit quicker. Opening Internet Explorer (or any browser) and then navigating to the page, typing in all of my credentials, and then submitting the request is a fairly monotonous task, and it isn't very quick.</p><a id="more"></a><p>Now a days, I almost always have a PowerShell window open, and because of another little experiment I did with PowerShell and IE, I thought it should be easy to automate my WiFi network login. So I that is what I set out to do.</p><p>The way that I'm currently working in PowerShell is to create a .ps1 file to do my development in. That way I can version control the file, and keep it separate from other things that are working or in progress. So in this case, I made a PowerShell script file called Login-GuestWifi.ps1. In this file, I just started typing lines of PowerShell script and eventually I would move it into a CmdLet or a function somewhere else.</p><p>The first line in the PowerShell script is a call to create an Internet Explorer Application.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ie</span> = <span class="built_in">new-object</span> -ComObject <span class="string">"InternetExplorer.Application"</span></div></pre></td></tr></table></figure><p>Now that you've got IE in your PowerShell code, you need to figure out what to do with this. This is going to require a little bit of work in the browser so you're going to have to open a browser and navigate to the page you're going to be working with. In my case, this was an internal IP address that I was re-directed to when using the browser for the first time on the guest WiFi network.</p><p>http://10.10.10.10 – Example URL</p><p><img src="http://agileramblings.files.wordpress.com/2015/07/image_thumb.png?w=244&amp;h=186" alt="image" title="image"></p><p>Once I've navigated there, I press F12 to get to the developer tools of my browser. (I'll use IE for my examples)</p><p><img src="http://agileramblings.files.wordpress.com/2015/07/image_thumb1.png?w=244&amp;h=219" alt="image" title="image"></p><p>Using the Dev Tools, I'm going to discover what the fields I need to fill in are (their id or class). In this case, I found fragments of ids that were not generated. I took those fragments and put them into my PowerShell code along with URL of the login page.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$requestUri</span> = http://<span class="number">10.10</span>.<span class="number">10.10</span>/guest/wifi-guest.php</div><div class="line"><span class="variable">$userIdFragment</span> = <span class="string">"weblogin_user"</span>;</div><div class="line"><span class="variable">$passwordIdFragment</span> = <span class="string">"weblogin_password"</span>;</div><div class="line"><span class="variable">$acceptTermsInputFragment</span> = <span class="string">"weblogin_visitor_accept_terms"</span></div><div class="line"><span class="variable">$buttonIdFragment</span> = <span class="string">"weblogin_submit"</span>;</div></pre></td></tr></table></figure><p>I now have details of where to go and ability to find the elements on the page that I'm interested in. I'm going to now invoke some methods on the IE Application instance I have to navigate to the Url.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#$ie.visible = $true</span></div><div class="line"><span class="variable">$ie</span>.silent = <span class="literal">$true</span></div><div class="line"><span class="variable">$ie</span>.navigate(<span class="variable">$requestUri</span>)</div><div class="line"><span class="keyword">while</span>(<span class="variable">$ie</span>.Busy) &#123; <span class="built_in">Start-Sleep</span> -Milliseconds <span class="number">100</span> &#125;</div></pre></td></tr></table></figure><p>The first two lines indicate how IE is supposed to behave in two ways and the first one is commented out.</p><ol><li>Show the instance of IE. With this line commented out, we get a &quot;headless&quot; browsing experience with no visible window or rendering.  <a href="https://msdn.microsoft.com/en-us/library/aa752082%28v=vs.85%29.aspx" title="https://msdn.microsoft.com/en-us/library/aa752082%28v=vs.85%29.aspx" target="_blank" rel="external">Visible Property - MSDN</a></li><li>Do not show any dialogs that may pop up. <a href="https://msdn.microsoft.com/en-us/library/aa752074(v=vs.85).aspx" title="https://msdn.microsoft.com/en-us/library/aa752074(v=vs.85).aspx" target="_blank" rel="external">Silent Property - MSDN</a></li></ol><p>The next instruction tells IE to navigate to the Url provided.</p><p>The 4th line of this script fragment is interesting. We need to wait for IE to actually do the navigation. If we don't add this line, the PowerShell script will happily continue executing much faster than IE will retrieve and load the page into the Document Object Model (DOM) and the rest of your script will probably fail.</p><p>After IE has loaded up the DOM, we can now find our elements, give them values, and click the Submit button.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$doc</span> = <span class="variable">$ie</span>.Document</div><div class="line"><span class="variable">$doc</span>.getElementsByTagName(<span class="string">"input"</span>) | % &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$_</span>.id <span class="nomarkup">-ne</span> <span class="literal">$null</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$_</span>.id.Contains(<span class="variable">$buttonIdFragment</span>)) &#123; <span class="variable">$btn</span> = <span class="variable">$_</span> &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$_</span>.id.Contains(<span class="variable">$acceptTermsInputFragment</span>)) &#123; <span class="variable">$at</span> = <span class="variable">$_</span> &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$_</span>.id.Contains(<span class="variable">$passwordIdFragment</span>)) &#123; <span class="variable">$pwd</span> = <span class="variable">$_</span> &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$_</span>.id.Contains(<span class="variable">$userIdFragment</span>)) &#123; <span class="variable">$user</span> = <span class="variable">$_</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$user</span>.value = <span class="string">"&lt;user name="</span><span class="string">" here="</span><span class="string">"&gt;"</span></div><div class="line"><span class="variable">$pwd</span>.value = <span class="string">"&lt;password here="</span><span class="string">"&gt;"</span></div><div class="line"><span class="variable">$at</span>.checked = <span class="string">"checked"</span></div><div class="line"><span class="variable">$btn</span>.disabled = <span class="literal">$false</span></div><div class="line"><span class="variable">$btn</span>.click()</div><div class="line"><span class="built_in">Write-Verbose</span> <span class="string">"Login Complete"</span></div></pre></td></tr></table></figure><p>One interesting thing about IE automation is that any JavaScript or page behaviours that we would expect to execute don't seem to run, so we need to explicitly enable the submit button in the event that it was not enabled until all of the fields were entered and the accept terms of use checkbox was clicked.</p><p>And that's it! I now have a PowerShell script that runs in seconds and logs me into the client's guest WiFi network.</p><p><img src="http://agileramblings.files.wordpress.com/2015/07/image_thumb2.png?w=244&amp;h=80" alt="image" title="image"></p><p>As a final task, I took the code in my Login-GuestWifi.ps1, converted it to a function and placed it in my ./profile.ps1 file that gets invoked any time a PowerShell session is started on my machine.</p><p>It should be noted that the UserName and Password, in my case, were not secured in any fashion other than being only physically stored on my machine in my scripts file. I never checked my credentials into source control and I had no need to put them anywhere else. If needed, I could secure them but that wasn't necessary. These are not domain credentials and are only giving people access to the guest WiFi network.</p><h3>Final Thoughts</h3><p>My goal with this post was to exposed you to the idea of using PowerShell to automate simple web-based tasks in Internet Explorer. I've recently been using PowerShell a lot and I've just been continuously impressed with how powerful it is. So go give it a try!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a consultant, one of the things that I need to do regularly is log into my client&#39;s WiFi networks. Sometimes this is a once per month task, sometimes it is a daily task. It was a daily version of this task that made me look into doing this a bit quicker. Opening Internet Explorer (or any browser) and then navigating to the page, typing in all of my credentials, and then submitting the request is a fairly monotonous task, and it isn&#39;t very quick.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title type="html">Building a TFS 2015 PowerShell Module using Nuget</title>
    <link href="http://www.westerndevs.com//tfs-module-in-powershell-using-nuget/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//tfs-module-in-powershell-using-nuget/</id>
    <published>2015-07-24T03:30:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Dave White</name>
	  <email>dmhwhite@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><em>Update:</em> Unwittingly, I hadn’t tested my Nuget approach on a server with no Visual Studio or TFS installations on it and I’ve missed a couple assemblies that are required when loading the TFS Object model. I’ve updated the line of code in my samples, but just in case, here is the new version of the line in question.</p><a id="more"></a><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$net45Dlls</span> = <span class="variable">$allDlls</span> | ? &#123;<span class="variable">$_</span>.PSPath.Contains(<span class="string">"portable"</span>) <span class="nomarkup">-ne</span> <span class="literal">$true</span> &#125; | ? &#123;<span class="variable">$_</span>.PSPath.Contains(<span class="string">"resources"</span>) <span class="nomarkup">-ne</span> <span class="literal">$true</span> &#125; | ? &#123; (<span class="variable">$_</span>.PSPath.Contains(<span class="string">"net45"</span>) <span class="nomarkup">-eq</span> <span class="literal">$true</span>) -or (<span class="variable">$_</span>.PSPath.Contains(<span class="string">"native"</span>) <span class="nomarkup">-eq</span> <span class="literal">$true</span>) -or (<span class="variable">$_</span>.PSPath.Contains(<span class="string">"Microsoft.ServiceBus"</span>) <span class="nomarkup">-eq</span> <span class="literal">$true</span>) &#125;</div></pre></td></tr></table></figure><p>The update is the addition of two <em>-or</em> statements to the last inclusive where clause.</p><p>I’ve also slightly changed the <em>Import-TfsAssemblies</em> function to include a try/catch block for better error reporting.</p><h4>Original Start</h4><p>With the release of <a href="https://www.visualstudio.com/" target="_blank" rel="external">Visual Studio 2015</a> on July 20, 2015, we can talk about and explore a lot of really cool things that are happening with Visual Studio (VS) and Team Foundation Server (TFS). One of the things that has been a bit of a pain when managing a TFS on-premises installation has been the necessity of installing Visual Studio to get the TFS client object model on your administrative workstation. With the explosive use of PowerShell to manage all things Microsoft, this has been a bit of a drag on using PowerShell for TFS work. There are PowerShell modules for TFS in the TFS Power Tools, but sometimes you need the power that comes with using the TFS Object Model. Which meant that you had to install Visual Studio. I'm really glad to say that is no longer the case. With the release of TFS 2015, the TFS Object Model is now available on <a href="http://www.nuget.org/" target="_blank" rel="external">Nuget</a>! With our trusty nuget.exe, we can now get the TFS object model from a trusted source, without violating any license terms, to use in our own TFS PowerShell modules.</p><p>I'm not going to profess to be a PowerShell wizard so I hope I'm not breaking any community best practices too badly. I'm more than happy to adapt my implementation if I get feedback on better ways of doing things! It should also be noted that I'm using PowerShell 4. This is located in the Windows Managment Framework 4 download (http://www.microsoft.com/en-ca/download/details.aspx?id=40855), a free download from Microsoft. I don't **<em>think </em>**you'll have any problems upgrading from previous versions of PowerShell but I'm not going to any assurances.</p><p>Let's start walking through building a TFS PowerShell module!</p><h2>Create A PowerShell Module</h2><p>I'm not going to go into a lot of details, but the basic steps to creating your PowerShell module are:</p><ol><li>Navigate to %USERPROFILE%\My Documents\WindowsPowerShell\Modules</li><li>Create a folder called MyTfsModule</li><li>In the MyTfsFolder, create a file called MyTfsModule.psm1</li></ol><p>It is important that the name of the Module folder and the Module file are the same. Otherwise, you won't be able to load your module. This one requirement tripped me up for a while when I started writing PowerShell modules.</p><h2>Module-Specific Variables And Helper Functions</h2><p>There are a few module specific variables that we need to set when the module loads and a Helper function that I use for getting/creating folders. You can put these at the top of your MyTfsModule.psm1 file.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Write-Host</span> <span class="string">"Loading MyTfsModule"</span></div><div class="line"><span class="comment">#Module location folder</span></div><div class="line"><span class="variable">$ModuleRoot</span> = <span class="built_in">Split-Path</span> -Parent -Path <span class="variable">$MyInvocation</span>.MyCommand.Definition</div><div class="line"><span class="comment">#where to put TFS Client OM files</span></div><div class="line"><span class="variable">$omBinFolder</span> = $(<span class="string">"<span class="variable">$ModuleRootTFSOMbin</span>"</span>)</div><div class="line"></div><div class="line"><span class="comment"># TFS Object Model Assembly Names</span></div><div class="line"><span class="variable">$vsCommon</span> = <span class="string">"Microsoft.VisualStudio.Services.Common"</span></div><div class="line"><span class="variable">$commonName</span> = <span class="string">"Microsoft.TeamFoundation.Common"</span></div><div class="line"><span class="variable">$clientName</span> = <span class="string">"Microsoft.TeamFoundation.Client"</span></div><div class="line"><span class="variable">$VCClientName</span> = <span class="string">"Microsoft.TeamFoundation.VersionControl.Client"</span></div><div class="line"><span class="variable">$WITClientName</span> = <span class="string">"Microsoft.TeamFoundation.WorkItemTracking.Client"</span></div><div class="line"><span class="variable">$BuildClientName</span> = <span class="string">"Microsoft.TeamFoundation.Build.Client"</span></div><div class="line"><span class="variable">$BuildCommonName</span> = <span class="string">"Microsoft.TeamFoundation.Build.Common"</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> New-Folder() &#123;</div><div class="line">    <span class="comment">&lt;#</span></div><div class="line">    <span class="doctag">.SYNOPSIS</span></div><div class="line">    This function creates new folders</div><div class="line">    <span class="doctag">.DESCRIPTION</span></div><div class="line">    This function will create a new folder if required or return a reference to</div><div class="line">    the folder that was requested to be created if it already exists.</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    New-Folder "C:TempMyNewFolder"</div><div class="line">    <span class="doctag">.PARAMETER folderPath</span></div><div class="line">    String representation of the folder path requested</div><div class="line">    #&gt;</div><div class="line"></div><div class="line">    [CmdLetBinding()]</div><div class="line">    <span class="keyword">param</span>(</div><div class="line">        [parameter(Mandatory=<span class="literal">$true</span>, ValueFromPipeline=<span class="literal">$true</span>)]</div><div class="line">        [string]<span class="variable">$folderPath</span></div><div class="line">    )</div><div class="line">    <span class="keyword">begin</span> &#123;&#125;</div><div class="line">    <span class="keyword">process</span> &#123;</div><div class="line">        <span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> -Path <span class="variable">$folderPath</span>))&#123;</div><div class="line">            <span class="built_in">New-Item</span> -ItemType directory -Path <span class="variable">$folderPath</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">Get-Item</span> -Path <span class="variable">$folderPath</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">end</span> &#123;&#125;</div><div class="line">&#125; <span class="comment">#end Function New-Directory</span></div></pre></td></tr></table></figure><h2>First We Get Nuget</h2><p>The first thing we need to do is get the Nuget.exe from the web. This is very easily down with the following PowerShell function</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-Nuget()&#123;</div><div class="line">    <span class="comment">&lt;#</span></div><div class="line">    <span class="doctag">.SYNOPSIS</span></div><div class="line">    This function gets Nuget.exe from the web</div><div class="line">    <span class="doctag">.DESCRIPTION</span></div><div class="line">    This function gets nuget.exe from the web and stores it somewhere relative to</div><div class="line">    the module folder location</div><div class="line">    #&gt;</div><div class="line">    [CmdLetBinding()]</div><div class="line">    <span class="keyword">param</span>()</div><div class="line"></div><div class="line">    <span class="keyword">begin</span>&#123;&#125;</div><div class="line">    <span class="keyword">process</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">#where to get Nuget.exe from</span></div><div class="line">        <span class="variable">$sourceNugetExe</span> = <span class="string">"http://nuget.org/nuget.exe"</span></div><div class="line"></div><div class="line">        <span class="comment">#where to save Nuget.exe too</span></div><div class="line">        <span class="variable">$targetNugetFolder</span> = New-Folder $(<span class="string">"<span class="variable">$ModuleRootNuget</span>"</span>)</div><div class="line">        <span class="variable">$targetNugetExe</span> = $(<span class="string">"<span class="variable">$ModuleRootNugetnuget</span>.exe"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="comment"># check if we have gotten nuget before</span></div><div class="line">            <span class="variable">$nugetExe</span> = <span class="variable">$targetNugetFolder</span>.GetFiles() | ? &#123;<span class="variable">$_</span>.Name <span class="nomarkup">-eq</span> <span class="string">"nuget.exe"</span>&#125;</div><div class="line">            <span class="keyword">if</span> (<span class="variable">$nugetExe</span> <span class="nomarkup">-eq</span> <span class="literal">$null</span>)&#123;</div><div class="line">                <span class="comment">#Get Nuget from a well known location on the web</span></div><div class="line">                <span class="built_in">Invoke-WebRequest</span> <span class="variable">$sourceNugetExe</span> -OutFile <span class="variable">$targetNugetExe</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> [Exception]</div><div class="line">        &#123;</div><div class="line">            echo <span class="variable">$_</span>.Exception | <span class="built_in">format-list</span> -force</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">#set an alias so we can use nuget syntactically the way we normally would</span></div><div class="line">        <span class="built_in">Set-Alias</span> nuget <span class="variable">$targetNugetExe</span> -Scope Global -Verbose</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">end</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Ok! When this function is invoked, we should now see a nuget.exe appear at:</p><blockquote><p>%USERPROFILE%\My Documents\WindowsPowerShell\Modules\MyTfsModule\Nuget\Nuget.exe</p></blockquote><h2>Using Nuget to get TFS Client Object Model</h2><p>Now that we have nuget, we need to get the TFS Client Object model from nuget.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-TfsAssembliesFromNuget()&#123;</div><div class="line">    <span class="comment">&lt;#</span></div><div class="line">    <span class="doctag">.SYNOPSIS</span></div><div class="line">    This function gets all of the TFS Object Model assemblies from nuget</div><div class="line">    <span class="doctag">.DESCRIPTION</span></div><div class="line">    This function gets all of the TFS Object Model assemblies from nuget and then</div><div class="line">    creates a bin folder of all of the net45 assemblies so that they can be</div><div class="line">    referenced easily and loaded as necessary</div><div class="line">    #&gt;</div><div class="line">    [CmdletBinding()]</div><div class="line">    <span class="keyword">param</span>()</div><div class="line"></div><div class="line">    <span class="keyword">begin</span>&#123;&#125;</div><div class="line">    <span class="keyword">process</span>&#123;</div><div class="line">        <span class="comment">#clear out bin folder</span></div><div class="line">        <span class="variable">$targetOMbinFolder</span> = New-Folder <span class="variable">$omBinFolder</span></div><div class="line">        <span class="built_in">Remove-Item</span> <span class="variable">$targetOMbinFolder</span> -Force -Recurse</div><div class="line">        <span class="variable">$targetOMbinFolder</span> = New-Folder <span class="variable">$omBinFolder</span></div><div class="line">        <span class="variable">$targetOMFolder</span> = New-Folder $(<span class="string">"<span class="variable">$ModuleRootTFSOM</span>"</span>)</div><div class="line"></div><div class="line">        <span class="comment">#get all of the TFS 2015 Object Model packages from nuget</span></div><div class="line">        nuget install <span class="string">"Microsoft.TeamFoundationServer.Client"</span> -OutputDirectory <span class="variable">$targetOMFolder</span> -ExcludeVersion -NonInteractive</div><div class="line">        nuget install <span class="string">"Microsoft.TeamFoundationServer.ExtendedClient"</span> -OutputDirectory <span class="variable">$targetOMFolder</span> -ExcludeVersion -NonInteractive</div><div class="line">        nuget install <span class="string">"Microsoft.VisualStudio.Services.Client"</span> -OutputDirectory <span class="variable">$targetOMFolder</span> -ExcludeVersion -NonInteractive</div><div class="line">        nuget install <span class="string">"Microsoft.VisualStudio.Services.InteractiveClient"</span> -OutputDirectory <span class="variable">$targetOMFolder</span> -ExcludeVersion -NonInteractive</div><div class="line"></div><div class="line">        <span class="comment">#Copy all of the required .dlls out of the nuget folder structure </span></div><div class="line">        <span class="comment">#to a bin folder so we can reference them easily and they are co-located</span></div><div class="line">        <span class="comment">#so that they can find each other as necessary when loading</span></div><div class="line">        <span class="variable">$allDlls</span> = <span class="built_in">Get-ChildItem</span> -Path $(<span class="string">"<span class="variable">$ModuleRoot</span>\TFSOM\"</span>) -Recurse -File -Filter <span class="string">"*.dll"</span></div><div class="line"> </div><div class="line">        <span class="comment"># Create list of all the required .dlls</span></div><div class="line">        <span class="comment">#exclude portable dlls</span></div><div class="line">        <span class="variable">$requiredDlls</span> = <span class="variable">$allDlls</span> | ? &#123;<span class="variable">$_</span>.PSPath.Contains(<span class="string">"portable"</span>) <span class="nomarkup">-ne</span> <span class="literal">$true</span> &#125; </div><div class="line">        <span class="comment">#exclude resource dlls</span></div><div class="line">        <span class="variable">$requiredDlls</span> = <span class="variable">$requiredDlls</span> | ? &#123;<span class="variable">$_</span>.PSPath.Contains(<span class="string">"resources"</span>) <span class="nomarkup">-ne</span> <span class="literal">$true</span> &#125; </div><div class="line">        <span class="comment">#include net45, native, and Microsoft.ServiceBus.dll</span></div><div class="line">        <span class="variable">$requiredDlls</span> = <span class="variable">$requiredDlls</span> | ? &#123; (<span class="variable">$_</span>.PSPath.Contains(<span class="string">"net45"</span>) <span class="nomarkup">-eq</span> <span class="literal">$true</span>) -or (<span class="variable">$_</span>.PSPath.Contains(<span class="string">"native"</span>) <span class="nomarkup">-eq</span> <span class="literal">$true</span>) -or (<span class="variable">$_</span>.PSPath.Contains(<span class="string">"Microsoft.ServiceBus"</span>) <span class="nomarkup">-eq</span> <span class="literal">$true</span>) &#125;</div><div class="line">        <span class="comment">#copy them all to a bin folder</span></div><div class="line">        <span class="variable">$requiredDlls</span> | % &#123; <span class="built_in">Copy-Item</span> -Path <span class="variable">$_</span>.Fullname -Destination <span class="variable">$targetOMBinFolder</span>&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">end</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>This function does a could things. First it cleans out the existing bin folder, if it exists. Then it goes to nuget to get all of the packages that are available there. They are:</p><ol><li>http://www.nuget.org/packages/Microsoft.VisualStudio.Services.Client/</li><li>http://www.nuget.org/packages/Microsoft.VisualStudio.Services.InteractiveClient/</li><li>http://www.nuget.org/packages/Microsoft.TeamFoundationServer.Client/</li><li>http://www.nuget.org/packages/Microsoft.TeamFoundationServer.ExtendedClient/</li></ol><p>I use a number of switches on my invocation of the nuget.exe.</p><ul><li>-OutputDirectory – This sets the output directory for the nuget activities</li><li>-ExcludeVersion – This tells Nuget not to append version numbers to package folders</li><li>-NonInteractive – Don't prompt me for anything</li></ul><p>The next part seems a bit verbose, but I'm leaving it that way as an example of achieving my intent in case you want to achieve something else. I am intending to get all of the net45, non-portable, base language (non-resource) assemblies from the directory structure that is created by nuget when getting the packages. In order to do that I:</p><ol><li>Find all .dll files in the directory structure, recursively</li><li>Exclude .dll files that have &quot;portable&quot; in their path</li><li>Exclude .dll files that have &quot;resource&quot; in their path</li><li>Include only .dll files that have &quot;net45″, &quot;native&quot;, or &quot;Microsoft.ServiceBus&quot; in their path</li></ol><p>After I've narrowed it down to that list of .dll files, I copy them all to the TFSOMbin folder where they will be referenced from. This also allows them to satisfy their dependencies on each other as required when loaded.</p><h2>Loading the TFS Object Models Assemblies</h2><p>Now that we've retrieved the TFS Object model, and tucked it away in a bin folder we can find, we are now ready to load these assemblies into the PowerShell session that this module is in.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Import-TFSAssemblies() &#123;</div><div class="line">    <span class="comment">&lt;#</span></div><div class="line">     <span class="doctag">.SYNOPSIS</span></div><div class="line">     This function imports TFS Object Model assemblies into the PowerShell session</div><div class="line">     <span class="doctag">.DESCRIPTION</span></div><div class="line">     After the TFS 2015 Object Model has been retrieved from Nuget using</div><div class="line">     Get-TfsAssembliesFromNuget function,  this function will import the necessary</div><div class="line">     (given current functions) assemblies into the PowerShell session</div><div class="line">    #&gt;</div><div class="line">    [CmdLetBinding()]</div><div class="line">    <span class="keyword">param</span>()</div><div class="line"></div><div class="line">    <span class="keyword">begin</span>&#123;&#125;</div><div class="line">    <span class="keyword">process</span></div><div class="line">    &#123;</div><div class="line">        <span class="variable">$omBinFolder</span> = $(<span class="string">"<span class="variable">$ModuleRootTFSOMbin</span>"</span>);</div><div class="line">        <span class="variable">$targetOMbinFolder</span> = New-Folder <span class="variable">$omBinFolder</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="built_in">Add-Type</span> -LiteralPath $(<span class="variable">$targetOMbinFolder</span>.PSPath + <span class="variable">$vsCommon</span> + <span class="string">".dll"</span>)</div><div class="line">            <span class="built_in">Add-Type</span> -LiteralPath $(<span class="variable">$targetOMbinFolder</span>.PSPath + <span class="variable">$commonName</span> + <span class="string">".dll"</span>)</div><div class="line">            <span class="built_in">Add-Type</span> -LiteralPath $(<span class="variable">$targetOMbinFolder</span>.PSPath + <span class="variable">$clientName</span> + <span class="string">".dll"</span>)</div><div class="line">            <span class="built_in">Add-Type</span> -LiteralPath $(<span class="variable">$targetOMbinFolder</span>.PSPath + <span class="variable">$VCClientName</span> + <span class="string">".dll"</span>)</div><div class="line">            <span class="built_in">Add-Type</span> -LiteralPath $(<span class="variable">$targetOMbinFolder</span>.PSPath + <span class="variable">$WITClientName</span> + <span class="string">".dll"</span>)</div><div class="line">            <span class="built_in">Add-Type</span> -LiteralPath $(<span class="variable">$targetOMbinFolder</span>.PSPath + <span class="variable">$BuildClientName</span> + <span class="string">".dll"</span>)</div><div class="line">            <span class="built_in">Add-Type</span> -LiteralPath $(<span class="variable">$targetOMbinFolder</span>.PSPath + <span class="variable">$BuildCommonName</span> + <span class="string">".dll"</span>)</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">catch</span> &#123;</div><div class="line">            <span class="variable">$_</span>.Exception.LoaderExceptions | $ &#123; <span class="variable">$_</span>.Message &#125;</div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">end</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2>Putting the Object Model to Use</h2><p>Now that we have the TFS Object Model loaded into this PowerShell session, we can use it! I'm going to show three functions. One that gets the TfsConfigurationServer object (basically your connection to the TFS server), one that gets the TeamProjectCollection Ids and a function that will get a list of all TFS Event Subscriptions on the server.</p><h3>Get-TfsConfigServer</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-TfsConfigServer() &#123;</div><div class="line">    <span class="comment">&lt;#</span></div><div class="line">    <span class="doctag">.SYNOPSIS</span></div><div class="line">    Get a Team Foundation Server (TFS) Configuration Server object</div><div class="line">    <span class="doctag">.DESCRIPTION</span></div><div class="line">    The TFS Configuration Server is used for basic authentication and represents</div><div class="line">    a connection to the server that is running Team Foundation Server.</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Get-TfsConfigServer "&amp;lt;Url to TFS&amp;gt;"</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Get-TfsConfigServer "http://localhost:8080/tfs"</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    gtfs "http://localhost:8080/tfs"</div><div class="line">    <span class="doctag">.PARAMETER url</span></div><div class="line">     The Url of the TFS server that you'd like to access</div><div class="line">    #&gt;</div><div class="line">    [CmdletBinding()]</div><div class="line">    <span class="keyword">param</span>(</div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>)]</div><div class="line">        [string]<span class="variable">$url</span></div><div class="line">    )</div><div class="line">    <span class="keyword">begin</span> &#123;</div><div class="line">        <span class="built_in">Write-Verbose</span> <span class="string">"Loading TFS OM Assemblies for 2015 (14.83.0)"</span></div><div class="line">        Import-TFSAssemblies</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">process</span> &#123;</div><div class="line">        <span class="variable">$retVal</span> = [Microsoft.TeamFoundation.Client.TfsConfigurationServerFactory]::GetConfigurationServer(<span class="variable">$url</span>)</div><div class="line">        [void]<span class="variable">$retVal</span>.Authenticate()</div><div class="line">        <span class="keyword">if</span>(!<span class="variable">$retVal</span>.HasAuthenticated)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">Write-Host</span> <span class="string">"Not Authenticated"</span></div><div class="line">            <span class="built_in">Write-Output</span> <span class="literal">$null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">Write-Host</span> <span class="string">"Authenticated"</span></div><div class="line">            <span class="built_in">Write-Output</span> <span class="variable">$retVal</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">end</span> &#123;</div><div class="line">        <span class="built_in">Write-Verbose</span> <span class="string">"ConfigurationServer object created."</span></div><div class="line">    &#125;</div><div class="line">&#125; <span class="comment">#end Function Get-TfsConfigServer</span></div></pre></td></tr></table></figure><p>This function takes a Url and returns an instance of a Microsoft.TeamFoundation.Client.TfsConfigurationServer. This connection object will be authenticated (via Windows Integrated Authentication). If you don't have permission within the domain to administer the TFS server, you won't be able to use the functions provided by the object model. The other functions require this connection in order to do their additional work.</p><h3>Get-TfsProjectCollections</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Get-TfsTeamProjectCollectionIds() &#123;</div><div class="line">    <span class="comment">&lt;#</span></div><div class="line">    <span class="doctag">.SYNOPSIS</span></div><div class="line">    Get a collection of Team Project Collection (TPC) Id</div><div class="line">    <span class="doctag">.DESCRIPTION</span></div><div class="line">    Get a collection of Team Project Collection (TPC) Id from the server provided</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Get-TfsTeamProjectCollectionIds $configServer</div><div class="line">    <span class="doctag">.EXAMPLE</span></div><div class="line">    Get-TfsConfigServer "http://localhost:8080/tfs" | Get-TfsTeamProjectCollectionIds</div><div class="line">    <span class="doctag">.PARAMETER configServer</span></div><div class="line">    The TfsConfigurationServer object that represents a connection to TFS server that you'd</div><div class="line">    like to access</div><div class="line">    #&gt;</div><div class="line">    [CmdLetBinding()]</div><div class="line">    <span class="keyword">param</span>(</div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>, ValueFromPipeline = <span class="literal">$true</span>)]</div><div class="line">        [Microsoft.TeamFoundation.Client.TfsConfigurationServer]<span class="variable">$configServer</span></div><div class="line">    )</div><div class="line">    <span class="keyword">begin</span>&#123;&#125;</div><div class="line">    <span class="keyword">process</span>&#123;</div><div class="line">        <span class="comment"># Get a list of TeamProjectCollections</span></div><div class="line">        [guid[]]<span class="variable">$types</span> = [guid][Microsoft.TeamFoundation.Framework.Common.CatalogResourceTypes]::ProjectCollection</div><div class="line">        <span class="variable">$options</span> = [Microsoft.TeamFoundation.Framework.Common.CatalogQueryOptions]::None</div><div class="line">        <span class="variable">$configServer</span>.CatalogNode.QueryChildren( <span class="variable">$types</span>, <span class="literal">$false</span>, <span class="variable">$options</span>) | % &#123; <span class="variable">$_</span>.Resource.Properties[<span class="string">"InstanceId"</span>]&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">end</span>&#123;&#125;</div><div class="line">&#125; <span class="comment">#end Function Get-TfsTeamProjectCollectionIds</span></div></pre></td></tr></table></figure><h3>Get-TfsEventSubscriptions</h3><p>We are using a 3rd party tool that subscribes to build events and we needed to know if it was releasing those subscriptions properly and also discover where this tool was running. We thought that the easiest way to do this was to look at all of the subscriptions in the TFS Project Collections in our AppTier.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#adapted from http://blogs.msdn.com/b/alming/archive/2013/05/06/finding-subscriptions-in-tfs-2012-using-powershell.aspx</span></div><div class="line"><span class="keyword">function</span> Get-TFSEventSubscriptions() &#123;</div><div class="line"></div><div class="line">    [CmdLetBinding()]</div><div class="line">    <span class="keyword">param</span>(</div><div class="line">        [parameter(Mandatory = <span class="literal">$true</span>)]</div><div class="line">        [Microsoft.TeamFoundation.Client.TfsConfigurationServer]<span class="variable">$configServer</span></div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="keyword">begin</span>&#123;&#125;</div><div class="line">    <span class="keyword">process</span>&#123;</div><div class="line">        <span class="variable">$tpcIds</span> = Get-TfsTeamProjectCollectionIds <span class="variable">$configServer</span></div><div class="line">        <span class="keyword">foreach</span>(<span class="variable">$tpcId</span> <span class="keyword">in</span> <span class="variable">$tpcIds</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">#Get TPC instance</span></div><div class="line">            <span class="variable">$tpc</span> = <span class="variable">$configServer</span>.GetTeamProjectCollection(<span class="variable">$tpcId</span>)</div><div class="line">            <span class="comment">#TFS Services to be used</span></div><div class="line">            <span class="variable">$eventService</span> = <span class="variable">$tpc</span>.GetService(<span class="string">"Microsoft.TeamFoundation.Framework.Client.IEventService"</span>)</div><div class="line">            <span class="variable">$identityService</span> = <span class="variable">$tpc</span>.GetService(<span class="string">"Microsoft.TeamFoundation.Framework.Client.IIdentityManagementService"</span>)</div><div class="line"></div><div class="line">            <span class="keyword">foreach</span> (<span class="variable">$sub</span> <span class="keyword">in</span> <span class="variable">$eventService</span>.GetAllEventSubscriptions())</div><div class="line">            &#123;</div><div class="line">                <span class="comment">#First resolve the subscriber ID</span></div><div class="line">                <span class="variable">$tfsId</span> = <span class="variable">$identityService</span>.ReadIdentity(</div><div class="line">                    [Microsoft.TeamFoundation.Framework.Common.IdentitySearchFactor]::Identifier,</div><div class="line">                    <span class="variable">$sub</span>.Subscriber,</div><div class="line">                    [Microsoft.TeamFoundation.Framework.Common.MembershipQuery]::None,</div><div class="line">                    [Microsoft.TeamFoundation.Framework.Common.ReadIdentityOptions]::None )</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="variable">$tfsId</span>.UniqueName)</div><div class="line">                &#123;</div><div class="line">                    <span class="variable">$subscriberId</span> = <span class="variable">$tfsId</span>.UniqueName</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    <span class="variable">$subscriberId</span> = <span class="variable">$tfsId</span>.DisplayName</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">#then create custom PSObject</span></div><div class="line">                <span class="variable">$subPSObj</span> = <span class="built_in">New-Object</span> PSObject -Property @&#123;</div><div class="line">                    AppTier = <span class="variable">$tpc</span>.Uri</div><div class="line">                    ID = <span class="variable">$sub</span>.ID</div><div class="line">                    Device = <span class="variable">$sub</span>.Device</div><div class="line">                    Condition = <span class="variable">$sub</span>.ConditionString</div><div class="line">                    EventType = <span class="variable">$sub</span>.EventType</div><div class="line">                    Address = <span class="variable">$sub</span>.DeliveryPreference.Address</div><div class="line">                    Schedule = <span class="variable">$sub</span>.DeliveryPreference.Schedule</div><div class="line">                    DeliveryType = <span class="variable">$sub</span>.DeliveryPreference.Type</div><div class="line">                    SubscriberName = <span class="variable">$subscriberId</span></div><div class="line">                    Tag = <span class="variable">$sub</span>.Tag</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="comment">#Send object to the pipeline. You could store it on an Arraylist, but that just</span></div><div class="line">               <span class="comment">#consumes more memory</span></div><div class="line">               <span class="variable">$subPSObj</span></div><div class="line"></div><div class="line">               <span class="comment">#This is another variation where we just add a property to the existing Subscription object</span></div><div class="line">               <span class="comment">#this might be desirable since it will keep the other members</span></div><div class="line">               <span class="comment">#Add-Member -InputObject $sub -NotePropertyName SubscriberName -NotePropertyValue $subscriberId</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">end</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2>All Done</h2><p>We are now all done creating our initial MyTfsModule implementation! We should be able to load it up now and give it a spin!</p><p><img src="https://agileramblings.files.wordpress.com/2015/07/mytfsmodule_in_action.png?w=502&amp;h=176" alt="MyTfsModule_In_Action"></p><p>I've obscured the name of my running module and TFS server, but in those spots, just use the name of your module and TFS server.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Import-Module</span> MyTfsModule</div><div class="line"><span class="variable">$configServer</span> = Get-TfsConfigServer http://&lt;name of your TFS server&gt;:<span class="number">8080</span>/tfs</div><div class="line"><span class="variable">$allEventsOnServer</span> = Get-TfsEventSubscriptions <span class="variable">$configServer</span></div><div class="line"><span class="variable">$allEventsOnServer</span>.Length</div></pre></td></tr></table></figure><h2>Final Thoughts</h2><p>The key takeaway from this post was that it is great that we can now get the TFS Object Model from Nuget. Still a bit of a pain to sort and move the downloaded assemblies around, but this is because we I am using PowerShell and not building some sort of C#-based project in Visual Studio which would handle the nuget packages much more elegantly.</p><p>I hope this post gives you the information you need to go off and create your own TFS PowerShell module without having to install Visual Studio first!</p><p>p.s. I do have a version of this module that loads the assemblies from the install location of Visual Studio. I'll visit that shortly in another blog post.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; Unwittingly, I hadn’t tested my Nuget approach on a server with no Visual Studio or TFS installations on it and I’ve missed a couple assemblies that are required when loading the TFS Object model. I’ve updated the line of code in my samples, but just in case, here is the new version of the line in question.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
