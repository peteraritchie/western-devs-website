<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Western Devs</title>
  
  <link href="/feeds/simon_timms" rel="self" type="application/atom+xml"/>
  <link href="http://www.westerndevs.com" rel="alternate" type="application/atom+xml"/>
  
  <updated>2017-05-18T21:09:05.000Z</updated>
  <id>http://www.westerndevs.com/</id>
  
  <author>
    <name>Western Devs</name>
	<uri>http://www.westerndevs.com</uri>
    <email>info@westerndevs.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title type="html">The Great RS-232 Adventure</title>
    <link href="http://www.westerndevs.com/development/AndroidSerialPorts/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/development/AndroidSerialPorts/</id>
    <published>2017-05-11T23:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A few days back my buddy <a href="/bios/justin_self">Justin Self</a> found me a pretty good challenge. Although my memory isn't as good as it once was I have a high degree of confidence that the interaction went something like this.</p><p><strong>Scene:</strong> Simon has just walked out of the ocean after having swum between two adjacent tropical islands. As he strolls up to the beach Justin arrives.</p><p><img src="http://imgur.com/WQlOjce.png" alt="100% truthful representation of what it looked like"><em>Photo of expensive and highly accurate recreation of what happened</em></p><p><strong>Justin:</strong> We need somebody to figure out how to get this android tablet to talk over serial to a computer.</p><p><strong>Simon:</strong> You mean over USB?</p><p><strong>Justin:</strong> No, over RS-232 serial. And you need to be able to do it in Xamarin's MonoDroid or Mono for Android or whatever non-copyright infringing name they have for it now.</p><p><strong>Simon:</strong> Well Justin, I've never used Xamarin before, nor have I written an Android app, nor have I ever done communication over a serial port before. I actually know nothing about hardware either.</p><p><strong>Justin:</strong> You're almost overqualified for this...</p><p><strong>Simon:</strong> I'm as qualified as I am to do anything. I'll get right on it - ship me the tablet.</p><p>And that is a very accurate representation of just what happened. My first step was to get the cables I needed. Back in 1996 I had a serial mouse but that fellow is long since gone and I haven't a single serial cable in my house. So I headed over to a local electronics store and threw myself at the mercy of the clerk and elderly electrical engineering type. He soon had me kitted out with all the hardware I needed</p><ul><li>ATEN USB to Serial converter</li><li>6ft straight through serial cable</li><li>F/F gender changer</li><li>Null modem adapter</li></ul><p>My computer didn't have an RS-232 port and neither did anything else in my house so the USB-to-serial converter was key. It installed using built in Windows drivers which was fortunate because the manual that came with it only had instructions for installing on Windows 2000. For the serial cable I took a straight through because I wasn't sure how the tablet was wired. The gender changer was needed to hook things together and the null modem adapter was to switch around the wiring for computer to computer communication. See back in the day you'd actually use different wires to connect two computers than to connect a computer and a mouse or printer or something. Twisted pair Ethernet use to be like that too before the gigabit standard introduced auto-switching.</p><p>A couple of days later a box arrived for me containing the tablet</p><p><img src="http://i.imgur.com/co21I7x.jpg" alt="Image of IoT-800 from http://www.ruggedpcreview.com/3_panels_arbor_iot800.html"><em>Image from http://www.ruggedpcreview.com/3_panels_arbor_iot800.html</em></p><p>It was an Arbor IoT-800 running Android 4.4. As you can see in that picture there are two 9-pin serial ports on the bottom as well as USB ports and an Ethernet jack. A quick ProTip about those USB port: they aren't the sort you can use to hook the tablet up to your computer but rather for hooking up the tablet to external devices. You might be able to get them working for hooking up to a computer but you'd need a USB-crossover cable, which I didn't have and, honestly, I'd never heard of before this.</p><p>My first step was to write something on the Windows side that could talk over serial. I needed to find the COM port that was related to the serial port I had plugged in. To do this I called into the Windows Management Interface, WMI. You need to run as admin to do this*. I enumerated all the serial ports on my machine and picked the one whose name contained USB. I'm not sure what the other one is, possibly something built into the motherboard that doesn't have an external connector.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">"root\\WMI"</span>, <span class="string">"SELECT * FROM MSSerial_PortName"</span>);</div><div class="line"><span class="keyword">string</span> serialPortName = <span class="string">""</span>;</div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> searchResult <span class="keyword">in</span> searcher.Get())</div><div class="line">&#123;</div><div class="line">    Console.Write(<span class="string">$"<span class="subst">&#123;searchResult[<span class="string">"InstanceName"</span>]&#125;</span> - <span class="subst">&#123;searchResult[<span class="string">"PortName"</span>]&#125;</span>"</span>);</div><div class="line">    <span class="keyword">if</span> (searchResult[<span class="string">"InstanceName"</span>].ToString().Contains(<span class="string">"USB"</span>))</div><div class="line">    &#123;</div><div class="line">        Console.Write(<span class="string">" &lt;--- using this one"</span>);</div><div class="line">        serialPortName = searchResult[<span class="string">"PortName"</span>].ToString();</div><div class="line">    &#125;</div><div class="line">    Console.WriteLine();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>You can also look in the device manager to see which COM port the device is on but this way is more portable. On my machine I got this output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Starting</div><div class="line">ACPI\PNP0501\1_0 - COM1</div><div class="line">USB VID_0557&amp;PID_2008\6&amp;2c24ce2e&amp;0&amp;4_0 - COM4 --- using this one</div></pre></td></tr></table></figure><p>Next I needed to open up the port and write some data. Fortunately there is a built-in serial port library in .NET. Depending on which articles you read online the serial drivers might be terrible. I'm not overly concerned about performance on this line at this juncture so I just went with the built in class located in <code>System.IO.Ports</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> serialPort = <span class="keyword">new</span> SerialPort(serialPortName, <span class="number">9600</span>);<span class="comment">//COM4 and baud of 9600bit/s to start, ramp up later</span></div><div class="line">serialPort.Open();</div><div class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">  Console.WriteLine(counter);</div><div class="line">  <span class="keyword">var</span> sendBytes = System.Text.ASCIIEncoding.ASCII.GetBytes(<span class="string">$"hello from the C# program<span class="subst">&#123;counter++&#125;</span>\n"</span>);</div><div class="line">  serialPort.Write(sendBytes, <span class="number">0</span>, sendBytes.Length);</div><div class="line">  Thread.Sleep(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Here we just loop over the serial port and ask it to send data every second. I chose the most brutally simplistic things at first: a low baud rate and ASCII encoding.</p><p>Of course there really isn't a way to tell if this is working without having something on the other end to read it... So onto Android. My first stop was to install an SSH server on the machine. After all, this is UNIX system and I know that</p><p><img src="http://i.imgur.com/urrU3hU.jpg" alt="It's a UNIX system!"></p><p>One of the really cool things about Linux is the <code>/dev</code> directory. This directory contains all the devices on your system. So if you pop in there you might see devices like <code>sda0</code> which is actually a partition on your hard drive or <code>/dev/random</code> which is a fun device that just emits random numbers. Go on, try doing <code>cat /dev/random</code> or <code>cat /dev/urandom</code> depending on what your system has. On this IoT-800 there are a whole cluster of devices starting with <code>tty</code>. These are, comically, teletype devices. See back in the good old UNIX days we had dumb terminals for accessing a single computer and those devices showed up as <code>tty</code> devices. Guess how those terminals were connected. Serial. So after some experimentation I was able to figure out that the middle physical port on the device was mapped to <code>/dev/ttyS3</code>.</p><p>With the cables all hooked up I held my breath and ran <code>cat /dev/ttyS3</code> while the program on windows was running. Boom, there in my terminal was what was coming from Windows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u0_a74@rk3188:/ $ cat /dev/ttyS3</div><div class="line">hello from the C# program0</div></pre></td></tr></table></figure><p>Linux is awesome. So now all that is needed it to get this working from Xamarin.</p><p>The System.IO.Ports package is not part of the version of .NET which runs on Android so a different approach was necessary. Again Linux to the rescue: we can simply read from the device. Before we do that, however, we need to set the baud on the connection. Normally you'd do this by using stty(1) but this command isn't available on Android and we likely wouldn't have permission to call it anyway.</p><p>What is needed is a native OS call to set up the serial port. Xamarin.Android allows calling to native C functions so let's do that.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;termios.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SetUpSerialSocket</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Opening serial port\n"</span>);</div><div class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/dev/ttyS3"</span>, O_RDWR);</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">cfg</span>;</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Configuring serial port\n"</span>);</div><div class="line">    <span class="keyword">if</span> (tcgetattr(fd, &amp;cfg))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"tcgetattr() failed\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cfmakeraw(&amp;cfg);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Setting speed in structure\n"</span>);</div><div class="line">    cfsetispeed(&amp;cfg, B115200);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Saving structure\n"</span>);</div><div class="line">    <span class="keyword">if</span>(!tcsetattr(fd, TCSANOW, &amp;cfg))</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Serial port configured, mate\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Uh oh\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Setting baud on serial port /dev/ttyS3\n"</span>);</div><div class="line">    <span class="keyword">return</span> SetUpSerialSocket();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>To actually call this function we'll need to compile it. For that we need the Android NDK. Instead of getting into how to do that I'll just link to Nick Desaulniers's <a href="http://nickdesaulniers.github.io/blog/2016/07/01/android-cli/" target="_blank" rel="external">excellent post</a>. I will say that I did the compilation using the Windows Subsystem for Linux which is boss.</p><p>The end result is a libSetBaud.so file, .so being the extension for shared objects. This file should be included in the Android application in Visual Studio. A couple of things seem to be important here: first the file should be in a hierarchy which indicates what sort of processor it runs on. If you need to support more than one processor then you'll need to compile a couple of different versions of the library. I knew that this particular device had an armeabi-v7a so into that folder went the compiled .so file. Second you'll need to set the type on the file to AndroidNativeLibrary.</p><p>Next came exposing the function the function for use in Xamarin. To do that we use the Platform Invocation Service (PInvoke). PInvoke allows calling into unmanaged code in an easy way. All that is needed is to</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Linq;</div><div class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">SerialMessaging.Android</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaudSetter</span></div><div class="line">    &#123;</div><div class="line">        [DllImport(<span class="string">"libSetBaud"</span>, ExactSpelling = <span class="literal">true</span>)]</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">SetUpSerialSocket</span>(<span class="params"></span>)</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>I'd never had to do this before and it is actually surprisingly easy. Things obviously get way more complex if the function you're calling out to requires more complex types or pointers or file descriptors. I specifically kept the C code to a minimum because I don't trust in my ability to do things with C. If you're more adventurous then you can hook into the Android libraries and make use of things like their logging pipeline instead of <code>printf</code>.</p><p>With this all in place it was possible to spin up an Android application to see if we can get the message from the Windows side. Building on the idea of just reading from the device I started with</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> readHandle = File.Open(<span class="string">"/dev/ttyS3"</span>, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);</div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> readBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2000</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (readHandle.CanRead)</div><div class="line">        readHandle.Read(readBuffer, <span class="number">0</span>, <span class="number">2000</span>);</div><div class="line">    Android.Util.Log.Debug(<span class="string">"serial"</span>, readBuffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>This was able to retrieve bytes out of the device and print them to the Android debug console. Awesome! The problem was that when they came in they weren't all a contiguous block. If the windows side sent <code>hello from the C# program1\n</code> in a loop then we might get the output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hel</div><div class="line">lo from the C# </div><div class="line">program1\nh</div><div class="line">ello from the C# program1</div></pre></td></tr></table></figure><p>Uh oh. Guess we'll have to use a stop byte to indicate the end of messages. <code>0x00</code> won't work because the read buffer contains a bunch of those already. For now we can try using <code>0x01</code>. Looking at an ASCII table sending <code>0x03</code>, End of Text might be more appropriate. We add that to the send side with a WireFormatSerializer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WireFormatSerializer</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">Serialize</span>(<span class="params"><span class="keyword">string</span> toSerialize</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(toSerialize);</div><div class="line">        <span class="keyword">var</span> bytesWithSpaceForTerminatingCharacter = <span class="keyword">new</span> <span class="keyword">byte</span>[bytes.Length + <span class="number">1</span>];</div><div class="line">        Array.Copy(bytes, bytesWithSpaceForTerminatingCharacter, bytes.Length);</div><div class="line">        bytesWithSpaceForTerminatingCharacter[bytesWithSpaceForTerminatingCharacter.Length - <span class="number">1</span>] = <span class="number">0x1</span>;</div><div class="line">        <span class="keyword">return</span> bytesWithSpaceForTerminatingCharacter;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>On the receiving side we hook up a BufferedMessageReader whose responsibility it is to read bytes and assemble messages. I decided to push the boat out a bit here and implement an IObservable<string> which would rebuild the messages and emit them as events.</string></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class BufferedMessageReader : IObservable&lt;string&gt;</div><div class="line">&#123;</div><div class="line">    List&lt;IObserver&lt;string&gt;&gt; observers = new List&lt;IObserver&lt;string&gt;&gt;();</div><div class="line">    List&lt;byte&gt; freeBytes = new List&lt;byte&gt;();</div><div class="line"></div><div class="line">    public void AddBytes(byte[] bytes)</div><div class="line">    &#123;</div><div class="line">        foreach(var freeByte in bytes)</div><div class="line">        &#123;</div><div class="line">            if(freeByte == 0x01)</div><div class="line">            &#123;</div><div class="line">                EndOfMessageEncountered();</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                freeBytes.Add(freeByte);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public IDisposable Subscribe(IObserver&lt;string&gt; observer)</div><div class="line">    &#123;</div><div class="line">        if(!observers.Contains(observer))</div><div class="line">            observers.Add(observer);</div><div class="line">        return new Unsubscriber(observers, observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void EndOfMessageEncountered()</div><div class="line">    &#123;</div><div class="line">        var deserializer = new WireFormatDeserializer();</div><div class="line">        var message = deserializer.Deserialize(freeBytes.ToArray());</div><div class="line"></div><div class="line">        foreach (var observer in observers)</div><div class="line">            observer.OnNext(message);</div><div class="line">        freeBytes.Clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class Unsubscriber: IDisposable</div><div class="line">    &#123;</div><div class="line">        private List&lt;IObserver&lt;string&gt;&gt; _observers;</div><div class="line">        private IObserver&lt;string&gt; _observer;</div><div class="line"></div><div class="line">        public Unsubscriber(List&lt;IObserver&lt;string&gt;&gt; observers, IObserver&lt;string&gt; observer)</div><div class="line">        &#123;</div><div class="line">            this._observers = observers;</div><div class="line">            this._observer = observer;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void Dispose()</div><div class="line">        &#123;</div><div class="line">            if (_observer != null &amp;&amp; _observers.Contains(_observer))</div><div class="line">                _observers.Remove(_observer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Most of this class is boilerplate code for wiring up observers. The crux is that we read bytes into a buffer until we encounter the stop bit which we discard and deserialize the buffer before clearing it ready for the next message. This seemed to work pretty well. There could be some additional work done around the message formats for the wire for instance adding more complete checksums and a retry policy. I'd like to get some experimental data on how well the current set up works in the real world before going to that length.</p><p>On the Android side I wrapped this observable with a thing to actually read the file so it ended up looking like</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerialReader</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> _device &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> Starts a serial reader on the given device</span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="device"&gt;</span>The device to start a reader on. Defaults to /dev/ttyS3<span class="doctag">&lt;/param&gt;</span></span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SerialReader</span>(<span class="params"><span class="keyword">string</span> device = <span class="string">"/dev/ttyS3"</span></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!device.StartsWith(<span class="string">"/dev/"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Device must be /dev/tty&lt;something&gt;"</span>);</div><div class="line">        _device = device;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BufferedMessageReader reader = <span class="keyword">new</span> BufferedMessageReader();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IObservable&lt;<span class="keyword">string</span>&gt; <span class="title">GetMessageObservable</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> reader;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessBytes</span>(<span class="params"><span class="keyword">byte</span>[] bytes</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i = bytes.Length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; bytes[i] == <span class="number">0</span>)</div><div class="line">            --i;</div><div class="line">        <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">var</span> trimmedBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[i + <span class="number">1</span>];</div><div class="line">        Array.Copy(bytes, trimmedBytes, i + <span class="number">1</span>);</div><div class="line">        reader.AddBytes(trimmedBytes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> readThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(StartThread));</div><div class="line">        readThread.Start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartThread</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> readHandle = File.Open(_device, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> readBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2000</span>];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (readHandle.CanRead)</div><div class="line">                readHandle.Read(readBuffer, <span class="number">0</span>, <span class="number">2000</span>);</div><div class="line">            ProcessBytes(readBuffer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Now listening for messages is as easy as doing</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BaudSetter.SetupUpSerialSocket(); <span class="comment">//sets up the baud rate</span></div><div class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> SerialReader(); <span class="comment">//create a new serial reader</span></div><div class="line">reader.GetMessageObservable().Subscribe((message) =&gt; Log(message));<span class="comment">//subscribe to new messages</span></div><div class="line">reader.Start();<span class="comment">//start the listener</span></div></pre></td></tr></table></figure><p>One way communication squared away. Now to get messages back from the tablet to the computer. First stop was writing to the file on Android. Again we can make use of the fact that the serial port is just a file</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerialWriter</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> _device &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SerialWriter</span>(<span class="params"><span class="keyword">string</span> device = <span class="string">"/dev/ttyS3"</span></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!device.StartsWith(<span class="string">"/dev/"</span>))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"Device must be /dev/tty&lt;something&gt;"</span>);</div><div class="line">        _device = device;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Write</span>(<span class="params"><span class="keyword">string</span> toWrite</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> writeHandle = File.Open(_device, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> bytes = <span class="keyword">new</span> WireFormatSerializer().Serialize(toWrite);</div><div class="line">        <span class="keyword">if</span> (writeHandle.CanWrite)</div><div class="line">        &#123;</div><div class="line">            writeHandle.Write(bytes, <span class="number">0</span>, bytes.Length);</div><div class="line">        &#125;</div><div class="line">        writeHandle.Close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Really no more than just writing to a file like normal. Closing the file descriptor after each write seemed to make things work better. On the Windows side the serial port already has a data received event built into it so we can just go and add an event handler.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serialPort.DataReceived += DataReceivedHandler;</div></pre></td></tr></table></figure><p>This can then be hooked up like so</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> BufferedMessageReader reader = <span class="keyword">new</span> BufferedMessageReader();</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DataReceivedHandler</span>(<span class="params"></span></span></div><div class="line">                <span class="keyword">object</span> sender,</div><div class="line">                SerialDataReceivedEventArgs e)</div><div class="line">&#123;</div><div class="line">    SerialPort sp = (SerialPort)sender;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> bytesToRead = sp.BytesToRead;<span class="comment">//need to create a variable for this because it can change between lines</span></div><div class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[bytesToRead];</div><div class="line">    sp.Read(bytes, <span class="number">0</span>, bytesToRead);</div><div class="line"></div><div class="line">    reader.AddBytes(bytes);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>And that is pretty much that. This code all put together allows sending and receiving messages on a serial port. You can check out the full example at https://github.com/ClearMeasure/AndroidSerialPort where we'll probably add any improvements we find necessary as we make use of the code.</p><p>*There is probably some way to grant your user account the ability to do this but I didn't look into it</p>]]></content>
    
    <summary type="html">
    
      Talking over the RS-232 serial protocol is a bit of a blast from the past but I needed to use in on an Android tablet from within Xamarin. This is the, painfully complete, story of my journey.
    
    </summary>
    
      <category term="development" scheme="http://www.westerndevs.com/categories/development/"/>
    
    
      <category term="c#" scheme="http://www.westerndevs.com/tags/c/"/>
    
      <category term="xamarin" scheme="http://www.westerndevs.com/tags/xamarin/"/>
    
  </entry>
  
  <entry>
    <title type="html">JSON.net not just for serialization</title>
    <link href="http://www.westerndevs.com/json/Json.net-not-just-for-sereialization/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/json/Json.net-not-just-for-sereialization/</id>
    <published>2017-05-03T15:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you happen to head over to <a href="https://www.nuget.org/packages" target="_blank" rel="external">https://www.nuget.org/packages</a> and look at which package has been downloaded the most there is a clear winner: JSON.net. It is in everything, every where. JSON is so wildly ubiquitous that I play a little game with myself when I start a new project: how long can I go before I need to serialize or deserialize JSON and need to pull in JSON.net. I rarely last more than a couple of hours.</p><p>But it turns out that there is a lot more that JSON.net can do.</p><a id="more"></a><p>My good buddy <a href="https://ericflemingblog.wordpress.com/" target="_blank" rel="external">Eric Fleming</a> found this one and I'm really just stealing it from him(although <a href="http://jameschambers.com/" target="_blank" rel="external">James</a> claims he found it). The problem that we were trying to solve was that we wanted to patch together a new JSON object out of a bunch of C# objects. It could have been done by building a new DTO, mapping a number of objects to it and then serializing it to JSON. This was kind of a lot of work. Static languages are nice but chucking together ad hoc objects isn't a strong suit. In this case we used JObject to structure the new object</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Program</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> sock = <span class="keyword">new</span> Sock&#123;</div><div class="line">            Colour = <span class="string">"blue"</span>,</div><div class="line">            Size = <span class="string">"medium"</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> shoe = <span class="keyword">new</span> Shoe&#123;</div><div class="line">            Material = <span class="string">"leather"</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> ensemble = JObject.FromObject(sock);</div><div class="line">        ensemble.Merge(JObject.FromObject(shoe));</div><div class="line">        Console.WriteLine(ensemble.ToString());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Sock</span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Colour &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Size &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> <span class="title">Shoe</span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Material&#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The output looks like</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Colour"</span>: <span class="string">"blue"</span>,</div><div class="line">  <span class="attr">"Size"</span>: <span class="string">"medium"</span>,</div><div class="line">  <span class="attr">"Material"</span>: <span class="string">"leather"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>This approach can be useful in a number of scenarios</p><ul><li>Treating an object as a mixin and applying it to a bunch of differently shaped JSON</li><li>Merging existing JSON with C# objects</li></ul><p>The latter scenario can be achieved like so</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hatJObject = JObject.Parse(<span class="string">@"</span></div><div class="line">                &#123;</div><div class="line">                    'HatSize': 'Large'</div><div class="line">                &#125;</div><div class="line">            ");</div><div class="line"><span class="keyword">var</span> ensemble = JObject.FromObject(sock);</div><div class="line"><span class="keyword">var</span> shoeJObject = JObject.FromObject(shoe);</div><div class="line">shoeJObject.Merge(JObject.FromObject(shoeLace));</div><div class="line">ensemble.Merge(shoeJObject);</div><div class="line">ensemble.Merge(hatJObject);</div></pre></td></tr></table></figure><p>This outputs</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Colour"</span>: <span class="string">"blue"</span>,</div><div class="line">  <span class="attr">"Size"</span>: <span class="string">"medium"</span>,</div><div class="line">  <span class="attr">"Material"</span>: <span class="string">"leather"</span>,</div><div class="line">  <span class="attr">"LaceLength"</span>: <span class="number">30</span>,</div><div class="line">  <span class="attr">"HatSize"</span>: <span class="string">"Large"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>There are also <code>JObject.Load</code> and <code>JObject.Read</code> for reading from JSON streams.</p><p>Newtonsoft.JSON is such a well known and well developed library that it is a shame to just use <code>JsonConvert</code> methods when there is such additional richness.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you happen to head over to &lt;a href=&quot;https://www.nuget.org/packages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.nuget.org/packages&lt;/a&gt; and look at which package has been downloaded the most there is a clear winner: JSON.net. It is in everything, every where. JSON is so wildly ubiquitous that I play a little game with myself when I start a new project: how long can I go before I need to serialize or deserialize JSON and need to pull in JSON.net. I rarely last more than a couple of hours.&lt;/p&gt;
&lt;p&gt;But it turns out that there is a lot more that JSON.net can do.&lt;/p&gt;
    
    </summary>
    
      <category term="json" scheme="http://www.westerndevs.com/categories/json/"/>
    
    
      <category term="json.net" scheme="http://www.westerndevs.com/tags/json-net/"/>
    
      <category term="c#" scheme="http://www.westerndevs.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title type="html">Using azure-cli in windows bash</title>
    <link href="http://www.westerndevs.com/messaging/az_command_line-on_windows_bash/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/messaging/az_command_line-on_windows_bash/</id>
    <published>2017-04-19T05:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>The latest versions of Windows support running linux executables. The technical trickery to get that done boggle my mind. I wanted to get the Azure command line tools working inside of the bash. The tools are written in python so we need to get that installed.</p><a id="more"></a><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install python-pip python-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libxml2-<span class="built_in">dev</span> libxslt1-<span class="built_in">dev</span> zlib1g-<span class="built_in">dev</span></div></pre></td></tr></table></figure><p>This also installs some build tools which we'll need to install the actual azure-cli and pip which is kind of nuget for python. Now we just need to install the tools</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --<span class="keyword">user</span> <span class="title">azure-cli</span></div></pre></td></tr></table></figure><p>This will install the tools to <code>~/.local/bin</code>. You might need to add that to your path or at least reload the profile by running <code>. ~/.profile</code>. Now you can login with</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">az login</span></div></pre></td></tr></table></figure><p>This will give you a code to enter in a browser which will complete you login and Bob's your uncle. Because python is portable this could all be done on Windows as well but I'm still more comfortable scripting against bash than powershell.  You can read more about az and all the sub-commands like <code>az acr</code> at https://docs.microsoft.com/en-us/cli/azure/overview. I'll probably also post some more content on it soon.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The latest versions of Windows support running linux executables. The technical trickery to get that done boggle my mind. I wanted to get the Azure command line tools working inside of the bash. The tools are written in python so we need to get that installed.&lt;/p&gt;
    
    </summary>
    
      <category term="messaging" scheme="http://www.westerndevs.com/categories/messaging/"/>
    
    
      <category term="azure" scheme="http://www.westerndevs.com/tags/azure/"/>
    
      <category term="windows bash" scheme="http://www.westerndevs.com/tags/windows-bash/"/>
    
  </entry>
  
  <entry>
    <title type="html">Getting Started with RabbitMQ in ASP.NET</title>
    <link href="http://www.westerndevs.com/messaging/MassTransit_and_ASP/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/messaging/MassTransit_and_ASP/</id>
    <published>2017-03-19T05:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>In the last post we looked at how to set up RabbitMQ in a Windows container. It was quite the adventure and I'm sure it was woth the time I invested. Probably. Now we have it set up we can get to writing an application using it.</p><p>A pretty common use case when building a web application is that we want to do some background processing which takes longer than we'd like to keep a request open for. Doing so would lock up an IIS thread too, which ins't optimal. In this example we'd like to make our user creation a background process.</p><a id="more"></a><p>To start we need a command which is just a plain old CLR object</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddUser</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> EmailAddress &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>That all looks pretty standard. In our controller, we'll just use the handy UserCreationSender</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> :</span> Controller</div><div class="line">&#123;</div><div class="line">    IUserCreationSender _userCreationSender;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span><span class="params">(IUserCreationSender userCreationSender)</span></span></div><div class="line">    &#123;</div><div class="line">        _userCreationSender = userCreationSender;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        _userCreationSender.Send(<span class="string">"simon"</span>, <span class="string">"tibbs"</span>, <span class="string">"stimms@gmail.com"</span>);</div><div class="line">        <span class="keyword">return</span> View();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>There that was easy. In our next post, we'll... what's that? I've missed actually showing any implementation. Fair point, we can do that.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="keyword">string</span> firstName, <span class="keyword">string</span> lastName, <span class="keyword">string</span> emailAddress</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory()</div><div class="line">    &#123;</div><div class="line">        HostName = <span class="string">"172.22.144.236"</span>,</div><div class="line">        Port = <span class="number">5672</span>,</div><div class="line">        UserName = <span class="string">"guest"</span>,</div><div class="line">        Password = <span class="string">"guest"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</div><div class="line">    &#123;</div><div class="line">        channel.QueueDeclare(queue: <span class="string">"niftyqueue"</span>,</div><div class="line">                                durable: <span class="literal">false</span>,</div><div class="line">                                exclusive: <span class="literal">false</span>,</div><div class="line">                                autoDelete: <span class="literal">false</span>,</div><div class="line">                                arguments: <span class="literal">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> command = <span class="keyword">new</span> AddUser</div><div class="line">        &#123;</div><div class="line">            FirstName = firstName,</div><div class="line">            LastName = lastName,</div><div class="line">            EmailAddress = emailAddress,</div><div class="line">            Password = <span class="string">"examplePassword"</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">string</span> message = JsonConvert.SerializeObject(command);</div><div class="line">        <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);</div><div class="line"></div><div class="line">        channel.BasicPublish(exchange: <span class="string">""</span>,</div><div class="line">                                routingKey: <span class="string">"niftyqueue"</span>,</div><div class="line">                                basicProperties: <span class="literal">null</span>,</div><div class="line">                                body: body);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Values here are hard coded which we don't want to do usually, check out https://aspnetmonsters.com/2016/01/Configuration-in-ASP-NET-Core-MVC/ for how to pull in configuration. Ignoring that we start by creating a conneciton factory with connection information for RabbitMQ. We then create a new queue (or ensure that it already exists) called &quot;niftyqueue&quot;. There are some other parameters in the queue creation we can get into in a future article.</p><p>Next we'll create an AddUser command and serialize it to JSON using good old Json.net then get the bytes. Rabbit messages contain a byte array so we have to do a tiny bit of leg work to get our CLR object into a form usable by the transport. JSON is the standard for everything these days so we'll go with the flow. In a real system you might want to investigate Protocol Buffer or something else.</p><p>Finally we perform a basic publish, sending our message. The Rabbit management site provides a super cool view of the messages being published on it</p><p><img src="http://i.imgur.com/odiUxPh.png" alt="The dashboard"></p><p>How cool is that? Man I like real time charts.</p><p>Shoving messages into the bus is half the equation, the other half is getting it out again. We want to have a separate process handle getting the message. That looks quite similar to the message sending.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">&#123;</div><div class="line">    Console.WriteLine(<span class="string">"starting consumption"</span>);</div><div class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory()</div><div class="line">    &#123;</div><div class="line">        HostName = <span class="string">"172.22.144.236"</span>,</div><div class="line">        Port = <span class="number">5672</span>,</div><div class="line">        UserName = <span class="string">"guest"</span>,</div><div class="line">        Password = <span class="string">"guest"</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</div><div class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</div><div class="line">    &#123;</div><div class="line">        channel.QueueDeclare(queue: <span class="string">"niftyqueue"</span>,</div><div class="line">                                durable: <span class="literal">false</span>,</div><div class="line">                                exclusive: <span class="literal">false</span>,</div><div class="line">                                autoDelete: <span class="literal">false</span>,</div><div class="line">                                arguments: <span class="literal">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</div><div class="line">        consumer.Received += (model, ea) =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> body = ea.Body;</div><div class="line">            <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</div><div class="line">            <span class="keyword">var</span> deserialized = JsonConvert.DeserializeObject&lt;AddUser&gt;(message);</div><div class="line">            Console.WriteLine(<span class="string">"Creating user &#123;0&#125; &#123;1&#125;"</span>, deserialized.FirstName, deserialized.LastName);</div><div class="line">        &#125;;</div><div class="line">        channel.BasicConsume(queue: <span class="string">"niftyqueue"</span>,</div><div class="line">                                noAck: <span class="literal">true</span>,</div><div class="line">                                consumer: consumer);</div><div class="line"></div><div class="line">        Console.WriteLine(<span class="string">"Done."</span>);</div><div class="line">        Console.ReadLine();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Again we create the factory and the queue (some opportunity there for refactoring, me thinks). Next we start up an EventingBasicConsumer on top of the channel. There are a couple of different ways to consume messages none of which I really love. The eventing model seem the leas objectionable. You simply assign a delegate to the event handler and it will fire when a message is recieved.</p><p>In the next post I'll start taking a look at how we can layer <a href="http://masstransit-project.com/" target="_blank" rel="external">MassTransit</a>, a .NET message bus, on top of raw RabbitMQ. The result is a much more pleasant experience then simply hammering together raw RabbitMQ.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the last post we looked at how to set up RabbitMQ in a Windows container. It was quite the adventure and I&#39;m sure it was woth the time I invested. Probably. Now we have it set up we can get to writing an application using it.&lt;/p&gt;
&lt;p&gt;A pretty common use case when building a web application is that we want to do some background processing which takes longer than we&#39;d like to keep a request open for. Doing so would lock up an IIS thread too, which ins&#39;t optimal. In this example we&#39;d like to make our user creation a background process.&lt;/p&gt;
    
    </summary>
    
      <category term="messaging" scheme="http://www.westerndevs.com/categories/messaging/"/>
    
    
      <category term=".net" scheme="http://www.westerndevs.com/tags/net/"/>
    
      <category term="RabbitMQ" scheme="http://www.westerndevs.com/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title type="html">Creating a Rabbit MQ Container</title>
    <link href="http://www.westerndevs.com/docker/RabbitContainer/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/docker/RabbitContainer/</id>
    <published>2017-03-16T11:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I bought a new laptop, a Dell XPS 15 and my oh my is it snazzy. The thing I was most excited about was that I'd get to play with Windows containers again. I have 3 other machines in the house but they're either unsuitable for containers (OSX running Windows in parallels) or I've so toally borked them playing with early betas of containers they need to be formatted and reinstalled - possibly also thrown into the sun.</p><p>So when I found myself presented with the question &quot;how can we get into messaging in our apps for free?&quot; I figured I'd crack open the laptop and build something with MassTransit. I found that MassTransit supports running on RabbitMQ. Why that sounds like a perfect opportunity to deploy RabbitMQ to a container. Only problem was that I didn't really know how to do that.</p><a id="more"></a><p>In my heart I felt like running the installer wasn't quite the right way to go. I'd just copy the installation file into their destination. Problem is that RabbitMQ relies on erlang so I'd have to install that too. I build a docker file which looked something like</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</div><div class="line"><span class="keyword">ENV</span> rabbitSourceDir <span class="string">"RabbitMQ Server"</span></div><div class="line"><span class="keyword">ENV</span> erlngDir <span class="string">"C:/program files/erl8.2/"</span></div><div class="line"><span class="keyword">ENV</span> rabbitDir <span class="string">"C:/program files/RabbitMQ Server/"</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> <span class="variable">$&#123;rabbitSourceDir&#125;</span> <span class="variable">$&#123;rabbitDir&#125;</span></span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> erl8.2 <span class="variable">$&#123;erlngDir&#125;</span></span></div><div class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div></pre></td></tr></table></figure><p>In the erlngDir and rabbitDir I dumped the contents of an install of erlang and rabbitmq. Then I built the container with</p><p><code>docker build -t monsters/rabbitmq .</code></p><p>Didn't work. There must be something useful the installer actually does as part of installing files. So next I considered putting in the installers and running them when building the container. That seemed like a huge pain so I got to thinking about using chocolatey. At first I was pretty deadset against using choco my reasoning being that containers should be lightweight and have only one purpose. Having one time software like chocolatey on there which wouldn't ever be used seemed like it would make... whoever invented containers mad.</p><p>So attempt number two:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</div><div class="line"></div><div class="line"><span class="comment">#install chocolatey</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> @powershell -NoProfile -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span></div><div class="line"></div><div class="line"><span class="comment">#install rabbitmq</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> choco install -y rabbitmq</span></div></pre></td></tr></table></figure><p>That was enough to get Rabbit MQ installed. I still needed to expose some ports for RabbitMQ so I added</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">####### PORTS ########</div><div class="line">#Main rabbitmq port</div><div class="line">EXPOSE <span class="number">5672</span></div><div class="line">#port mapper daemon (epmd)</div><div class="line">EXPOSE <span class="number">4369</span></div><div class="line">#inet_dist_listen</div><div class="line">EXPOSE <span class="number">35197</span></div><div class="line">#rabbitmq management console</div><div class="line">EXPOSE <span class="number">15672</span></div></pre></td></tr></table></figure><p>Rabbit also likes to know where Erlang lives so some environmental variables for that aren't going to hurt.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#set the home directory for erlang so rabbit can find it easily</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_SERVICE_MANAGER_PATH <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div></pre></td></tr></table></figure><p>We could forward the RabbitMQ ports to our local machine but I like the idea of using the container as if it were a distinct machine so let's also enable the management UI from anywhere on the network. To do that we'll replace the default config file with one that has</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;loopback_users, <span class="string">[]</span>&#125;,</div></pre></td></tr></table></figure><p>in it. We can copy our new config file over the one in the container from the dockerfile and set up a variable to point Rabbit at it.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> RABBITMQ_CONFIG_FILE <span class="string">"C:\rabbitmq"</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"rabbitmq.config"</span>,<span class="string">" C:/"</span>]</span></div></pre></td></tr></table></figure><p>The config file looks like</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</div></pre></td></tr></table></figure><p>Finally we'll start the actual rabbit process as the default action of the container</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> RABBIT_MQ_HOME <span class="string">"C:\Program Files\RabbitMQ Server\rabbitmq_server-3.6.5"</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> <span class="string">"<span class="variable">$&#123;RABBIT_MQ_HOME&#125;</span>/sbin/rabbitmq-server.bat"</span></span></div></pre></td></tr></table></figure><p>Now you can log into the management portal using the guest/guest account.</p><p><img src="http://i.imgur.com/KvDVTb9.png" alt="Admin login"></p><p>It takes quite a while to start up the container and it took me close to 40 years to figure out building the container but it does save me installing rabbitmq on my local machine and makes experimenting with multiple instances pretty jolly easy.</p><p>The complete docker file is here:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> microsoft/windowsservercore</div><div class="line"></div><div class="line"><span class="comment">####### PORTS ########</span></div><div class="line"><span class="comment">#Main rabbitmq port</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">5672</span></div><div class="line"><span class="comment">#port mapper daemon (epmd)</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">4369</span></div><div class="line"><span class="comment">#inet_dist_listen</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">35197</span></div><div class="line"><span class="comment">#rabbitmq management console</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">15672</span></div><div class="line"></div><div class="line"><span class="comment">#set the home directory for erlang so rabbit can find it easily</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_HOME <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div><div class="line"><span class="keyword">ENV</span> ERLANG_SERVICE_MANAGER_PATH <span class="string">"c:\program files\erl8.2\erts-8.2"</span></div><div class="line"></div><div class="line"><span class="comment">#install chocolatey</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> @powershell -NoProfile -ExecutionPolicy Bypass -Command <span class="string">"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"</span> &amp;&amp; SET <span class="string">"PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"</span></span></div><div class="line"></div><div class="line"><span class="comment">#install rabbitmq</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> choco install -y rabbitmq</span></div><div class="line"></div><div class="line"><span class="comment">#set up the path to the config file</span></div><div class="line"><span class="keyword">ENV</span> RABBITMQ_CONFIG_FILE <span class="string">"C:\rabbitmq"</span></div><div class="line"></div><div class="line"><span class="comment">#copy a config file over</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">"rabbitmq.config"</span>,<span class="string">" C:/"</span>]</span></div><div class="line"></div><div class="line"><span class="comment">#set the startup command to be rabbit</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"C:/Program Files/RabbitMQ Server/rabbitmq_server-3.6.5/sbin/rabbitmq-server.bat"</span>]</span></div></pre></td></tr></table></figure><p>In my next post I'll get around to actually using Rabbit MQ because all the yaks are shaved now... I hope.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I bought a new laptop, a Dell XPS 15 and my oh my is it snazzy. The thing I was most excited about was that I&#39;d get to play with Windows containers again. I have 3 other machines in the house but they&#39;re either unsuitable for containers (OSX running Windows in parallels) or I&#39;ve so toally borked them playing with early betas of containers they need to be formatted and reinstalled - possibly also thrown into the sun.&lt;/p&gt;
&lt;p&gt;So when I found myself presented with the question &amp;quot;how can we get into messaging in our apps for free?&amp;quot; I figured I&#39;d crack open the laptop and build something with MassTransit. I found that MassTransit supports running on RabbitMQ. Why that sounds like a perfect opportunity to deploy RabbitMQ to a container. Only problem was that I didn&#39;t really know how to do that.&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.westerndevs.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.westerndevs.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title type="html">C# Wildcard Variables</title>
    <link href="http://www.westerndevs.com/C/Wildcard-csharp/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/C/Wildcard-csharp/</id>
    <published>2016-11-09T22:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>There is some great discussion going on about including discard variables in C#, possibly even for the C# 7 timeframe. It is so new that the name for them is still up in the air. In Haskel it is called a wildcard. I think this is a great feature which is found in other languages but isn't well known for people who haven't done funcitonal programming. The C# language has been sneaking into being a bit more functional over the last few releases. There is support for lambdas and there has been a bunch of work on immutability. Let's take a walk through how wildcards works.</p><p>Let's say that we have a function which has a number of output paramaters:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"><span class="keyword">out</span> List&lt;T&gt; list, <span class="keyword">out</span> <span class="keyword">int</span> size</span>)</span>&#123;&#125;</div></pre></td></tr></table></figure><p>Ugh, already I hate this method. I've never liked the out syntax because it is wordy. To use this function you would have to do</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;T&gt; <span class="built_in">list</span> = <span class="literal">null</span>;</div><div class="line"><span class="built_in">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</div><div class="line">DoSomething(out <span class="built_in">list</span>, out <span class="built_in">size</span>);</div></pre></td></tr></table></figure><p>There is some hope for that syntax in C# 7 with what I would have called inline declaration of out variables but is being called &quot;out variables&quot;. The syntax would look like</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DoSomething(<span class="keyword">out</span> List&lt;T&gt; list, <span class="keyword">out</span> <span class="built_in">int</span> <span class="built_in">size</span>);</div></pre></td></tr></table></figure><p>This is obviously much nicer and you can read a bit more about it athttps://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/</p><p>However in my code base perhaps I don't care about the size parameter. As it stands right now you still need to declare some variable to hold the size even if it never gets used. For one variable this isn't a huge pain. I've taken to using the underscore to denote that I don't care about some variable.</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DoSomething(<span class="keyword">out</span> <span class="keyword">List</span>&lt;T&gt; <span class="keyword">list</span>, <span class="keyword">out</span> int _);</div><div class="line"><span class="comment">//make use of list never reference the _ variable</span></div></pre></td></tr></table></figure><p>The issue comes when I have some funciton which takes many parameters I don't care about.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DoSomething(<span class="keyword">out</span> List&lt;T&gt; list, <span class="keyword">out</span> <span class="keyword">int</span> _, <span class="keyword">out</span> <span class="keyword">float</span> __, <span class="keyword">out</span> <span class="keyword">decimal</span> ___);</div><div class="line"><span class="comment">//make use of list never reference the _ variables</span></div></pre></td></tr></table></figure><p>This is a huge bit of uglyness because we can't overload the _ variable so we need to create a bunch more variables. It is even more so ugly if we're using tuples and a deconstructing declaration (also part of C# 7). Our funciton could be changed to look like</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(List&lt;T&gt;, <span class="keyword">int</span>, <span class="keyword">float</span>, <span class="keyword">decimal</span>) DoSomething() &#123;&#125;</div></pre></td></tr></table></figure><p>This is now a function which returns a tuple containing everything we previously had as out prameters. Then you can break this tuple up using a deconstructing declaration.</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(List&lt;T&gt; list, <span class="built_in">int</span> <span class="built_in">size</span>, <span class="built_in">float</span> fidelity, <span class="keyword">decimal</span> cost) = DoSomething();</div></pre></td></tr></table></figure><p>This will break up the tuple into the fields you actually want. Except you don't care about size, fidelity and cost. With a wildcard we can write this as</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(List&lt;T&gt; list, int <span class="symbol">_</span>, <span class="built_in">float</span> <span class="symbol">_</span>, decimal <span class="symbol">_</span>) = DoSomething();</div></pre></td></tr></table></figure><p>This beauty of this wildcard is that we can use the same wildcard for each field an not worry about them in the least.</p><p>I'm really hopeful that this feature will make it to the next release.</p>]]></content>
    
    <summary type="html">
    
      Wildcard variables in C# are up for discussion for inclusion in C# 7 or some later version. They are a useful construct taken from functional languages like Haskel.
    
    </summary>
    
      <category term="C#" scheme="http://www.westerndevs.com/categories/C/"/>
    
    
      <category term="C#" scheme="http://www.westerndevs.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title type="html">You&#39;re using HttpClient wrong and it is destabilizing your software</title>
    <link href="http://www.westerndevs.com/Deployment/httpclientwrong/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Deployment/httpclientwrong/</id>
    <published>2016-08-28T21:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I've been using HttpClient wrong for years and it finally came back to bite me. My site was unstable and my clients furious, with a simple fix performance improved greatly and the instability disapeared.</p><p><img src="http://i.imgur.com/EctiaBj.jpg" alt="Imgur"></p><p>At the same time I actually improved the performance of the application through more efficient socket usage.</p><a id="more"></a><p>Microservices can be a bear to deal with. As more services are added and monoliths are broken down there tends to be more communication paths between services. There are many options for communicating, but HTTP is an ever popular option. If the microservies are built in C# or any .NET language then chances are you've made use of <code>HttpClient</code>. I know I did.</p><p>The typical usage pattern looked a little bit like this:</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span>(<span class="keyword">var</span> client = <span class="keyword">new</span> <span class="type">HttpClient</span>())</div><div class="line">&#123;</div><div class="line">    <span class="comment">//do something with http client</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2>Here's the Rub</h2><p>The <code>using</code> statement is a C# nicity for dealing with disposable objects. Once the <code>using</code> block is complete then the disposable object, in this case <code>HttpClient</code>, goes out of scope and is disposed. The <code>dispose</code> method is called and whatever resources are in use are cleaned up. This is a very typical pattern in .NET and we use it for everything from database connections to stream writers. Really any object which has external resources that must be clean up uses the <code>IDisposable</code> interface.</p><p>And you can't be blamed for wanting to wrap it with the using. First of all, it's considered good practice to do so. In fact, the <a href="https://msdn.microsoft.com/en-ca/library/yh598w02.aspx" target="_blank" rel="external">official docs</a> for <code>using</code> state:</p><blockquote><p>As a rule, when you use an IDisposable object, you should declare and instantiate it in a using statement.</p></blockquote><p>Secondly, all code you may have seen since...the inception of <code>HttpClient</code> would have told you to use a <code>using</code> statement block, including recent docs on the <a href="http://www.asp.net/web-api/overview/advanced/calling-a-web-api-from-a-net-client" target="_blank" rel="external">ASP.NET site itself</a>. The internet is generally <a href="http://stackoverflow.com/questions/212198/what-is-the-c-sharp-using-block-and-why-should-i-use-it" target="_blank" rel="external">in agreement as well</a>.</p><p>But <code>HttpClient</code> is different. Although it implements the <code>IDisposable</code> interface it is actually a shared object. This means that under the covers it is <a href="https://en.wikipedia.org/wiki/Reentrancy_(computing)" target="_blank" rel="external">reentrant</a> and thread safe. Instead of creating a new instance of <code>HttpClient</code> for each execution you should share a single instance of <code>HttpClient</code> for the entire lifetime of the application. Let's look at why.</p><h2>See For Yourself</h2><p>Here is a simple program written to demonstrate the use of <code>HttpClient</code>:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Net.Http;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"Starting connections"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">using</span>(<span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">var</span> result = client.GetAsync(<span class="string">"http://aspnetmonsters.com"</span>).Result;</div><div class="line">                    Console.WriteLine(result.StatusCode);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine(<span class="string">"Connections done"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>This will open up 10 requests to one of the best sites on the internet <a href="http://aspnetmonsters.com" target="_blank" rel="external">http://aspnetmonsters.com</a> and do a <code>GET</code>. We just print the status code so we know it is working. The output is going to be:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">C:\code\socket&gt; dotnet run</div><div class="line">Project socket (.NETCoreApp,Version=v1.0) will be compiled because inputs were modified</div><div class="line">Compiling socket for .NETCoreApp,Version=v1.0</div><div class="line"></div><div class="line">Compilation succeeded.</div><div class="line">   <span class="number"> 0 </span>Warning(s)</div><div class="line">   <span class="number"> 0 </span>Error(s)</div><div class="line"></div><div class="line">Time elapsed 00:00:01.2501667</div><div class="line"></div><div class="line"></div><div class="line">Starting connections</div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line"><span class="symbol">OK</span></div><div class="line">Connections done</div></pre></td></tr></table></figure><h2>But Wait, There's More!</h2><p>All work and everything is right with the world. Except that it isn't. If we pull out the <code>netstat</code> tool and look at the state of sockets on the machine running this we'll see:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">C</span>:\<span class="selector-tag">code</span>\<span class="selector-tag">socket</span>&gt;<span class="selector-tag">NETSTAT</span><span class="selector-class">.EXE</span></div><div class="line">...</div><div class="line">  <span class="selector-tag">Proto</span>  <span class="selector-tag">Local</span> <span class="selector-tag">Address</span>          <span class="selector-tag">Foreign</span> <span class="selector-tag">Address</span>        <span class="selector-tag">State</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12050</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12051</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12053</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12054</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12055</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12056</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12057</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12058</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12059</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12060</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12061</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12062</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">TIME_WAIT</span></div><div class="line">  <span class="selector-tag">TCP</span>    127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:1695</span>         <span class="selector-tag">SIMONTIMMS742B</span><span class="selector-pseudo">:1696</span>    <span class="selector-tag">ESTABLISHED</span></div><div class="line">...</div></pre></td></tr></table></figure><p>Huh, that's weird...the application has exited and yet there are still a bunch of these connections open to the Azure machine which hosts the ASP.NET Monsters website. They are in the <code>TIME_WAIT</code> state which means that the connection has been closed on one side (ours) but we're still waiting to see if any additional packets come in on it because they might have been delayed on the network somewhere. Here is a diagram of TCP/IP states I stole from https://www4.cs.fau.de/Projects/JX/Projects/TCP/tcpstate.html.</p><p><img src="http://i.imgur.com/rXxnIA8.png" alt="Imgur"></p><p>Windows will hold a connection in this state for 240 seconds (It is set by <code>[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpTimedWaitDelay]</code>). There is a limit to how quickly Windows can open new sockets so if you exhaust the connection pool then you're likely to see error like:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Unable <span class="built_in">to</span> connect <span class="built_in">to</span> <span class="keyword">the</span> remote server</div><div class="line">System.Net.Sockets.SocketException: Only <span class="literal">one</span> usage <span class="keyword">of</span> <span class="keyword">each</span> <span class="built_in">socket</span> address (protocol/network address/port) is normally permitted.</div></pre></td></tr></table></figure><p>Searching for that in the Googles will give you some terrible advice about decreasing the connection timeout. In fact, decreasing the timeout can lead to other detrimental consequences when applications that properly use <code>HttpClient</code> or similar constructs are run on the server. We need to understand what &quot;properly&quot; means and fix the underlying problem instead of tinkering with machine level variables.</p><h2>The Fix is In</h2><p>I really must thank <a href="https://twitter.com/hsulriksen" target="_blank" rel="external">Harald S. Ulrksen</a> and <a href="https://twitter.com/darrel_miller" target="_blank" rel="external">Darrel Miller</a> for pointing me to <a href="https://t.co/bewSxPqlps" target="_blank" rel="external">The Patterns and Practices documents</a> on this.</p><p>If we share a single instance of <code>HttpClient</code> then we can reduce the waste of sockets by reusing them:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Net.Http;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> ConsoleApplication</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> class Program</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">HttpClient</span> <span class="built_in">Client</span> = <span class="keyword">new</span> <span class="built_in">HttpClient</span>();</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Main(<span class="keyword">string</span>[] args)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">Console</span>.WriteLine(<span class="string">"Starting connections"</span>);</div><div class="line">            <span class="built_in">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">            &#123;</div><div class="line">                var result = <span class="built_in">Client</span>.GetAsync(<span class="string">"http://aspnetmonsters.com"</span>).Result;</div><div class="line">                <span class="built_in">Console</span>.WriteLine(result.StatusCode);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">Console</span>.WriteLine(<span class="string">"Connections done"</span>);</div><div class="line">            <span class="built_in">Console</span>.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Note here that we have just one instance of <code>HttpClient</code> shared for the entire application. Eveything still works like it use to (actually a little faster due to socket reuse). Netstat now just shows:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">TCP</span>    10<span class="selector-class">.211</span><span class="selector-class">.55</span><span class="selector-class">.6</span><span class="selector-pseudo">:12254</span>      <span class="selector-tag">waws-prod-bay-017</span><span class="selector-pseudo">:http</span>  <span class="selector-tag">ESTABLISHED</span></div></pre></td></tr></table></figure><p>In the production scenario I had the number of sockets was averaging around 4000, and at peak would exceed 5000, effectively crushing the available resources on the server, which then caused services to fall over. After implementing the change, the sockets in use dropped from an average of more than 4000 to being consistently less than 400, and usually around 100.</p><p>This is a chunk of a graph from our monitoring tools and shows what happened after we deployed a limited proof of the fix to a select number of microservices.</p><p><img src="http://i.imgur.com/0QVdLMT.png" alt="Imgur"></p><p>This is dramatic. If you have any kind of load at all you need to remember these two things:</p><ol><li>Make your <code>HttpClient</code> static.</li><li>Do <em>not</em> dispose of or wrap your <code>HttpClient</code> in a using unless you explicitly are looking for a particular behaviour (such as causing your services to fail).</li></ol><h2>Wrapping Up</h2><p>The socket exhaustion problems we had been struggling with for months disapeared and our client threw a virtual parade. I cannot understate how unobvious this bug was. For years we have been conditioned to dispose of objects that implement <code>IDisposable</code> and many refactoring tools like R# and CodeRush actually warn if you don't. In this case disposing of <code>HttpClient</code> was the wrong thing to do. It is unfortunate that <code>HttpClient</code> implements <code>IDisposable</code> and encourages the wrong behaviour</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I&#39;ve been using HttpClient wrong for years and it finally came back to bite me. My site was unstable and my clients furious, with a simple fix performance improved greatly and the instability disapeared.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EctiaBj.jpg&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;p&gt;At the same time I actually improved the performance of the application through more efficient socket usage.&lt;/p&gt;
    
    </summary>
    
      <category term="Deployment" scheme="http://www.westerndevs.com/categories/Deployment/"/>
    
    
      <category term=".net" scheme="http://www.westerndevs.com/tags/net/"/>
    
  </entry>
  
  <entry>
    <title type="html">An Intro to NGINX for Kestrel</title>
    <link href="http://www.westerndevs.com/Deployment/nginx/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Deployment/nginx/</id>
    <published>2016-07-17T21:36:36.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Kestrel is a light weight web server for hosting ASP.NET Core applications on really any platform. It is based on a library called libuv which is an eventing library and it, actually, the same one used by nodejs. This means that it is an event driven asynchronous I/O based server.</p><p>When I say that Kestrel is light weight I mean that it is lacking a lot of the things that an ASP.NET web developer might have come to expect from a web server like IIS. For instance you cannot do SSL termination with Kestrel or URL rewrites or GZip compression. Some of this can be done by ASP.NET proper but that tends to be less efficient than one might like. Ideally the server would just be responsbile for running ASP.NET code.  The suggested approach not just for Kestrel but for other light weight front end web servers like nodejs is to put a web server in front of it to handle infrastructure concerns. One of the better known ones is Nginx (pronounced engine-X like racer X).</p><p><img src="https://www.nginx.com/wp-content/themes/nginx-theme/assets/img//logo.png" alt="https://www.nginx.com/wp-content/themes/nginx-theme/assets/img//logo.png"></p><p>Nginix is a basket full of interesting capabilities. You can use it as a reverse proxy; in this configuration it takes load off your actual web server by preserving a cache of data which it serves before calling back to your web server. As a proxy it can also sit in front of multiple end points on your server and make them appear to be a single end point. This is useful for hiding a number of microservices behind a single end point. It can do SSL termination which makes it easy to add SSL to your site without having to modify a single line of code. It can also do gzip compression and serve static files. The commercial version of Nginx adds load balancing to the equation and a host of other things.</p><p>Let's set up Nginx in front of Kestrel to provide gzip support for our web site. First we'll just create a new ASP.NET Core web application.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yo aspnet</span></div></pre></td></tr></table></figure><p>Select <code>Web Application</code> and then bring it up with</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dotnet restore</div><div class="line">dotnet <span class="keyword">run</span><span class="bash"></span></div></pre></td></tr></table></figure><p>This is running on port 5000 on my machine and hitting it with a web browser reports the content-encoding as regular, no gzip.</p><p><img src="http://i.imgur.com/3NvYQ0w.jpg" alt="No gzip content encoding"></p><p>That's no good, we want to make sure our applications are served with gzip. That will make the payload smaller and the application faster to load.</p><p>Let's set up Nginx. I installed my copy through brew (I'm running on OSX) but you can just as easily download a copy from the <a href="https://www.nginx.org/" target="_blank" rel="external">Nginx site</a>. There is even <a href="http://nginx.org/en/download.html" target="_blank" rel="external">support for Windows</a> although the performance there is not as good as it in on *NIX operating systems. I then set up a <code>nginx.conf</code> configuraiton file. The default config file is huge but I've trimmed it down here and annotated it.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#number of worker processes to spawn</span></div><div class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">#maximum number of connections</span></div><div class="line"><span class="section">events</span> &#123;</div><div class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">#serving http information</span></div><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="comment">#set up mime types</span></div><div class="line">    <span class="attribute">include</span>       mime.types;</div><div class="line">    <span class="attribute">default_type</span>  application/octet-stream;</div><div class="line"></div><div class="line">    <span class="comment">#set up logging</span></div><div class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line">    <span class="attribute">access_log</span>  /Users/stimms/Projects/nginxdemo/logs/access.log  main;</div><div class="line"></div><div class="line">    <span class="comment">#uses sendfile(2) to send files directly to a socket without buffering</span></div><div class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="comment">#the length of time a connection will stay alive on the server</span></div><div class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</div><div class="line"></div><div class="line">    <span class="comment">#compress the response stream with gzip</span></div><div class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</div><div class="line"></div><div class="line">    <span class="comment">#configure where to listen</span></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="comment">#listen over http on port 8080 on localhost</span></div><div class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;</div><div class="line">        <span class="attribute">server_name</span>  localhost;</div><div class="line"></div><div class="line">        <span class="comment">#serve static files from /Users/stimms/Projects/nginxdemo for requests for</span></div><div class="line">        <span class="comment">#resources under /static</span></div><div class="line">        <span class="attribute">location</span> /static &#123;</div><div class="line">            <span class="attribute">root</span> /Users/stimms/Projects/nginxdemo;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">#by default pass all requests on / over to localhost on port 5000</span></div><div class="line">        <span class="comment">#this is our Kestrel server</span></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:5000/;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>With this file in place we can load up the server on port 8080 and test it out.</p><p><code>nginx -c /Users/stimms/Projects/nginxdemo/nginx.conf</code></p><p>I found I had to use full paths to the config file or nginx would look in its configuration directory.</p><p>Don't forget to also run Kestrel. Now when pointing a web browser at port 8080 on the local host we see</p><p><img src="http://i.imgur.com/diRLFrA.jpg" alt="Content-encoding gzip enabled"></p><p>Content-encoding now lists gzip compression. Even on this small page we can see a reduction from 8.5K to 2.6K scaled over a huge web site this would be a massive savings.</p><p>Let's play with taking some more load off the Kestrel server by caching results. In the nginx configuration file we can add a new cache under the <code>http</code> configuration</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#set up a proxy cache location</span></div><div class="line">proxy_cache_path  /tmp/cache <span class="attr">levels=1:2</span> <span class="attr">keys_zone=aspnetcache:8m</span> <span class="attr">max_size=1000m</span> <span class="attr">inactive=600m;</span>  </div><div class="line">proxy_temp_path /tmp/cache/temp;</div></pre></td></tr></table></figure><p>This sets up a cache in /tmp/cache of size 8MB up to 1000MB which will become inactive after 600 minutes (10 hours). Then under the listen directive we'll add some rules about what to cache</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#use the proxy to save files</div><div class="line">proxy_cache aspnetcache;</div><div class="line">proxy_cache_valid  <span class="number">200</span> <span class="number">302</span>  <span class="number">60</span>m;</div><div class="line">proxy_cache_valid  <span class="number">404</span>      <span class="number">1</span>m;</div></pre></td></tr></table></figure><p>Here we cache 200 and 302 respones for 60 minutes and 404 responses for 1 minute. If we add these rules and restart the nginx server</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -c <span class="regexp">/Users/</span>stimms<span class="regexp">/Projects/</span>nginxdemo<span class="regexp">/nginx.conf -s reload</span></div></pre></td></tr></table></figure><p>Now when we visit the site multiple times the output of the Kestrel web server shows it isn't being hit. Awesome! You might not want to cache everything on your site and you can add rules to the listen directive to just cache image files, for instance.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#just <span class="keyword">cache</span> image files, <span class="keyword">if</span> <span class="literal">not</span> <span class="keyword">in</span> <span class="keyword">cache</span> ask Kestrel</div><div class="line">location /images/ &#123;</div><div class="line">    #use the proxy <span class="keyword">to</span> save files</div><div class="line">    proxy_cache aspnetcache;</div><div class="line">    proxy_cache_valid  <span class="number">200</span> <span class="number">302</span>  <span class="number">60</span>m;</div><div class="line">    proxy_cache_valid  <span class="number">404</span>      <span class="number">1</span>m;</div><div class="line">    proxy_pass http:<span class="comment">//127.0.0.1:5000;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">#by default pass <span class="literal">all</span> requests <span class="keyword">on</span> / over <span class="keyword">to</span> localhost <span class="keyword">on</span> port <span class="number">5000</span></div><div class="line">#this is our Kestrel server</div><div class="line">location / &#123;</div><div class="line">    proxy_pass http:<span class="comment">//127.0.0.1:5000/;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>While Kestrel is fast it is still slower than Nginx at serving static files so it is worthwhile offloading traffix to Nginx when possible.</p><p>Nginx is a great deal of fun and worth playing with. We'll probably revisit it in future and talk about how to use it in conjunction with microservices. You can find the code for this post at <a href="https://github.com/AspNetMonsters/Nginx" target="_blank" rel="external">https://github.com/AspNetMonsters/Nginx</a>.</p>]]></content>
    
    <summary type="html">
    
      Kestrel is a server capable of serving up ASP.NET Core applications on any platform but in production you need to run it behind another server.
    
    </summary>
    
      <category term="Deployment" scheme="http://www.westerndevs.com/categories/Deployment/"/>
    
    
      <category term="nginx" scheme="http://www.westerndevs.com/tags/nginx/"/>
    
      <category term="kestrel" scheme="http://www.westerndevs.com/tags/kestrel/"/>
    
      <category term="deployment" scheme="http://www.westerndevs.com/tags/deployment/"/>
    
  </entry>
  
  <entry>
    <title type="html">End to end testing for your saga</title>
    <link href="http://www.westerndevs.com/Tools/NSBSagaTimeouts/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Tools/NSBSagaTimeouts/</id>
    <published>2016-07-15T18:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><strong>Disclaimer</strong></p><p>In this article I'm going to use the term &quot;saga&quot; because that's what NServiceBus calls it. Don't take this as acceptance of this definition of &quot;saga&quot; in general. What NServiceBus call &quot;saga&quot; would be better called a &quot;workflow&quot; or &quot;process manager&quot;. Kellabyte has a <a href="http://kellabyte.com/tag/saga/" target="_blank" rel="external">great article</a> on it.</p><p>I've recently been playing with sagas in NServiceBus. A saga is a tool for coordinating a number of messages across time. Generally there will be one or messages which start a saga and then the saga will listen for new messages to wake up and perform action. A saga is stateful which means that you can put all sorts of useful information in the saga data to allow making decisions later on. A very useful feature of sagas is that you can set a timeout to be fired at some point in the future. So for example you could start a shopping cart saga and schedule a timeout 24 hours in the future. When that timeout is reached the saga is woken up again and you could send a reminder e-mail to the owner of cart to check out. There are countless business processes which have some requirement to do something in the future even if that something is checking to make sure that some action has occured and compensating if not.</p><p>As you can imagine when testing a saga in an end to end test you don't really want to wait 24 hours for something to timeout. The usual advice around this is to make the timeout configurable in some fashion and just set it to a low value. This is difficult to do in an end to end test and still have confidence that you're not hiding some broken functionality. This is why we don't like to have special constructors just for unit testing. In my case I'm using SQL persistance to save timeout information to a database. This means that the database can be hacked to allow the manual execution of timeouts. Let's do it.</p><p>The <code>TimeoutEntity</code> table is the one we want to alter. It contains a column called <code>Time</code> which is the time at which the timeout will occur. In my case I knew an Id from the saga so I joined against the specific saga data table to find the approprate timeout to update. I only schedule one timeout at a time with this saga so I don't have to worry about finding a timeout in a multitude of them for that saga.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> te</div><div class="line"><span class="keyword">set</span> <span class="keyword">Time</span>=<span class="keyword">GETUTCDATE</span>()</div><div class="line"><span class="keyword">from</span> nservicebus.dbo.TimeoutEntity te <span class="keyword">inner</span> <span class="keyword">join</span> </div><div class="line">        nservicebus.dbo.SockFinderSagaData sfsd <span class="keyword">on</span> te.SagaId = sfsd.Id</div><div class="line"><span class="keyword">where</span> SockId=@sockId</div></pre></td></tr></table></figure><p>You'll note here that I set the time to the current time. It is important that you don't set the date to some time in the past. I initially did that and found timeouts weren't firing. The reason is that the query NServiceBus uses to find the timeout looks for timeout entries since the last polling event to now. This query would miss things scheduled way in the past. Here are the queries the NHibernate persistence uses</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016</span><span class="number">-07</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">17</span>:<span class="number">29</span>,<span class="number">197</span> DEBUG [<span class="number">15</span>][NT AUTHORITY\SYSTEM] SELECT this_.Id <span class="keyword">as</span> y0_, this_.Time <span class="keyword">as</span> y1_ FROM TimeoutEntity this_ WHERE this_.Endpoint = <span class="meta">@p</span>0 and (this_.Time &gt;= <span class="meta">@p</span>1 and this_.Time &lt;= <span class="meta">@p</span>2) ORDER BY this_.Time asc;<span class="meta">@p</span>0 = <span class="string">'AdverseActions'</span> [<span class="built_in">Type</span>: <span class="built_in">String</span> (<span class="number">4000</span>)], <span class="meta">@p</span>1 = <span class="number">7</span>/<span class="number">15</span>/<span class="number">2016</span> <span class="number">3</span>:<span class="number">47</span>:<span class="number">42</span> PM [<span class="built_in">Type</span>: <span class="built_in">DateTime</span> (<span class="number">0</span>)], <span class="meta">@p</span>2 = <span class="number">7</span>/<span class="number">15</span>/<span class="number">2016</span> <span class="number">4</span>:<span class="number">17</span>:<span class="number">29</span> PM [<span class="built_in">Type</span>: <span class="built_in">DateTime</span> (<span class="number">0</span>)]</div><div class="line"><span class="number">2016</span><span class="number">-07</span><span class="number">-15</span> <span class="number">16</span>:<span class="number">17</span>:<span class="number">29</span>,<span class="number">197</span> DEBUG [<span class="number">15</span>][NT AUTHORITY\SYSTEM] SELECT this_.Id <span class="keyword">as</span> Id6_0_, this_.Destination <span class="keyword">as</span> Destinat2_6_0_, this_.SagaId <span class="keyword">as</span> SagaId6_0_, this_.State <span class="keyword">as</span> State6_0_, this_.Time <span class="keyword">as</span> Time6_0_, this_.Headers <span class="keyword">as</span> Headers6_0_, this_.Endpoint <span class="keyword">as</span> Endpoint6_0_ FROM TimeoutEntity this_ WHERE this_.Endpoint = <span class="meta">@p</span>0 and this_.Time &gt; <span class="meta">@p</span>1 ORDER BY this_.Time asc OFFSET <span class="number">0</span> ROWS FETCH FIRST <span class="meta">@p</span>2 ROWS ONLY;<span class="meta">@p</span>0 = <span class="string">'AdverseActions'</span> [<span class="built_in">Type</span>: <span class="built_in">String</span> (<span class="number">4000</span>)], <span class="meta">@p</span>1 = <span class="number">7</span>/<span class="number">15</span>/<span class="number">2016</span> <span class="number">4</span>:<span class="number">17</span>:<span class="number">29</span> PM [<span class="built_in">Type</span>: <span class="built_in">DateTime</span> (<span class="number">0</span>)], <span class="meta">@p</span>2 = <span class="number">1</span> [<span class="built_in">Type</span>: Int32 (<span class="number">0</span>)]</div></pre></td></tr></table></figure><p>Polling of the timeout table happens at least once per minute. So this still means that your tests need to wait 60 seconds from hacking the table to checking the result of the timeout. This is still a bit painful but these are integraiton tests and likely you're running a bunch in parallel so the hit isn't horrific. With this code in place I was able to reliably simulate the state of the saga in the future. I'm like a time traveler and you can be too.</p>]]></content>
    
    <summary type="html">
    
      Looking to do end to end testing of your saga? I strugged.
    
    </summary>
    
      <category term="Tools" scheme="http://www.westerndevs.com/categories/Tools/"/>
    
    
      <category term="NserviceBus" scheme="http://www.westerndevs.com/tags/NserviceBus/"/>
    
  </entry>
  
  <entry>
    <title type="html">How I fixed OneDrive like Mark Russinovich</title>
    <link href="http://www.westerndevs.com/debugging/MarkRussinovich/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/debugging/MarkRussinovich/</id>
    <published>2016-06-11T22:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Fellow <a href="http://aspnetmonsters.com" target="_blank" rel="external">Monster David Paquette</a> sent me a link to a shared OneDrive folder today with some stuff in it. Clicking on the link I was able to add it to my OneDrive. The dialog told me files would appear on my machine soon. So I waited.</p><p>After an outrageously long time, 37 seconds, the files weren't there and I went hunting to find out why. As it turns out OneDrive wasn't even running. That's suppose to be a near impossiblity in Windows 10 so I hopped on the Interwebernets to find out why. Multiple sources suggested solutions like clearing my credentials and running <code>OneDrive.exe /reset</code>. Of course none of them worked.</p><p>Something was busted.</p><p>Running the OneDrive executable didn't bring up the UI it didn't do any of the things the Internet told me it should. My mind went back to when I was setting up my account on this computer and how I fat fingered <code>stimm</code> instead of <code>stimms</code> as my user name. Could it be the OneDrive was trying to access some files that didn't exist?</p><p>Channeling my inner Mark Russinovich I opened up <code>ProcessMonitor</code> a fantastic tool which monitors file system and registry access. You can grab your own copy for free from <a href="https://technet.microsoft.com/en-us/sysinternals/bb896645.aspx" target="_blank" rel="external">https://technet.microsoft.com/en-us/sysinternals/bb896645.aspx</a>.</p><p>In the UI I added filters for any process with the word &quot;drive&quot; in it and then filtered out &quot;google&quot;. I did this because I wasn't sure if the rename from skydrive to onedrive had missed anything. Then I ran the command line to start up OneDrive again.</p><p>Process monitor found about 300 results before the process exited. Sure enough as I went through the file accesses I found<img src="http://i.imgur.com/soAh4PR.png" alt="http://i.imgur.com/soAh4PR.png">Sure enough OneDrive is trying to create files inside of a directory which doesn't exist. Scrolling further up I was able to find some references to values in the registry under <code>HKCU\SOFTWARE\Microsoft\OneDrive</code> which, when I opened them up, contained the wrong paths. I corrected them<img src="http://i.imgur.com/arhWYgt.png" alt="http://i.imgur.com/arhWYgt.png">And with that in place was able to start up OneDrive successfully again and sync down the pictures of cats that David had sent me.</p><p>The story here is that it is possible, and even easy, to figure out why a compiled application on your machine isn't working. By examining the file and registry accesses it is making you might be able to suss out what's going wrong and fix it.</p>]]></content>
    
    <summary type="html">
    
      Even with compiled applications it is possible to debug issues
    
    </summary>
    
      <category term="debugging" scheme="http://www.westerndevs.com/categories/debugging/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">CI with F# SQL Type Providers</title>
    <link href="http://www.westerndevs.com/docker/CI-for-fsharp-typeproviders/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/docker/CI-for-fsharp-typeproviders/</id>
    <published>2016-05-06T22:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>My experimentation with F# continues. My latest challenge has been figuring out how to get SQL type providers to work with continuous integration. The way that SQL type providers work (and I'm speaking broadly here because there are about 4 of them) is that they examine a live database and generate types from it. On your local machine this is a perfect set up because you have the database locally to do development against. However on the build server having a database isn't as likely.</p><p>In my particular case I'm using Visual Studio Online or TFS Online or whatever the squid it is called these days. Visual studio team services that's what it is called.</p><p><img src="http://i.imgur.com/raetyHn.jpg" alt="Screenshot of VSTS"></p><p>I'm using a hosted build agent which may or may not have a database server on it - at least not one that I really want to rely on. I was tweeting about the issue and Dmitry Morozov (who wrote the type provider I'm using - the F# community on twitter is amazing) suggested that I just make the database part of my version control. Of course I'm already doing that but in this project I was using EF migrations. The issue with that is that I need to have the database in place to build the project and I needed to build the project to run the migrations... For those who are big into graph theory you will have recognized that there is a cycle in the dependency graph and that ain't good.</p><p><img src="http://i.imgur.com/8tORskw.png" alt="Graph cycles"></p><p>EF migrations are kind of a pain, at least that was my impression. I checked with Canada's Julie Lerman, David Paquette, to see if maybe I was just using them wrong.</p><p><img src="http://i.imgur.com/0O49NuU.jpg" alt="Discussion with Dave Paquette"></p><p>So I migrated to roundhouse which is a story for another post. With that in place I set up a super cheap database in azure and I hooked up the build process to update that database on every deploy. This is really nice because it catches database migration issues before the deployment step. I've been burned by migrations which locked the database before on this project and now I can catch them against a low impact database.</p><p>One of the first step in my build process is to deploy the database.<img src="http://i.imgur.com/rcrX5KS.jpg" alt="Build process"></p><p>In my F# I have a setting module which holds all the settings and it includes</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Settings = </div><div class="line">    <span class="meta">[&lt;Literal&gt;]</span></div><div class="line">    <span class="keyword">let</span> buildTimeConnectionString = <span class="string">"Server=tcp:builddependencies.database.windows.net,1433;Database=BuildDependencies;User ID=build@builddependencies;Password=goodtryhackers;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"</span></div></pre></td></tr></table></figure><p>And this string is used throughout my code when I create the SQL based types</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> <span class="type">Completions </span>= SqlProgrammabilityProvider&lt;Settings.buildTimeConnectionString&gt;</div></pre></td></tr></table></figure><p>and</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mergeCommand = <span class="keyword">new</span> SqlCommandProvider&lt;<span class="string">"""</span></div><div class="line">        merge systems as target</div><div class="line">        ...""", Settings.buildTimeConnectionString&gt;(ConnectionStringProvider.GetConnection)</div></pre></td></tr></table></figure><p>In that second example you might notice that the build time connection string is different from the run time connection string which is specified as a parameter.</p><p>##How I wish it worked</p><p>For the most part having a database build as part of your build process isn't a huge deal. You need it for integration tests anyway but it is a barrier for adoption. It would be cool if you could check in a serialized version of the schema and, during CI builds, point the type provider at this serialized version. This serialized version could be generated on the developer workstations then checked in. I don't think it is an ideal solution and now I've done the footwork to get the build database I don't think I would use it.</p>]]></content>
    
    <summary type="html">
    
      F# type providers are awesome but it took me a bit to figure out how to get them to work with CI
    
    </summary>
    
      <category term="docker" scheme="http://www.westerndevs.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">Running your app on Windows Server Core Containers</title>
    <link href="http://www.westerndevs.com/docker/windows-docker/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/docker/windows-docker/</id>
    <published>2016-04-27T22:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Most of the day I work on an app which makes use of <a href="http://particular.net/" target="_blank" rel="external">NServiceBus</a>. If you've ever talked to me about messaging, then you know that I'm all over messaging like a ferret in a sock.<img src="http://i.imgur.com/oglJADJ.png" alt="Sock Ferret"></p><p>So I'm, understandibly, a pretty big fan of NServiceBus - for the most part. The thing with architecting your solution to use SOA or Microservices or whatever we're calling it these days is that you end up with a lot of small applications. Figuring out how to deploy these can be a bit of a pain as your system grows. One solution I like is to make use of the exciting upcoming world of containers. I've deployed a few ASP.NET Core applications to a container but NServiceBus doesn't work on dotnet Core so I need to us a Windows container here.</p><p>First up is to download the ISO for Windows Server Core 2016 from Microsoft. You can do that for free <a href="https://www.microsoft.com/en-us/server-cloud/products/windows-server-2016/" target="_blank" rel="external">here</a>.  I provisioned a virtual box VM and installed Windows using the downloaded ISO. I chose to use windows server core as opposed to the version of windows which includes a full UI. The command line was good enough for Space Quest II and by gum it is good enough for me.</p><p>Starting up this vm gets you this screen<img src="http://i.imgur.com/jvEsdMU.png" alt="Imgur"></p><p>Okay, let's do it. Docker isn't installed by default but there is a great article on how to install it onto an existing machine <a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/quick-start-windows-server" target="_blank" rel="external">here</a>. In short I ran</p><p><code>powershell.exe</code></p><p>Which started up powershell for me (weird that powershell isn't the default shell). Then</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget -uri https://aka.ms/tp4/<span class="keyword">Install</span>-ContainerHost -OutFile <span class="keyword">C</span>:\<span class="keyword">Install</span>-ContainerHost.ps1</div><div class="line">&amp; <span class="keyword">C</span>:\<span class="keyword">Install</span>-ContainerHost.ps1</div></pre></td></tr></table></figure><p>I didn't specify the -HyperV flag as in the linked article because I wanted Docker containers. There are two flavours of containers on Windows at the moment. HyperV containers which are heavier weight and Docker containers which are lighter. I was pretty confident I could get away with Docker containers so I started with that. The installer took a long, long time. It had to download a bunch of stuff and for some reason it decided to use the background downloader which is super slow.</p><p><img src="http://i.imgur.com/3ce2GpA.png" alt="Slowwwww"></p><p>By default, the docker daemon only listens on 127.0.0.1 which means that you can only connect to it from inside the virtual machine. That's not all that useful as all my stuff is outside of the virtual machine. I needed to do a couple of things to get that working.</p><p>The first was to tell docker to listen on all interfaces. Ideally you shouldn't allow docker to bind to external interfaces without the TLS certificates installed. That was kind of a lot of work so I ignored the warning in the logs that it generates</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/!\\ DONT<span class="comment">' BIND ON ANY IP ADDRESS WITHOUT setting -tlsverify IF YOU DON'T KNOW WHAT YOU'RE DOING /!\\</span></div></pre></td></tr></table></figure><p>Yeah that's fine. To do this open up the docker start command and tell it to listen on the 0.0.0.0 interface.</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">notepad c:<span class="symbol">\p</span>rogramdata<span class="symbol">\d</span>ocker<span class="symbol">\r</span>unDockerDaemon.cmd</div></pre></td></tr></table></figure><p>Now edit the line</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker daemon -D -<span class="selector-tag">b</span> <span class="string">"Virtual Switch"</span></div></pre></td></tr></table></figure><p>to read</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">docker</span> <span class="selector-tag">daemon</span> <span class="selector-tag">-D</span> <span class="selector-tag">-b</span> "<span class="selector-tag">Virtual</span> <span class="selector-tag">Switch</span>" <span class="selector-tag">-H</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:2376</span></div></pre></td></tr></table></figure><p>Now we need to relax the firewall rules or, in my case, turn off the firewall completely.</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Set</span>-NetFirewallProfile <span class="comment">-name * -Enabled</span> <span class="comment">"false"</span></div></pre></td></tr></table></figure><p>Now restart docker</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">net</span> stop docker</div><div class="line"><span class="built_in">net</span> <span class="built_in">start</span> docker</div></pre></td></tr></table></figure><p>We should now be able to access docker from the host operating system. And indeed I can by specifying the host to connect to when using the docker tools. In my case on port 2376 on 192.168.0.13</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker -H <span class="string">tcp:</span><span class="comment">//192.168.0.13:2376 ps -a</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS   PORTS               NAMES</div></pre></td></tr></table></figure><p>Finally, we can actually start using docker.</p><p>I hammered together a quick docker file which sucked in the output of my NSB handler's build directory.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> windowsservercore</div><div class="line"></div><div class="line"><span class="keyword">ADD</span><span class="bash"> bin/Debug /funnel</span></div><div class="line"></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /funnel</span></div><div class="line"></div><div class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> NServiceBus.Host.exe</span></div></pre></td></tr></table></figure><p>This dockerfile is based on the windowservercore image which was loaded onto the virtual machine during the setup script. You can check that using the <code>images</code> command to docker. To get the docker file running I first build the image then ask for it to be run</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker -H  <span class="built_in">t</span><span class="symbol">cp:</span>//<span class="number">192.168</span>.<span class="number">0.13</span><span class="symbol">:2376</span> build -<span class="built_in">t</span> funnel1 -f .\Dockerfile .</div><div class="line">docker -H  <span class="built_in">t</span><span class="symbol">cp:</span>//<span class="number">192.168</span>.<span class="number">0.13</span><span class="symbol">:2376</span> run -<span class="built_in">t</span> -d funnel1</div></pre></td></tr></table></figure><p>The final command spits out a big bunch of letters and numbers which is the Id of the image. I can use that to get access to the command line output from that image</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker -H  <span class="string">tcp:</span><span class="comment">//192.168.0.13:2376 logs fb0d6f23050c9039e65a106bea62a9049d9f79ce6070234472c112fed516634e</span></div></pre></td></tr></table></figure><p>Which gets me<img src="http://i.imgur.com/Asbigge.png" alt="Output"></p><p>With that I'm most of the way there. I still need to figure out some networking stuff so NSB can find my database and put our license file in there and check that NSB is actually able to talk to MSMQ and maybe find a better way to get at the logs... okay there is actually a lot still to do but this is the first step.</p>]]></content>
    
    <summary type="html">
    
      Getting started with NServiceBus on windows containers
    
    </summary>
    
      <category term="docker" scheme="http://www.westerndevs.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">FSharp.Data.SqlClient Type Provider Having Trouble Bulk Loading</title>
    <link href="http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient%20no%20method/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient no method/</id>
    <published>2016-04-24T22:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>I really hate assembly binding and redirects and the such in .net. Any time I see a fatal error message like</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could <span class="keyword">not</span> load <span class="built_in">file</span> <span class="keyword">or</span> assembly 'FSharp.Core, Version=<span class="number">4.3</span><span class="number">.0</span><span class="number">.0</span>, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' <span class="keyword">or</span> one <span class="keyword">of</span> <span class="keyword">its</span> dependencies. The located assembly's manifest definition <span class="keyword">does</span> <span class="keyword">not</span> match <span class="keyword">the</span> assembly <span class="keyword">reference</span>. (Exception <span class="keyword">from</span> HRESULT: <span class="number">0x80131040</span>)</div></pre></td></tr></table></figure><p>I want to quit programming and become a baker. Yeah I would have to get up early but I would rarely encounter</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could <span class="keyword">not</span> leven bread <span class="keyword">using</span> yeast <span class="number">1.0</span><span class="number">.4</span><span class="number">.5</span> <span class="keyword">or</span> <span class="literal">one</span> <span class="keyword">of</span> <span class="keyword">it</span><span class="string">'s dependencies</span></div></pre></td></tr></table></figure><p>Anyway while trying to use the bulk loading feature I was having a problem because my F# project was referending FSharp.Core 4.4.0 and the C# project I had consuming the F# api was using 4.3.0. I solved it by installing the correct version of the dll in the C# project</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Install-<span class="keyword">Package</span> <span class="title">fsharp.core</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Uh oh: Method not found: &#39;Void FSharp.Data.DataTable`1.BulkCopy&#39;
    
    </summary>
    
      <category term="fsharp" scheme="http://www.westerndevs.com/categories/fsharp/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">FSharp.Data.SqlClient Type Provider Not Finding Tables</title>
    <link href="http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/fsharp/FSharp.Data.SqlClient/</id>
    <published>2016-04-23T22:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>This one took me forever to figure out. I'm using the SqlProgrammabilityProvider from FSharp.Data.SqlClient to do some data work. However when I point the connection string at my databse it isn't able to generate any completions after Table</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[&lt;Literal&gt;]</div><div class="line">   let connectionString = <span class="string">@"Data Source=localhost\SQL2014;Initial Catalog=Completions;Integrated Security=True;MultipleActiveResultSets=True;Timeout=360"</span></div><div class="line"></div><div class="line">   type Completions = SqlProgrammabilityProvider&lt;connectionString&gt;</div><div class="line">   </div><div class="line">   let TagExists(projectId, tagNumber) =</div><div class="line">       let b = new Completions.dbo.Tables. //ugh, won't complete</div></pre></td></tr></table></figure><p>I tried pointing it at different databases on the same server and it worked just fine. I finally remembered that one of the tables in the database made use of spatial types. I experimented by deleting the tables which made use of the coordinates and all of a sudden things started working!</p><p>Obviously deleting the table wasn't a great solution so I pulled in the required packages which I think are</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Install-<span class="keyword">Package</span> <span class="title">microsoft.SqlServer.Types</span></div><div class="line">Install-<span class="keyword">Package</span> <span class="title">System.Spatial</span></div></pre></td></tr></table></figure><p>I was now able to access the tables as expected.</p>]]></content>
    
    <summary type="html">
    
      If the SqlProgrammabilityProvider isn&#39;t finding table names for you this might be the fix
    
    </summary>
    
      <category term="fsharp" scheme="http://www.westerndevs.com/categories/fsharp/"/>
    
    
  </entry>
  
  <entry>
    <title type="html">What is middleware anyway?</title>
    <link href="http://www.westerndevs.com/Tools/What-is-middleware/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Tools/What-is-middleware/</id>
    <published>2016-03-16T17:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>If you spend a bit of time around the net ASP.NET Core there is a word you're going to hear thrown around a bunch and that is &quot;middleware&quot;. I find middleware to be a confusing term which doesn't mean anything or perhaps means everything. Let's figure out what middleware means and what sorts of middleware we can slot into ASP.NET Core.</p><a id="more"></a><p>Middleware sits between two pieces of software which talk with one another piece.  It is responsible for connecting the softwares together and may intercede to alter the communication or even intercept it. I know what you're thinking: that's a super vague definition, by that definition almost everything is middleware. Yep. See why I consider the term to be so confusing? The software we use these days is hugely abstracted and there are a lot of layers. Any of these layers in between are middleware.</p><p><img src="http://i.imgur.com/JHGMtei.png" alt="Middleware as a hamburger"></p><p>When I was a kid I had this game, Spellicoptor, which you had to boot right into. As far as I know it ran right on the hardware without that heavy weight Disk Operating System getting in the way. That was probably the last piece of software I used which wasn't middleware - it was certainly the most sneakily educational.</p><p>For a web application we usually think of middleware as the software between the web server and the application responsible for returning HTML. In ASP.NET Core serving out static files such as .css files and images is performed by middleware. The prevents our, comparatively, complicated application pipeline from even running. This would be an example of middleware which intercepts requests and prevents it from even reaching the other layer.  You could also put authentication in the pipeline so that by the time a request hits you application code you can be confident that it is properly authenticated. In ASP.NET Core the middleware is implemented as a pipeline. This means that a request can pass though multiple pieces of middleware before it hits your code. In theory your code should not depend on a piece of middleware being there. However, in practice, we frequently do depend on something being there. Consider the case of authenticating a user: we frequently rely on the user name being set. However this user name could have been set by some authentication middleware or it could have been set by some mock development middleware which passes in a fake user.</p><p>The pipeline in ASP.NET Core is a bi-directional one. This means that each piece of middleware has two opportunities to intervene in the request processing: when the request comes in and when the response goes out. So your middleware can alter the data your application gets or it can alter the data coming from your application.</p><p><img src="http://i.imgur.com/PR96d6W.png" alt="Incoming and outgoing"></p><p>When should you use middleware? I like to think of it as something of a cross cutting concern. If there is something you want to before or after a large number of requests and it isn't part of the core logic of the application then middleware might be the place for you. Pay attention to the &quot;core logic&quot; part of that sentence. If your application has some cross cutting concern but is really part of the logic of the application - say sending notification e-mail when anybody deletes an item (via the DELETE HTTP verb) then this shouldn't be in the middleware. However if you want to log requests then middleware could be a great place.</p><p>Middleware can take the place of what was one written as modules for IIS. Moving this functionality to middleware which knows how to talk OWIN means that your application is less coupled to IIS. It may be difficult to imagine a world where IIS is not the de facto tool for running ASP.NET applications but I suspect there are a great number of sites and applications which don't need the power of a full IIS stack behind them.</p><p>I wrote ASP.NET applications for the better part of a decade and I wrote modules perhaps 3 times in all those years. I just didn't see the advantage to using them. However others such as Dave and James assure me that in the wider world modules were used quite heavily. So this paragraph was going to be about how you'll likely never need to write middleware but at this juncture I honestly don't know where everything will end up. You might be writing middleware for 90% of your code.</p><p>I'm excited to see where the middleware for ASP.NET ends up. There is already some pretty nifty tooling in place providing custom error messages to help people out with very descriptive errors. I'd love to hear about your ideas for middleware in the comments below.</p>]]></content>
    
    <summary type="html">
    
      I find middleware to be a confusing term which doesn&#39;t mean anything or perhaps means everything. Let&#39;s figure out what middleware means
    
    </summary>
    
      <category term="Tools" scheme="http://www.westerndevs.com/categories/Tools/"/>
    
    
      <category term="asp.net" scheme="http://www.westerndevs.com/tags/asp-net/"/>
    
  </entry>
  
  <entry>
    <title type="html">I squash my pull requests and you should too</title>
    <link href="http://www.westerndevs.com/Tools/I-squash/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/Tools/I-squash/</id>
    <published>2016-02-18T04:56:56.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>A couple of weeks ago I made a change to my life. It was one of those big, earth shattering changes which ripple though everything: I started to squash the commits in my pull requests.</p><p>It was a drastic change but I think an overdue one. The reasons for my change are pretty simple: it makes looking at commit histories and maintaining long-lived branches easier. Before my pull requests would contain a lot of clutter: I'd check in small bits of work when I got them working and whoever was reviewing the pull request would have to look at a bunch of commits, some of which would later be reversed, to get an idea for what was going on. By squashing the commits down to a single commit I can focus on the key parts of the pull request without people having to see the mess I generated in between.</p><p>If you have long lived branches (I know, I know) then having a smaller number of commits during rebasing is a real help. There are fewer things that need merging so you don't end up fixing the same change over and over again.</p><p>Finally the smaller number of commits in mainline give a clearer view of what has changed in the destination branch. You individual commits might just have messages like &quot;fixing logging&quot; but when squashed into a PR the commit becomes &quot;Adding new functionality to layout roads automatically&quot;. Looking back that &quot;fixing logging&quot; commit isn't at all helpful once you're no longer in the thick of the feature.</p><h1>What has it done for me?</h1><p>I've already talked about some of the great benefits in the code base but for me, individually, there were some nicities too. First off is that I don't have to worry about screwing up so much. If I go down some crazy path in the code which doesn't work then I can bail out of it easily and without worrying that other developers on my team (Hi, Nick!) will think less of me.</p><p>I find myself checking in code a lot more frequently. I have a git alias to just do</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git wip</div></pre></td></tr></table></figure><p>and that checks in whatever I have lying around. It is a very powerful undo feature. I do a git wip whenever I find myself at the completion of some logical step be it writing a unit test or finishing some function or changing some style.</p><h1>How do you do it?</h1><p>It is easy. Just work as you normally would but with the added freedoms I mentioned. When you're ready to create a pull request then you can issue</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure><p>and find the first commit in your branch. There are some suggested ways to do this automatically but they never seem to work for me so I just do it manually.</p><p>Now you can rebase the commits</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -i 0ec9df23</div></pre></td></tr></table></figure><p>where 0ec9df23 is the sha of the last commit on the parent branch. This will open up an editor showing all the commits in chronological order. On left you'll see the word pick.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pick 78<span class="built_in">fc</span>6bc added PrDC session to speaking data</div><div class="line">pick 9741725 Podcast with Yves Goeleven</div><div class="line"></div><div class="line"><span class="comment"># Rebase 9d792c2..9741725 onto 9d792c2</span></div></pre></td></tr></table></figure><p>Starting at the bottom just change all but the first of these to <code>squash</code> or simply <code>s</code>. Save the file and exit. Git will now chug a bit and merge all the changes into one. With this complete you can push to the central repo and issue the pull request. You can add additional changes to this PR to address comments and, just before you do the merge, do another squash. You may need to push with -f but that's okay, this time.</p><p>I'm a big fan of this approach and I hope you will be too. It is better for your sanity, for the team’s sanity and for the git history's sanity.</p>]]></content>
    
    <summary type="html">
    
      By squashing your git commits you can make everybody&#39;s life better except for Idi Amin
    
    </summary>
    
      <category term="Tools" scheme="http://www.westerndevs.com/categories/Tools/"/>
    
    
      <category term="git" scheme="http://www.westerndevs.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title type="html">ProTip: Get a random date in SQL Server</title>
    <link href="http://www.westerndevs.com/SQL-Server/Random-date-in-sql/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/SQL-Server/Random-date-in-sql/</id>
    <published>2016-01-31T05:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Need to put a random date in each row of a table? Here is how to do it:</p><p>I have a table which contains a RequiredCompletionDate and I wanted to give it a random date in last year so I did</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> systems </div><div class="line">   <span class="keyword">set</span> RequiredCompletionDate = <span class="keyword">DATEADD</span>(<span class="keyword">day</span>, </div><div class="line">                                        <span class="keyword">ABS</span>(<span class="keyword">CAST</span>(<span class="keyword">CAST</span>(NEWID() <span class="keyword">AS</span> VARBINARY) <span class="keyword">AS</span> <span class="built_in">INT</span>)) % <span class="number">365</span>, </div><div class="line">                                        <span class="string">'2015-01-01'</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      How to fill a table with some random dates.
    
    </summary>
    
      <category term="SQL Server" scheme="http://www.westerndevs.com/categories/SQL-Server/"/>
    
    
      <category term="SQL Server" scheme="http://www.westerndevs.com/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title type="html">Launching ASP.NET Monsters</title>
    <link href="http://www.westerndevs.com/WhatWeveDone/Launching-Monsters/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/WhatWeveDone/Launching-Monsters/</id>
    <published>2016-01-26T19:32:21.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p><img src="http://aspnetmonsters.com/images/logo_579.png" alt="http://aspnetmonsters.com/"></p><p>One of the best things about the Western Devs is that we all have our own areas of interest and specialty. From time to time our interests align pretty closely and when this happens great things are produced. The <a href="http://aspnetmonsters.com/" target="_blank" rel="external">ASP.NET Monsters</a> are just such a thing.</p><p>Some of us are really excited about ASP.NET Core so we broke off a special interest group consisting of</p><div style="width: 100%">    <div style="width: 30%; display: inline-block">        <img src="http://aspnetmonsters.com/images/thumb_james.png" style="width: 100%">        <div style="text-align: center; font-weight: bold">James Chambers</div>    </div>    <div style="width: 30%; display: inline-block">        <img src="http://aspnetmonsters.com/images/thumb_dave.png" style="width: 100%">        <div style="text-align: center; font-weight: bold">Dave Paquette</div>    </div>    <div style="width: 30%; display: inline-block">            <img src="http://aspnetmonsters.com/images/thumb_simon.png" style="width: 100%">            <div style="text-align: center; font-weight: bold">Simon Timms</div>    </div></div><p>We're going to be blogging a lot about how to use ASP.NET Core and we're even going to record an ongoing series of videos, twice a week, with tips and tutorials. These videos will be short 5-10 minute affairs so you can watch them in your lunch break. Head over to <a href="http://aspnetmonsters.com/" target="_blank" rel="external">ASP.NET Monsters</a> to check out what we've unleashed.</p>]]></content>
    
    <summary type="html">
    
      We&#39;re really excited about the new ASP.NET Core and the future of ASP.NET in general. So much so that we&#39;re starting a specialty site and a bi-weekly video blog all about it.
    
    </summary>
    
      <category term="WhatWeveDone" scheme="http://www.westerndevs.com/categories/WhatWeveDone/"/>
    
    
      <category term="ASP.NET" scheme="http://www.westerndevs.com/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title type="html">ASP.net vNext is now ASP.net 5 is now ASP.net Core 1.0</title>
    <link href="http://www.westerndevs.com/News/ASP-Net-5-rename/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com/News/ASP-Net-5-rename/</id>
    <published>2016-01-20T05:00:00.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Did you hear the news? <a href="http://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx" target="_blank" rel="external">ASP.NET 5 is dead</a> it is now called ASP.NET Core 1.0. The name for this next generation of ASP.net(that's the capitalization I'm using because this isn't your grandmother typing in YAHOO.COM) has been up in the air for a while. We first heard the real details about ASP.net vNext at the MVP summit in 2014 and the first question on everybody's mind was &quot;what it was going to be called?&quot;. At the time there wasn't a decision on that. The perception at Microsoft seemed to be that the ASP.net moniker has a long and illustrious history. There is a lot of marketing behind the name and most developers, whether they work in the technology or not, have heard of ASP.net. Thus no matter what the final name was going to be it was pretty much a certainty that it would contain &quot;ASP.net&quot; in some form or another.</p><p>And that's the problem.</p><p>See ASP.net covers a boat load of technologies: not only does it cover ASP.net MVC but also all the garbage that is webforms. Yes the name ASP.net has a long history but it isn't one tenth as illustrious as the marketing drones at Microsoft seem to think. Let's take a second and look at the market for ASP.net. From what I can tell there are basically two types of developers who might use it</p><ol><li><strong>9-5 developers</strong> these folks who punch the clock and aren't going to waste a whole lot of their time on new technologies unless pushed by some reason at work.</li><li><strong>Magpies</strong> the developers who try out the new thing and, if worthy, move to it. These folk are the reason that we have such high turnover in web frameworks and even in web languages (Elixr anybody?)</li></ol><p>ASP.net Core is meant to give a sense of assurance to the 9-5 developers &quot;don't worry this is still ASP.net, you'll be fine it isn't any different&quot;. Problem is that's nonsense. It is different. It is a big jump and we're just being dishonest to these folks if we say otherwise. People shouldn't be moving to your framework because of subterfuge they should be moving because it is legitimately better. ASP.net Core is legitimately better.</p><p>The 9-5 developers aren't going to be moving to Core any time soon. ASP.net 4.6 is still the path they're going to take. Let's be honest, for a lot of people, ASP.net 2 is the path they're going to take.</p><p>The rename should have been larger and should have offered the clean break that the ASP.net team have been working so hard to give us. I want to be able to go into the nodejs community, the java community whatever community and pitch them something new. Instead I'm going to be explaining why, in 2016, we're still talking about Active Server Pages and how this isn't webforms.</p><p>I guess that boat has sailed now so we're stuck with a terrible name. Welcome to 2003.</p>]]></content>
    
    <summary type="html">
    
      What the rename was and why it didn&#39;t go far enough
    
    </summary>
    
      <category term="News" scheme="http://www.westerndevs.com/categories/News/"/>
    
    
      <category term="ASP.NET 5" scheme="http://www.westerndevs.com/tags/ASP-NET-5/"/>
    
      <category term="ASP.NET Core" scheme="http://www.westerndevs.com/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title type="html">SQL Server Aliases</title>
    <link href="http://www.westerndevs.com//sql-server-aliases/" rel="alternate" type="text/html"/>
    <id>http://www.westerndevs.com//sql-server-aliases/</id>
    <published>2015-12-17T07:06:57.000Z</published>
    <updated>2017-05-18T21:09:05.000Z</updated>
	<author>
	
	  
	  <name>Simon Timms</name>
	  <email>stimms@gmail.com</email>
	
	  <uri>http://www.westerndevs.com</uri>
	</author>
    
    <content type="html"><![CDATA[<p>Ever run into that problem where everybody on your team is using a different database instance name and every time you check out you have to update the config file with your instance name?</p><a id="more"></a><p>Boy have I seen some complicated solutions around this involving reading from environments and having private, unversioned configuration files. One of the developers on my team recommended using SQL Server Aliases to solve the problem. I fumbled around with these for a bit because I couldn't get them to work. Eventually, with some help, I got there.</p><p>Let's say that you have an instance on your machine called <code>sqlexpress</code> but that your project needs an instance called <code>sqlexpress2012</code>. The first thing is to open up the SQL Server Configuration Manager. The easiest way to do this is to run</p><p><code>SQLServerManager13.msc</code></p><p>where the 13 is the version number of SQL server so SQL 2014 is 12 and SQL 2016 is 13. That will give you</p><p><img src="http://i.imgur.com/XEwZzzl.png" alt="SQL Server Configuration Manager"></p><p>The first thing to check is that your existing instance is talking over TCP/IP.</p><p><img src="http://i.imgur.com/eQRs5I5.png" alt="Enable TCP/IP"></p><p>Then click on the properties for TCP/IPO and in the IP Addresses tab check for the TCP Dynamic Ports setting</p><p><img src="http://i.imgur.com/qQ4vy1y.png" alt="Dynamic ports"></p><p>Make note of that number because now we're going to jump to the alias section.</p><p><img src="http://i.imgur.com/pRyXu6D.png" alt="Aliases"></p><p>Right click in there and add a new alias</p><p><img src="http://i.imgur.com/wQeGUDU.png" alt=""></p><p>In here we are going to set the alias name to the new name we want to use. The port number is what we found above, the protocol is TCP/IP and the server is the existing server name. You then have to repeat this for the 64 bit client configuration and then restart your SQL server. You should now be able to use the new name, <code>localhost\sqlexpress2012</code> to access the server.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ever run into that problem where everybody on your team is using a different database instance name and every time you check out you have to update the config file with your instance name?&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
